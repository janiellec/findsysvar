-------------------------------------------------------------------------
--
--   MODULE:         gmsptplsm.kl
--   TITLE:          GMSPTPLSM PROGRAM
--
--
--   WRITTEN BY:     FANUC
--   REVISION DATE:  2018/09/05
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Application setup for stand alone configuration for a
--                      SBI spot plasma.
--                      
--                      
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--	   V4.0	      9-10-2018	 schoensm	  V8.33P06 stand-alone configurations
--	   V4.1	      9-08-2019	 schoensm	  V8.33P08 stand-alone configuration updates
--	   V4.2	      2-13-2020	 schoensm	  V8.33P09 fix LS bugs
--         V4.2       3-23-2020  marchaka         V8.33P09 Put ENET settings in gmenets3
--------------------------------------------------------------------------
PROGRAM GMSPTPLSM

%COMMENT = 'GM Spot Plasma V4.2'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
%INCLUDE gmcnstnt -- GM constants

CONST
Version = '2020-03-23'

VAR
  gm_status                            : INTEGER
  Current_Ver  IN SHADOW               : STRING[32] -- Set equal to Version constant in initialization routine
  stnda_sptpls IN SHADOW FROM gmlang1  : STRING[35]
  enter_gmdata IN SHADOW FROM gmlang1  : STRING[35]
  prog_nam                             : STRING[12]
  SBICommType IN CMOS		       : INTEGER  --communication type
  SBI_1_Slot IN CMOS		       : INTEGER --use for slote or node

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
ROUTINE TURK_IN_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING)FROM GMENETSU-- Turck input block setup
ROUTINE SBI_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING;P_host_ip:STRING)FROM GMENETS3 --setup SBI ENET Communication

%INCLUDE klrdutil -- Required for the CLR_STND_SCR routine for Pendant screen
%INCLUDE gmrdutil --GM common routines
-----------------------------------------------------------------------------
ROUTINE init_sptpslm
-- PURPOSE: to initialize application Programs associated with application setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(SBICommType) THEN
    SBICommType = Ethernet
  ENDIF
  IF UNINIT(SBI_1_Slot) THEN
    SBI_1_Slot = 2
  ENDIF

END init_sptpslm
-----------------------------------------------------------------------------
ROUTINE set_vr
-- PURPOSE: to load all variables used in process
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

	-- FFR Configuration OFF, not supported
  Set_B_sVar('$RSMFST_SV.$FFAST_ENBL', FALSE)
  Set_I_sVar('$RSMFST_SV.$FFAST_DO.$PORT_NUM', 18)	
  Set_I_sVar('$RSMPRG_SV.$SVPRG_ENBLE', 3)
  Set_B_sVar('$SVPRG_ENB', FALSE)

  -- User Alarms
  Set_S_sVar('$UALRM_MSG[93]', 'SBI Braze Fault'); Set_I_sVar('$UALRM_SEV[93]', 0)           -- Warning
  Set_S_sVar('$UALRM_MSG[94]', 'SBI Arc Established Error'); Set_I_sVar('$UALRM_SEV[94]', 0) -- Warning
  Set_S_sVar('$UALRM_MSG[96]', 'SBI Major Alarm'); Set_I_sVar('$UALRM_SEV[96]', 6)           -- Pause
  Set_S_sVar('$UALRM_MSG[97]', 'SBI Power Supply Fault'); Set_I_sVar('$UALRM_SEV[97]', 6)    -- Pause
  Set_S_sVar('$UALRM_MSG[98]', 'SBI Gas Fault'); Set_I_sVar('$UALRM_SEV[98]', 6)             -- Pause
  Set_S_sVar('$UALRM_MSG[99]', 'SBI Feeder Fault'); Set_I_sVar('$UALRM_SEV[99]', 6)          -- Pause

  --Set BackGround Task
  Set_S_sVar('$MIX_BG[1].$PROG_NAME', 'SBI_CLUTCH')
  Set_I_sVar('$MIX_BG[1].$MODE', 2)
  Set_I_sVar('$MIX_BG[1].$STATUS', 2)
  
  Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'SBI_MODE')
  Set_I_sVar('$MIX_BG[2].$MODE', 2)
  Set_I_sVar('$MIX_BG[2].$STATUS', 2)
  
  -- Interconnects PROCESS ON
  Set_B_sVar('$thrsditable[1].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[1].$di_no', 65)		     
  Set_I_sVar('$thrsditable[1].$do_no', 65)
  -- Interconnects Pilot Active  
  Set_B_sVar('$thrsditable[2].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[2].$di_no', 1043)		     
  Set_I_sVar('$thrsditable[2].$do_no', 83)
  -- Interconnects Pump Active
  Set_B_sVar('$thrsditable[3].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[3].$di_no', 1042)		     
  Set_I_sVar('$thrsditable[3].$do_no', 84)
  -- Interconnects Wire Ready
  Set_B_sVar('$thrsditable[4].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[4].$di_no', 813)		     
  Set_I_sVar('$thrsditable[4].$do_no', 81)
  -- Interconnects Cooler Fault
  Set_B_sVar('$thrsditable[5].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[5].$di_no', 1057)		     
  Set_I_sVar('$thrsditable[5].$do_no', 74)
  -- Interconnects Inverter Fault
  Set_B_sVar('$thrsditable[6].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[6].$di_no', 1059)		     
  Set_I_sVar('$thrsditable[6].$do_no', 75)
  -- Interconnects Pilot Inverter Fault
  Set_B_sVar('$thrsditable[7].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[7].$di_no', 1060)		     
  Set_I_sVar('$thrsditable[7].$do_no', 76)
  -- Interconnects Gas Fault
  Set_B_sVar('$thrsditable[8].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[8].$di_no', 1061)		     
  Set_I_sVar('$thrsditable[8].$do_no', 77)
  -- Interconnects Wire Fault
  Set_B_sVar('$thrsditable[9].$thr_enb', TRUE)                         
  Set_I_sVar('$thrsditable[9].$di_no', 1062)		     
  Set_I_sVar('$thrsditable[9].$do_no', 78) 

  --Set Style to   
  Set_S_sVar('$style_comnt[27]','SBI_STYLE27')
  Set_S_sVar('$style_name[27]', 'SBI_STYLE27') 
  Set_B_sVar('$style_enab[27]', TRUE) 
  
END set_vr
-----------------------------------------------------------------------------
ROUTINE set_io
-- PURPOSE: to comment and setup all io used in process
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --Setup IO Ports
  --Inputs
  SET_PORT_ASG(io_din, 1025,89, 2, io_din, 177, -16, gm_status)
  SET_PORT_ASG(io_din, 1041,89, 2, io_din, 193, -16, gm_status)
  SET_PORT_ASG(io_din, 1057,89, 2, io_din, 225, -16, gm_status)
  SET_PORT_ASG(io_gpin, 29, 89, 2, io_din, 177, -16, gm_status)
  
 --Outputs
  SET_PORT_ASG(io_dout, 1025,89, 2, io_dout, 241, -16, gm_status)
  SET_PORT_ASG(io_dout, 1041,89, 2, io_dout, 289, -16, gm_status)
  SET_PORT_ASG(io_dout, 1057,89, 2, io_dout, 305, -16, gm_status)
  SET_PORT_ASG(io_dout, 1073,89, 2, io_dout, 321, -16, gm_status)
  SET_PORT_ASG(io_gpout, 29, 89, 2, io_dout, 241, -16, gm_status)

  -- Node 34 Turck 801-816
  SET_PORT_ASG(IO_DIN,801, 89, 34, IO_DIN, 17, -16, gm_status)
  --PCorp Spindle Inputs Node 34
  SET_PORT_CMT(IO_DIN, 801,'diTorchClutch   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 802,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 803,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 804,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 805,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 806,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 807,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 808,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 809,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 810,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 811,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 812,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 813,'diWirePresent   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 814,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 815,'SBI Plasma      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 816,'SBI Plasma      ',  gm_status)
  --Setup IO Config
  TURK_IN_EIP(34,'Clutch Module')

  --SBI Inputs
  SET_PORT_CMT(IO_DIN, 65,'Process1OnReq   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 66,'Proc1BypassReq  ',  gm_status)
  SET_PORT_CMT(IO_DIN, 67,'SBI Shutdown    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 68,'Remote Start SBI',  gm_status)
  
  --SBI Outputs
  SET_PORT_CMT(IO_DOUT, 73,'SBIDevice Ready ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 74,'SBICooler Fault ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 75,'SBIPilot InvFLT ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 76,'SBIGas Fault    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 77,'SBIWire Fault   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 78,'SBIJob Load FLT ',  gm_status)  
  SET_PORT_CMT(IO_DOUT, 79,'doP1TipChgRegG1 ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 80,'doApTipMaintG1  ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 81,'doWireOk        ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 82,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 83,'SBIPilot Active ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 84,'SBIPump Active  ',  gm_status)

	--Spot Plasma Inputs
  SET_PORT_CMT(IO_DIN, 1025,'diJobNumBit1    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1026,'diJobNumBit2    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1027,'diJobNumBit3    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1028,'diJobNumBit4    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1029,'diJobNumBit5    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1030,'diJobNumBit6    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1031,'diJobNumBit7    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1032,'diJobNumBit8    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1033,'diJobNumBit9    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1034,'diJobNumBit10   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1035,'diJobNumBit11   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1036,'diJobNumBit12   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1037,'diJobNumBit13   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1038,'diJobNumBit14   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1039,'diJobNumBit15   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1040,'diJobNumBit16   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1041,'diDeviceReady   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1042,'diPumpActive    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1043,'diPilotActive   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1044,'diMainAMPActive ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1045,'diMainAMP_SlpAct',  gm_status)
  SET_PORT_CMT(IO_DIN, 1046,'diWireActive    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1047,'diMotor1Active  ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1048,'diMotor2Active  ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1049,'diMotor3Active  ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1050,'diGasXActive    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1051,'diPlasmaGas_Act ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1052,'diSheildGas1_Act',  gm_status)
  SET_PORT_CMT(IO_DIN, 1053,'diSheildGas2_Act',  gm_status)
  SET_PORT_CMT(IO_DIN, 1054,'diSheildGas3_Act',  gm_status)
  SET_PORT_CMT(IO_DIN, 1055,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1056,'diAlarmActive   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1057,'diCoolerFault   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1058,'diInverterFault ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1059,'diPilotInv_Fault',  gm_status)
  SET_PORT_CMT(IO_DIN, 1060,'diGasesFault    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1061,'diFeederFault   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1062,'diJob_loadFLT   ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1063,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1064,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1065,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1066,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1067,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1068,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1069,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1070,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1071,'diGeneralFault  ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1072,'diSystemComm    ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1073,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1074,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1075,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1076,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1077,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1078,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1079,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1080,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1081,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1082,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1083,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1084,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1085,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1086,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1087,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DIN, 1088,'(Reserved)      ',  gm_status)
  
	--Spot Plasma Outputs
  SET_PORT_CMT(IO_DOUT, 1025,'doJobNumBit1    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1026,'doJobNumBit2    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1027,'doJobNumBit3    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1028,'doJobNumBit4    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1029,'doJobNumBit5    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1030,'doJobNumBit6    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1031,'doJobNumBit7    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1032,'doJobNumBit8    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1033,'doJobNumBit9    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1034,'doJobNumBit10   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1035,'doJobNumBit11   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1036,'doJobNumBit12   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1037,'doJobNumBit13   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1038,'doJobNumBit14   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1039,'doJobNumBit15   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1040,'doJobNumBit16   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1041,'doPumpOn        ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1042,'doPilotON       ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1043,'doPilotPulseON  ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1044,'doPilotBlowOutON',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1045,'doPilotDurWeldON',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1046,'doWeldEnable    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1047,'doPulsingON     ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1048,'doHFIgnitionON  ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1049,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1050,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1051,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1052,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1053,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1054,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1055,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1056,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1057,'doWirePreSelctON',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1058,'doWireFWD_ON    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1059,'doWireREV_ON    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1060,'doReverseFCTN   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1061,'doMtr1AutoON    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1062,'doMtr1ManON     ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1063,'doMtr2AutoON    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1064,'doMtr2ManON     ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1065,'doMtr3AutoON    ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1066,'doMtr3ManON     ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1067,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1068,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1069,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1070,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1071,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1072,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1073,'doALLGasON      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1074,'doPlasmaGasON   ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1075,'doShieldGas1ON  ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1076,'doShieldGas2ON  ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1077,'doShieldGas3ON  ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1078,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1079,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1080,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1081,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1082,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1083,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1084,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1085,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1086,'(Reserved)      ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1087,'doQuittFaultON  ',  gm_status)
  SET_PORT_CMT(IO_DOUT, 1088,'doAliveBit      ',  gm_status)
  
  --Group Input  
  SET_PORT_CMT(IO_GPIN,29, 'giJobNumber     ', gm_status)
  
  --Group Output  
  SET_PORT_CMT(IO_GPOUT,29, 'goJobNumber     ', gm_status)
  
  IF (SBICommType = Ethernet) THEN
    SBI_EIP(SBI_1_Slot, 'SBI Plasma','192.168.1.10')
  ENDIF
  
END set_io
-----------------------------------------------------------------------------
ROUTINE set_pg
-- PURPOSE: to load all programs used in process
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --Load TP programs for stand-alone config V8.33P06
  Load_File('FRS:','sbi_clutch.tp',1)
  SPRUNCfile('FRS:sbi_feedr_fwd.tp', 'FR:\sbi_feeder_fwd.tp')  
  Load_File('FR:','sbi_feeder_fwd.tp',1)
  SPRUNCfile('FRS:sbi_feedr_rwd.tp', 'FR:\sbi_feeder_rwd.tp')  
  Load_File('FR:','sbi_feeder_rwd.tp',1)   
  Load_File('FRS:','sbi_gas1_off.tp',1)
  Load_File('FRS:','sbi_gas1_on.tp',1)
  Load_File('FRS:','sbi_mode.tp',1) 
  Load_File('FRS:','sbi_off.tp',1)  
  Load_File('FRS:','sbi_on.tp',1)
  Load_File('FRS:','sbi_style27.tp',1)  
  Load_File('FRS:','sbi_stylexxx.tp',1)
  Load_File('FRS:','sbi_sxxprocx.tp',1) 
  SPRUNCfile('FRS:sbi_u1wir_fwd.tp', 'FR:\sbi_u1_wire_fwd.tp')  
  Load_File('FR:','sbi_u1_wire_fwd.tp',1)
  SPRUNCfile('FRS:sbi_u2wir_rwd.tp', 'FR:\sbi_u2_wire_rwd.tp')   
  Load_File('FR:','sbi_u2_wire_rwd.tp',1)
  Load_File('FRS:','sbi_weld.tp',1)

  --Macro Table entries
  -- INPUT: P_Mac_Number
  --        P_MacName
  --        P_ProgName
  --        P_Assign_type values are: 1=nothing,2= UK, 3=SU,4=MF,5=SP,6=DI,7=RI
  --        P_Assign_id
  --        Protect it :Boolean
 
  prog_nam = 'SBI_U1_WIRE_FWD'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_U1WIR_FWD.TP',1)
  Setup_Macro(1, 'SBI_U1_WIRE_FWD', 'SBI_U1_WIRE_FWD',3,1, FALSE)  
  
  prog_nam = 'SBI_U1_WIRE_RWD'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_U2WIR_RWD.TP',1)
  Setup_Macro(2, 'SBI_U2_WIRE_RWD', 'SBI_U2_WIRE_RWD',3,2, FALSE)
  
  prog_nam = 'SHUTDOWN SBI'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_OFF.TP',1)
  Setup_Macro(3, 'SHUTDOWN SBI', 'SBI_OFF',6,67, FALSE) 
  
  prog_nam = 'SBI_GAS1_ON'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_GAS1_ON.TP',1)
  Setup_Macro(4, 'SBI_GAS1_ON', 'SBI_GAS1_ON',4,3, FALSE) 
  
  prog_nam = 'SBI_GAS1_OFF'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_GAS1_OFF.TP',1)
  Setup_Macro(5, 'SBI_GAS1_OFF', 'SBI_GAS1_OFF',4,4, FALSE) 
  
  prog_nam = 'SBI SHUTDOWN'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_OFF.TP',1)
  Setup_Macro(6, 'SBI SHUTDOWN', 'SBI_OFF',4,5, FALSE) 

  prog_nam = 'SBI_FEED_FWD'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_FEEDR_FWD.TP',1)
  Setup_Macro(7, 'SBI FEED FWD', 'SBI_FEEDER_FWD',4,7, FALSE) 
  
  prog_nam = 'SBI_FEEDER_RWD'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_FEEDR_RWD.TP',1)
  Setup_Macro(8, 'SBI_FEEDER_RWD', 'SBI_FEEDER_RWD',4,8, FALSE) 
  
  prog_nam = 'MOVE TO HOME'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','MOV_HOME.TP',1)
  Setup_Macro(9, 'MOVE TO HOME', 'MOV_HOME',4,1, FALSE) 
  
  prog_nam = 'HOME I/O'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','HOME_IO.TP',1)
  Setup_Macro(10, 'HOME I/O', 'HOME_IO',0,0, FALSE) 
  
  prog_nam = 'RMT START SBI'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_ON.TP',1)
  Setup_Macro(11, 'RMT START SBI', 'SBI_ON',6,68, FALSE)
  
  prog_nam = 'SBI RMT START'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SBI_ON.TP',1)
  Setup_Macro(12, 'SBI RMT START', 'SBI_ON',4,9, FALSE) 

END set_pg
-----------------------------------------------------------------------------
ROUTINE set_rg
-- PURPOSE: to comment numeric/position registers used in process.
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

	--data registers
  Comment_Reg(1,480,'Gun1 Weld Count ')
  SET_INT_REG(480,1,gm_status)
  Comment_Reg(1,481,'SBI ClutchEnable')
  SET_INT_REG(481,1,gm_status)
  Comment_Reg(1,482,'Gun1 Tip Change ')
  SET_INT_REG(482,12000,gm_status)
  Comment_Reg(1,483,'Gun1 Tip Maint  ')
  SET_INT_REG(483,10000,gm_status)

END set_rg
-----------------------------------------------------------------------------
ROUTINE set_sptplsm
-- PURPOSE: setup spot plasma application
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  Current_Ver = Version -- Set the version for reference

  WriteLog('  Starting the spot plasma program GMSPTPLSM', FALSE)

  init_sptpslm
  
  --SETUP ROUTINES
  set_vr  -- setup all variables used in process.
  set_io  -- setup, comment and configure all io for process.
  set_pg  -- load programs used in process.
  set_rg  -- comment numeric registers and position registers used in process.
  
  WriteLog('  Spot Plasma setup completed', FALSE)

  WriteLog('', FALSE)

END set_sptplsm
-----------------------------------------------------------------------------
BEGIN

END gmsptplsm





