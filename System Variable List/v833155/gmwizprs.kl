--
--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--    +
--    Program: GMwizPrs
--
--    Description:
--
--    SWWIZPRS configure the robot and loads a specific I/O file based
--    on answers to questions asked by the robot controller to the robot user.
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
--      Press_select -- Questions for Press Applications only
-------------------------------------------------------------------------------------------------------------
--
--    Language: KAREL
--
--    Source File: GMwizPrs.kl
--
--    Author:
--            Fanuc Robotics North America
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--           01/12/16  KosaskiR Change I/O to reflect new G4 Standard
-------------------------------------------------------------------------------------------------------------
PROGRAM GMWIZPRS
-------------------------------------------------------------------------------------------------------------
-- Softpart built-ins
%ALPHABETIZE

%NOLOCKGROUP
%INVISIBLE
%NOPAUSE = ERROR + COMMAND + TPENABLE

%RWACCESS
%COMMENT='GM Press G4.0'

%INCLUDE gmevrlng -- Required for the language constants
%INCLUDE KLEVCCDF -- required for the TPERROR builtin


CONST

Version = '2016-04-15'

%INCLUDE GMCNSTNT -- all GM global variable constant declarations

VAR

  proces_name   IN SHADOW FROM GMVARS :ARRAY[5] OF STRING[8]
  process_def   IN SHADOW FROM GMVARS :ARRAY[5] OF STRING[10]

  num_proc     IN SHADOW FROM GMWIZCEL: INTEGER      --Number of processes

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine

  ans,i        : INTEGER
  gm_status    : INTEGER
  psve         : INTEGER
  l_response   : INTEGER

    -- Press application will also share the MH, Tool Changer, and Vision Variables
  MaxNumStnds  IN SHADOW : INTEGER -- Maximum number of stands based on stand types

%INCLUDE GMCFGCEL -- used for the cell vars
%INCLUDE GMCFGPRS -- Used for the press vars
%INCLUDE GMCFGMH  -- Used for the MH variables
%INCLUDE GMCFGTLC -- Used for the Tool Changer variables
%INCLUDE GMCFGVIS -- Used for the vision errors
%INCLUDE GMCFGERR -- used for the configuration error counting and handling

%INCLUDE klrdutil -- needed for the Clr_Stnd_Scr routine and other karel declaration routines
%INCLUDE gmrdutil -- Required for the many GM builting created and used throughout wizard(s)

ROUTINE mh_app_wiz  FROM GMWIZMH  -- the wizard that will ask tooling gripper questions at bottom of Pres_app_wiz Routine
ROUTINE Vis_app_wiz FROM GMWIZVIS -- the wizard that will ask vision setup questions at bottom of Pres_app_wiz Routine

ROUTINE USERPAGE FROM USERPAGE  -- forces user screen to pendant
 -----------------------------------------------------------------------------
ROUTINE Chk_PS_Init
-- PURPOSE: to ensure all variable for this program is initialized so it can run
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(EOATCommType) THEN --set hook for multiple communications
    EOATCommType = Ethernet -- set it to 89
  ENDIF

  IF UNINIT(Reset_Cell) THEN -- this should always be set in the main wizard
    Reset_Cell = TRUE        -- but if ran stand alone it is needed here
  ENDIF

  IF UNINIT(DisplayDely) THEN
    DisplayDely = 1000
  ENDIF

  IF UNINIT(MaxNumStnds) OR (Reset_Cell) THEN
    MaxNumStnds = 6
  ENDIF

  IF UNINIT(PrsMcrsLoded) OR (Reset_Cell) THEN
    PrsMcrsLoded = FALSE -- indicates press macro have already been loaded
  ENDIF

  IF UNINIT(UseToolChngr) THEN
    UseToolChngr = TRUE    --   Setting to true indicates auto tool changer
  ENDIF

  num_proc = 1    -- Single Process

  process_def[1] = 'None'
  process_def[2] = 'None'
  -- Define process name on Softpanel menu
  proces_name[1] = '(NONE-MH)'
  proces_name[2] = '(NONE-MH)'

  Use_Press = TRUE

  --Init Press Vars
 -- plc_control  = FALSE   -- need to know what is this

  -- Reset ALL the application bits to ensure we are MH
  Set_B_sVar('$ap_selap[2]',FALSE) -- Spot Application
  Set_B_sVar('$ap_selap[6]',FALSE) -- Dispense Application
  Set_B_sVar('$ap_selap[4]',TRUE)  -- Material Handling Application

  Set_I_sVar('$style_count',255)
  Set_B_sVar('$GROUP[1].$USE_TURNS',FALSE)-- required for Rack Searching

  IF UNINIT(PresLineType) OR (Reset_Cell) THEN -- the press line type
    PresLineType = 1
  ENDIF

  IF UNINIT(PresTLCHType) THEN   -- the toool changer type
    PresTLCHType = PresManlTLCH  -- Manual is 1 Auto is 2
  ENDIF

    IF UNINIT(Press_Status.Cnfg_Is_Done) OR (Reset_Cell) THEN
      Press_Status.Cnfg_Is_Done  = FALSE
    ENDIF
    IF UNINIT(Press_Status.Cnfg_Status) OR (Reset_Cell) THEN
      Press_Status.Cnfg_Status  = 0
    ENDIF
    IF UNINIT(Press_Status.DsplyIs_Done) OR (Reset_Cell) THEN
      Press_Status.DsplyIs_Done = FALSE
    ENDIF
    IF UNINIT(Press_Status.Dsply_Status) THEN
      Press_Status.Dsply_Status = 0
    ENDIF
    IF UNINIT(Press_Status.SetupIs_Done) THEN
      Press_Status.SetupIs_Done = FALSE
    ENDIF
    IF UNINIT(Press_Status.Setup_Status) THEN
      Press_Status.Setup_Status = 0
    ENDIF

END Chk_Ps_Init
------------------------------------------------------------------
ROUTINE Pres_app_wiz
-------------------------------------------------------------------
-------------------------------------------------------------------
BEGIN

 Chk_Ps_Init -- check variables to be used are set

-- Select Press Application

   REPEAT
     CLR_STND_SCR(gm_status)
     WRITE (CR,mfq1_gmdata,'?',CR,CR) -- Select Metal Forming Application
     WRITE ('1.',mfq2_gmdata ,CR)     -- Tandem Press Line'
     WRITE ('2.',mfq3_gmdata ,CR)     -- Robotic Destacking'
     WRITE ('3.',mfq4_gmdata ,CR)     -- EOL Transfer Press Line'
     WRITE ('4.',mfq5_gmdata ,CR,CR)  -- Robotic Racking'
     WRITE(gdata_ans,':  ')           -- Answer
     READ (Ans)
   UNTIL Verify_Answr(Ans,1,4)
   PresLineType = Ans -- Set the Press Line Type

    -- once user answers 1st question Configuration is no longer done
 Press_Status.Cnfg_Is_Done = FALSE -- set so Wizard knows any previous config has been Changed
                                   -- and until user finishes, they cannot Execute the changes???
 Press_Status.Cnfg_Status = 1  -- user answered first question

-- Select Tool Change Type 1= Manual 2 = Automatic
   REPEAT
     CLR_STND_SCR(gm_status)
     WRITE (CR,mfq6_gmdata,'?',CR,CR) -- Select Tool Change Process
     WRITE ('1.',mfq7_gmdata,CR)      -- Manual Tool Change
     WRITE ('2.',mfq8_gmdata,CR,CR)   -- Automatic Tool Change
     WRITE(gdata_ans,':  ')           -- Answer
     READ (Ans)
   UNTIL Verify_Answr(Ans,1,2)
     PresTLCHType = Ans -- Answer verified save it

     Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- user answered another question

    SELECT (PresTLCHType) OF -- Prompt for Tool Type specific answers
      CASE (PresManlTLCH):  --
        UseToolChngr = FALSE -- Set Tool Changer to False its manual

        REPEAT -- Manual Tool Changer Question ONLY
          CLR_STND_SCR(gm_status)
          WRITE (CR,mfq9_gmdata,'?',CR,CR)-- Select Number of Tool Types
          WRITE ('1. (1) Tool Type ',CR)  -- 1. (1) Tool Type
          WRITE ('2. (2) Tool Types',CR)  -- 2. (2) Tool Types
          WRITE ('3. (3) Tool Types',CR)  -- 3. (3) Tool Types
          WRITE ('4. ',mfq10_gmdata,CR,CR)-- 4.     other
          WRITE(gdata_ans,':  ')          -- Answer
          READ (ans)
        UNTIL Verify_Answr(ans,1,4)
          PrsMantc_num = ans -- Answer verified save it

        Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- user answered another question

      CASE (PresAutoTLCH):  -- Automatic Tool Changer
      --   all_types = FALSE
         UseToolChngr = TRUE
         Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- No question was asked but index status

      ELSE: --
        POST_ERR(38000, 'PRESTLCHTYPE='+int2str(PresTLCHType)+' in GMWIZPRS is INVALID', 0, 0) --
    ENDSELECT --

  --Auto Tool Changer Nest Questions
    REPEAT
      CLR_STND_SCR(gm_status)
      WRITE (CR,mfq11_gmdata,'?',CR,CR)-- Select Number of Tool Stand Nest Types
      WRITE ('1.',mfq12_gmdata,CR)     -- 2 Nest
      WRITE ('2.',mfq13_gmdata,CR,CR)  -- 4 Nest
      WRITE(gdata_ans,'(2 or 4):  ')   -- Answer (2 or 4):
      READ (ans)
    UNTIL Verify_Answr(Ans,1,2)

    PresTLCHType = Ans -- Set Press Tool Changer type to answer
    Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- user answered another question

    FOR i = 1 TO ARRAY_LEN(ToolStndType) DO -- All stands are the same
      ToolStndType[i] = Ans  --1= 2 or 2 = 4
    ENDFOR --

    -- Need to Setup Max Stands based on answer
    IF ToolStndType[1] = 2 THEN
      IF MaxNumStnds = 4 THEN
        POST_ERR(38000, 'Changed Number Stands to 2 from 4', 0, 0) --
      ENDIF
      MaxNumStnds = 3 -- max 3 doubles for now 3-15-16 code supports 4 dual
    ELSE
      IF MaxNumStnds = 2 THEN
        POST_ERR(38000, 'Changed Number Stands to 4 from 2', 0, 0) --
      ENDIF
      MaxNumStnds = 6
    ENDIF

--**********************************************************************
--- Prompt User for the Number of Tool Stands to be mapped by the robot
--**********************************************************************

 -- Check for Tool Stand Quantity if singles can have 4, otherwise 2 duals
   REPEAT
     CLR_STND_SCR(gm_status)
     WRITE (cr,mfq15_gmdata,CR,CR)          -- Select Number of Tool Stands',CR)
     WRITE(gdata_ans,'(1-',MaxNumStnds,'):')-- 2. No',CR,CR)
     READ (ans)                             -- Answer 1-either 3 or 6 for press: ')
   UNTIL (Verify_Answr(Ans,1,MaxNumStnds))-- Verify Answer

     Num_ToolStnd = Ans
     Press_Status.Cnfg_Status  = Press_Status.Cnfg_Status + 1  -- user answered another question

 -- Need to ensure GMWIZMH is loaded and available for use
    IF (Chk_loaded('gmwizmh')) THEN
      mh_app_wiz -- call MH Wiz to get the common questions answered
    ELSE
      ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
    ENDIF

 -- Need to ensure GMWIZVIS is loaded and available for use
    IF (Chk_loaded('gmwizvis')) THEN
      Vis_app_wiz -- call Vision Wizard to get the common questions answered
    ELSE
      ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
    ENDIF

 -- After user answers all questions, Configuration is done
    Press_Status.Cnfg_Is_Done = TRUE
    Press_Status.Cnfg_Status  = 0 -- set back to zero indicating no problems
    wiz_exec = TRUE -- set Flag

END Pres_app_wiz
-------------------------------------------------------------------
BEGIN

  Pres_app_wiz

  POST_ERR(38000, 'PRES_APP_WIZ ran manually from GMWIZPRS', 0, 0) --

END GMWIZPRS
