-- -----------------------------------------------------------------------
--
--   MODULE:         GMPNTVR.KL
--   TITLE:          GMPNTVR PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Paint Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE        BY               COMMENTS
--         --------   ----------  ---------------  --------------------
--         4.0        2016-10-27  D. Friedeman		Initial Configuration
--         4.01       2017-02-24  D. Friedeman      Modified various settings.
--         4.02       2017-03-08  D. Friedeman      Added vars to start pntutils.
--         4.03       2018_03_13  D. Friedeman      Added vars for V8.33P/05.
--         4.04       2019_08_30  D. Friedeman      Added User Alarms for 
--                                                  Style ID and Tip Check
--         4.04       2019_10_07  marchaka          Zero out prmp_sdout system prompt box output
--
--------------------------------------------------------------------------
PROGRAM GMPNTVR

%COMMENT = 'Paint Vars V4.04'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

CONST
Version = '2019-10-07'
%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  PntVR_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup Mh I/O at least first time
  loop        : INTEGER
  temp_int	  : INTEGER
  entry       : INTEGER
  status      : INTEGER
  
  
-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgpnt  -- Paint configuration settings.

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables
-----------------------------------------------------------------------------
ROUTINE initPNTvars
-- PURPOSE: to initialize registers associated with setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  -- Force PNTUTILS to run at Start-Up.  
  Set_B_PVar('ATCUSTOM' , 'Prgs2RunPS[1].NeedToRun',TRUE)
  Set_B_PVar('ATCUSTOM' , 'Prgs2RunPS[1].NeedForProd',TRUE)
  Set_S_PVar('ATCUSTOM' , 'Prgs2RunPS[1].Prog_Name','pntutils')

  -- Set For PaintShop Error Recovery
  Set_B_PVar('GMCUSTO' , 'GM_MONT_DUR',TRUE)  
  
  -- Safety to prevent setting $PRMPDSPOUT
  Set_I_PVar('GMVARS' , 'PRMP_DOUT',0)   
  Set_I_PVar('GMVARS' , 'PRMP_SDOUT',0)
  
  FOR loop = 1 TO $SCR_GRP[1].$NUM_AXES DO
    $PARAM_GROUP[1].$SV_OFF_TIME[loop] = 30000
    $PARAM_GROUP[1].$SV_OFF_ENB[loop] = TRUE
    IF (loop = 7) THEN -- Extended Axis is installed.
	  GET_VAR(entry,'*SYSTEM*','$CP_T1_MODE.$COMP_SWITCH',temp_int,status)
      temp_int = (temp_int OR 128) -- Fix T1 Rail Jog Speed	
      Set_I_sVar('$CP_T1_MODE.$COMP_SWITCH', temp_int)      
	ENDIF
  ENDFOR	
  
  -- This is required to record large Data Monitor files during production
  --$FILE_MAXSEC = -1000 -- (1000 sectors * 512 bytes = 512,000 bytes
  Set_I_sVar('$FILE_MAXSEC',-4000) -- (4000 sectors * 512 bytes = 2,048,000 bytes
                                   -- This is negative because it is in DRAM
  Set_I_sVar('$FILESETUP.$FILE_TD_SEC', 9000) -- Fix a memory issue with iRVision 3DMV.

  Set_I_sVar('$VISION_CFG.$FLAGS', 8) -- Enable "Allow Snap & Find in AUTO Mode"
  
  Set_B_sVar('$PR_CARTREP', TRUE) -- Fix NOAL Format Issue For Position Registers.

  -- Error Recovery Resume Motion  
  Set_B_sVar('$SLSETUP[1].ENB_AUTOFFST', FALSE) -- Turn the automatic calculation OFF.
  Set_R_sVar('$SLSETUP[1].RSM_OFFSET', 100)     -- Allow the robot to back up a maximum of 100mm.
  Set_I_sVar('$SLSETUP[1].RES_SS_DELAY', 200)   -- Trigger the gun 200ms after the robot starts moving forward.

  -- Ensure that JOB and PROCESS program types are available.
  Set_I_sVar('$JOBPROC_ENB', 1)

  -- Hide external robots in the 4D Graphical display
  Set_I_sVar('$TPGL_CONFIG.$CONTROLMAX', 0)

  
  -- UIF Mods
  Set_B_sVar('$UI_CONFIG.$ENB_TOPMENU', FALSE) -- Hide "Icon" menu on power-up.
  Set_B_sVar('$UI_CONFIG.$READONLY[2]', FALSE) -- Allow remote PC to write to web pages.
  
  -- Set Production Speeds for Job Init & Job Resume
  Set_I_sVar('$ATCELLSETUP.$PRODRUN_SPD', 100)
  Set_I_sVar('$ATCELLSETUP.$PRODRSM_SPD', 100)
  
  -- Stuff for new Error Recovery mechanism
  -- Menus=>Setup=>TYPE=>Error Recovery:
  Set_B_sVar('$SVPRG_ENB', TRUE)   -- Error Recovery Function Enable
  Set_B_sVar('$RSMFST_SV.$FFAST_ENBL', TRUE)  -- Maintenance Program Recovery Enable
  Set_I_sVar('$RSMFST_SV.$FFAST_DO.$PORT_NUM', 0)  -- Maint Prog Status DOUT Index
  Set_I_sVar('$RSMPRG_SV.$RSMPRG_DO.$PORT_NUM', 18) -- Resume Prog Status DOUT Index

  -- Improve EIP communication speed to help gun triggering performance
  Set_B_sVar('$EIP_CFG.$HIGH_SPEED', TRUE)  -- High Speed Comms
  Set_I_sVar('$EIP_SC[4].$TORPI', 4)  -- RPI Setting
  Set_I_sVar('$EIP_SC[4].$OTRPI', 4)  -- RPI Setting
  Set_B_sVar('$EIP_SC[4].$RECONNECT', TRUE)  -- Auto Reconnect  
  Set_I_sVar('$EIP_CONN[4].$ERR_SV', 0)  -- STOP Severity for Comm Faults.
  
  -- Change priority of vision communications to prevent RIPE-018 Errors.
  Set_I_sVar('$CHG_PRI[1].$TASK_ID', 52)
  Set_I_sVar('$CHG_PRI[1].$PRIORITY', 115)
  
  Set_B_sVar('$TCPP_CFG.$WARNING_ENB', FALSE) -- Disable TCPP - 019 nuisance alarms

  -- This avoids SYST-051 'SYTG Overrun' alarms.
  IF (Chk_Feature('J675')) THEN  -- Set this variable if Data Monitor is loaded.
    Set_I_sVar('$TG_MX_SCUS', 750) -- Allow 750 us for gun triggering.
  ENDIF
  
  -- These sysvars enable PLC Error Recovery
  Set_B_sVar('$SLCELLSU[1].SPX_BOOL1', TRUE)
  Set_B_sVar('$SLCELLSU[1].SPX_BOOL2', TRUE)
  
  Set_I_sVar('$SLCELLSU[1].REFPOS_HOME', 1)    -- For automatic reporting of HOME
  Set_I_sVar('$SLCELLSU[1].REFPOS_PURGE', 2)   -- Required for auto dispenser calibration
  Set_B_sVar('$SLCELLSU[1].PULS_CYC_CMP', TRUE)

  -- Unlock HTTP Functions
  FOR loop = 1 TO 8 DO
    Set_I_sVar('$HTTP_AUTH['+int2str(loop)+'].$TYPE', 3) -- Unlock
  ENDFOR	   

  -- User Alarms
  Set_S_sVar('$UALRM_MSG[180]', '3DMV Clear Offset Failed'); Set_I_sVar('$UALRM_SEV[180]', 38) -- Stopall
  Set_S_sVar('$UALRM_MSG[181]', '3DMV Run W/O Offsets');     Set_I_sVar('$UALRM_SEV[181]',  0) -- Warning
  Set_S_sVar('$UALRM_MSG[182]', '3DMV Vision Fault');        Set_I_sVar('$UALRM_SEV[182]', 38) -- Stopall
  Set_S_sVar('$UALRM_MSG[183]', '3DL Remote Offset Timeout');Set_I_sVar('$UALRM_SEV[183]', 38) -- Stopall
  Set_S_sVar('$UALRM_MSG[184]', 'Circulation Reqst Timeout');Set_I_sVar('$UALRM_SEV[184]',  0) -- Warning
  Set_S_sVar('$UALRM_MSG[185]', 'Tip Inspection Failed');    Set_I_sVar('$UALRM_SEV[185]', 38) -- Stopall
  Set_S_sVar('$UALRM_MSG[186]', 'Tip Inspection Disabled');  Set_I_sVar('$UALRM_SEV[186]',  0) -- Warning
  Set_S_sVar('$UALRM_MSG[187]', 'IRVJOBID ModelNum Invalid');Set_I_sVar('$UALRM_SEV[187]',  0) -- Warning  
  
  -- # Vision Registers
  Set_I_sVar('$VISION_CFG.$NUM_VR', 20)

END initPNTvars
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN

Current_Ver = Version -- Set the version for reference

IF UNINIT(ErrsInShop.ErrorsVarbls) THEN
  ErrsInShop.ErrorsVarbls = 0
ENDIF
IF UNINIT(PntVR_Setup) THEN
  PntVR_Setup = FALSE
ENDIF

 StrtinErs = ErrsInShop.ErrorsVarbls -- grab current error count
 ClrUtltyErrs -- Clear all error in utility program to be used when done

 WriteLog('Starting the Paint Variables GMPNTVR', FALSE)

  IF (PntVR_Setup = TRUE) THEN -- setup has already been setup
      WriteLog(' Paint Variables Already Setup', FALSE)
    IF ExecSetupAgn('Paint Vars') THEN -- ask user if they want to setup again
      PntVR_Setup = FALSE
    ELSE
      WriteLog('  Paint Variables already Complete', FALSE)
      WriteLog('GMPNTVR Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

-- Insert routines created call here
initPNTvars

 ErrsInShop.ErrorsVarbls =  ErrsInShop.ErrorsVarbls + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInShop.ErrorsVarbls -StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('Paint Variable Setup GMPNTVR had ' + int2str((ErrsInShop.ErrorsVarbls- StrtinErs))+' while executing', TRUE)
 ELSE
   WriteLog('Paint Variable Setup completed', FALSE)
   PntVR_Setup = TRUE
 ENDIF

 WriteLog('', FALSE)

END GMPNTVR
