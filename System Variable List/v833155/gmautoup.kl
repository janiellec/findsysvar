-----------------------------------------------------------------------
--
--   MODULE:         GMAUTOUP.KL
--   TITLE:          GMAUTOUP PROGRAM
--
--
--   WRITTEN BY:     FANUC
--   REVISION DATE:  2017/03/27
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016

--         DESCRIPTION: Autoupdate Karel file to hanlde all updates.  This program
--                      will execute during controlled start after the backup
--                      restore.  It is executed from autoctrl.com.
--    			Original release was for autoupdate for p02 to p03
--
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--             V4.1   2017/05/04 marchaka         Add UNINIT checks for all variables.
--                                                Added FOR loop functionality for second equipment second gun
--                                                for gun open on fault
--	       V4.1   2017/06/24 marchaka         All updates included in GM v833p04 Software Specification
--                                                - Auto Update functional spec added
--             V4.1   2017/07/03 marchaka         Set R[146]-[147] to 0.15 and 0.25 respecitvely if it is a
-- 						  dispense application.  Add comments for position regisers 60-69 for body shop.
--						  If not press shop and tool change application, clear old tool
-- 						  change web screen settings (status screen). Remove other gun web screens for gun change
--						  applications, clear variables no matter what for spot application, they aren't used
--						  anyways.  Added gm_autouprun variable to be turned to TRUE when gmautoup or gmautocd are executing.
--						  Load rmtstrt2.tp if process 2 is dispense.
--             V4.1   2017/07/24 marchaka         Fix an issue with UseToolChngr variable being read if the wizard has never been run.
--  						  Dispense controller 2 DI[131]-[133] I/O comments added.
--             V4.1   2017/07/19  Kosaski         Added to press routine for updates of Registers amd I/O cmnts
--             V4.2   2017/10/02  Kosaski         Added Rev01 to reflect the change to auto Exit S411
--             V4.2   2018/04/05  marchaka        Add and update new programs for spot applciations.  Map DI[2011] for monitoring SPO[1] for
--                                                external interlock I/O support.  Add gun open on fault setting.  
--						  Add weld schedule 0 alarm to pause severity.  Fix issue where auto update puts tipdress menu back in 
--						  setup menu for electric dressers.
--             V4.2   2018/04/04  schoensm        V8.33P05 updates 
--             V4.2   2018/04/23  marchaka        Add overwrite of exclusion files
--             V4.2   2018/04/30  marchaka        Add gminterpt for prgs2run restart for laser applications
--             V4.2   2018/05/03  marchaka        Remove $slsetup[1].spare_int1 setting as it is no longer required as the corresponding
--                                                product changes were removed per GM's request.  Update dispense I/O comments.  Load td_chk.tp
--             V4.2   2018/05/09  schoensm        Moved R[444] setting for bodyshop to gmautocd because it wasn't getting set in gmautoup on robot.
--             V4.3   2018/09/17  marchaka        Add initialization of new cap change type variable.  Added loading of opengrp2.tp for updates.
--             V4.3   2018/08/03  baker           Added settings for brk_torque and chk_axiz and macrtpdsbex
--             V4.4   2019/07/22  marchaka	  Clear run_fix array.  Added logic to set DCS I/O write protection and
--                                                hiding if using a v833p06 or later DCS I/O connect setup. Limit devices to read only (FSAC).
--                                                Add PMC Internal I/O assignment update.
--             V4.4   2019/08/12  marchaka        Add $spoteqsetup.$endwld4paus setting.  Now being used in v833 product.  Set default for all
--                                                SpotTool+ robots.
--             V4.4   2019/08/13  marchaka	  Add dispense I/O comments and TP programs.
--             V4.4   2019/08/14  marchaka        Check to see if robot has RTU software option (J518), if not, set rtu_grp2(brkcheck) to FALSE.
--             V4.4   2019/08/24  marchaka        Add a call to a routine to set data monitor settings for collaborative robots.  
--						  Add register comments for dispense applciations.  Add register comments for body 
--					          shop for body chassis marriage and double blank sensor.
--             V4.4   2019/09/26  marchaka	  Initialize dispense 1K/2K variable to 0 if it is uninitialized.
--             V4.4   2019/09/08  schoensm        Added brake check settings routine, added feature_srch.tp.
--             V4.4   2019/09/26  marchaka	
--             V4.4   2019/10/03  marchaka	  Add advstd_d.tp and retstd_d.tp
-- 	           V4.4   2019/10/17  marchaka	  Fix data register commetn 267 for dispense applications.  Take FSAC settings for v833p08 release,
--                                                 more items are required for development before we can apply these settings.
--                                                Update td_x_on.tp programs for spot applications.
--                                                 
--
--
--
--             V4.5   2019/10/17  schoensm        Added brake check settings routine, added feature_srch.tp, added rivbgpr1_2.tp.
--             V4.6   2019/11/01  schoensm        FTP changes to disable servers 2-4 and leave only 1 FTP server active.
--             V4.7   2020/02/25  marchaka        Load GM's version of varchg.xml --gmvarchg.xml
--             V4.7   2020/03/18  schoensm        V8.33P09 added brakechk.tp and style25.tp, MH TP updates, TD/CC TP updates V8.33P09 
--                                                moved update_reg to GMAUTOUP2 because of size limitations. Added home_io. Added R521-523
--                                                added tip_rst.tp, Setup style table 28, tdfrcapchng, and tdtocapchng.tp. DI[465]hmi speed
--                                                override request.
--             V4.8   2020/05/07  schoensm        added a var uninit check for swgtcnumguns, UNINIT issue during V8.33P09
--             V4.9   2020/05/13  schoensm        removed all calls to upd_reg moved to gmautocd during V8.33P09
--             V4.99  2020/05/29  schoensm        added part_id.tp and fixed areadata.tp for dispense on last build of V833P09
--             V4.991 2020/10/07  schoensm        V8.33P10 updates.  Process Fault Pulsing, 600 stack size, Enable Pressure Check for ZDT
--						  Moved more routines to GMAUTOUP2.KL due to size, brk_updt, ftp_updt, comm_var.
--						  Remove all SPRUNCMD and replaced with SPRUNCFILE, load combocapchgr.tp.
--             V4.91  2021/01/09                  Removed ZDT pressure checking enable var, moved to gmautocd
----------------------------------------------------------------------------------------------------------
PROGRAM GMAUTOUP

%COMMENT = 'GM AutoUpdt V4.91'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%ENVIRONMENT iosetup -- Need for teh SET_PORT builtins
%ENVIRONMENT proddef --application[8] sysvar
%ENVIRONMENT regope --registers
%ENVIRONMENT tpe --set attr, get attr
%ENVIRONMENT FDEV --delete_file
%ENVIRONMENT HOSTDEF --11-1-2019 FTP server changes schoensm

%INCLUDE kliotyps

%INCLUDE gmcfgspt --GM Spot Application Wizard Variables
%INCLUDE gmcfgdsp --GM Dispense Wizard Variables

CONST

Version = '2021-1-08'
%INCLUDE gmcnstnt -- all GM constants for the wizard

TYPE
  Updates_Reqd FROM GMAUTOUP = STRUCTURE -- Update array of program settings
    update_io   : BOOLEAN -- used to update the I/O program execution
    update_reg  : BOOLEAN -- used to update the Reg program execution
    update_prog : BOOLEAN -- used to update the Program setup program execution
    update_vars : BOOLEAN -- used to update the Variables program execution
ENDSTRUCTURE

VAR
  prog_nam_bg2	: STRING[12]
  int_val				: INTEGER --integer value return for get_attr
  str_val				: STRING[12] --string value return for get_attr
  Prog_nam   		: STRING[16]
  i, l_psve  		: INTEGER
	a							: STRING[4]


  Updt_toPress IN SHADOW FROM GMAUTOUP : Updates_Reqd -- Array for programs to run
  Updt_toPwrtn IN SHADOW FROM GMAUTOUP : Updates_Reqd -- Array for programs to run
  Updt_toBody  IN SHADOW FROM GMAUTOUP : Updates_Reqd -- Array for programs to run
  Updt_toPaint IN SHADOW FROM GMAUTOUP : Updates_Reqd -- Array for programs to run

  gm_status:  INTEGER
  press_area:  BOOLEAN  --press shop
  pwr_area:  BOOLEAN  --powertrain shop
  body_area:  BOOLEAN --bodyshop
  paint_area:  BOOLEAN --paint shop

  run_fix      IN SHADOW FROM RUNFIX   : ARRAY[30] OF STRING[25]

  gm_autouprun  IN SHADOW FROM GMVARS: BOOLEAN --auto update routines are running

  arc_optn      IN SHADOW FROM GMVARS :BOOLEAN  --ArcTool or LR ArcTool loaded

  --Common
  mfg_area     IN SHADOW FROM GMCFGCEL: INTEGER      --Manufacturing area
  got_rtu      IN SHADOW FROM GMCUSTO:  BOOLEAN  --Extended Axis option loaded (J518)
  rtu_grp2     IN SHADOW FROM brkcheck: BOOLEAN  --RTU on group 2


  --Powertrain
  Use_Dispense IN SHADOW FROM GMCFGPWR: BOOLEAN -- Indicated the Dispense application is required

  --Paintshop
  pnt_dsp_used IN SHADOW FROM GMCFGPNT : BOOLEAN

  --Bodyshop
  num_proc     IN SHADOW FROM GMCFGBDY: INTEGER  --Number of processes
  bshop_proc1  IN SHADOW FROM GMCFGBDY: INTEGER  --Bodyshop application process 1
  bshop_proc2  IN SHADOW FROM GMCFGBDY: INTEGER  --Bodyshop application process 2

  --Collaborative
  collab_rbt    IN SHADOW FROM GMVARS :BOOLEAN  --Collaborative robot arm

  --Press
  LPT          IN SHADOW FROM GMCFGPRS : BOOLEAN
  LPT_IIC      IN SHADOW FROM GMCFGPRS : BOOLEAN
  PresLineType IN SHADOW FROM GMCFGPRS : INTEGER
  r2000ic_100p IN SHADOW FROM GMCUSTO  : BOOLEAN

  --MH
  EOATUseAnlog IN SHADOW FROM GMCFGMH  : BOOLEAN -- Use analog Input for gripper sensor
  use_vacuum   IN SHADOW FROM GMCFGMH  : BOOLEAN -- Use vacuum V8.33P09
  USE_MH_TOOL  IN SHADOW FROM GMCFGMH  : BOOLEAN -- Use MH V8.33P09 
  
  --Tool Change
  UseToolChngr IN SHADOW FROM gmcfgtlc : BOOLEAN -- If Tool Changer on Tool

  --Vision
  Use_Vision   IN SHADOW FROM GMCFGVIS : BOOLEAN -- If a cell Has vision
  VisSys_Type  IN SHADOW FROM GMCFGVIS : INTEGER  -- Vision system type
  Use_Spin_Top IN SHADOW FROM GMCFGVIS : BOOLEAN -- If a cell Has Spin top for Vision

  --Spot App
  di_clsgun1mc  IN SHADOW FROM GMVARS: INTEGER  --Close Gun Process 1 Macro Input
  di_clsgun2mc  IN SHADOW FROM GMVARS: INTEGER  --Close Gun Process 2 Macro Input
  di_gunopnflt  IN SHADOW FROM GMVARS: INTEGER    --Gun Open on Fault
  di_opngun1mc  IN SHADOW FROM GMVARS: INTEGER  --Open Gun Process 1 Macro Input
  di_opngun2mc  IN SHADOW FROM GMVARS: INTEGER  --Open Gun Process 2 Macro Input
  do_gunopnflt  IN SHADOW FROM GMVARS: INTEGER    --Gun Open on Fault
  num_tipdrs   IN SHADOW FROM GMCUSTO: INTEGER
  swgtc_tipdrs IN SHADOW FROM GMCUSTO: INTEGER  --stored value of number of tipdrssers

  g_servog_opt IN SHADOW FROM GMVARS   : BOOLEAN     -- Servo gun option loaded
  srvo_td_opt  IN SHADOW FROM GMCUSTO  : BOOLEAN --servo tip dresser option loaded on the robot

  --Projection Weld App
  numprojctrl    IN SHADOW FROM GMCFGPJW : INTEGER --Number of projection weld controllers

  --Stud App
  numstudctrl   IN SHADOW FROM GMCFGSTD: INTEGER  --Number of Stud controllers
  stud1_app     IN SHADOW FROM GMCFGSTD: INTEGER  --Stud controller 1 application

  --SPR App
  numsprctrl   IN SHADOW FROM GMCFGSPR: INTEGER   --Number of controllers

  --FDS App
  numfdsctrl   IN SHADOW FROM GMCFGFDS: INTEGER   --Number of controllers

  --Laser
  laser_app    IN SHADOW FROM GMCFGLAS: INTEGER   --laser application

%INCLUDE klrdutil
%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables

ROUTINE arc_loaded FROM gmmain1 --ArcTool option
ROUTINE load_pmc FROM gmpmc --Load PMC
ROUTINE setpmcintio FROM gmpmc --Set PMC internal I/O assignment
ROUTINE arcpmcinitio FROM gmpmc --Set Arc specific PMC internal I/O assignment
ROUTINE load_arc_pmc FROM gmpmc --Load ArcTool PMC
ROUTINE setpg_visatr(p_program: String;p_prg_atr:INTEGER) FROM swshell3 --make program invisible or visible
ROUTINE srvotd_optn FROM gmwizspt

ROUTINE GMPRESIO FROM GMPRESIO
ROUTINE GMPRESPG FROM GMPRESPG
ROUTINE GMPRESRG FROM GMPRESRG
ROUTINE GMPRESVR FROM GMPRESVR

ROUTINE GMPT_IO  FROM GMPT_IO
ROUTINE GMPTPRGS FROM GMPTPRGS
ROUTINE GMPTREGS FROM GMPTREGS
ROUTINE GMPTVARS FROM GMPTVARS

ROUTINE dcsio_prot FROM gmdcsprot  --enable/disable dcs I/O write protection
ROUTINE collab_arm FROM gmmain1 --check if collaborative robot arm
ROUTINE a_collab_arm FROM gmamain --check if collaborative robot arm --ArcTool
ROUTINE colbrbt_updt FROM gmautoup2 --collaborative robot updates
ROUTINE brk_updt FROM gmautoup2 --brake check setting updates
ROUTINE ftp_updt FROM gmautoup2 --ftp setting updates
ROUTINE comm_var FROM gmautoup2 --common variable updates
-----------------------------------------------------------------------------
ROUTINE init_updt
-- PURPOSE: Initialize settings for auto update
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
l_psve:  INTEGER
x:  INTEGER
a:  STRING[3]
temp_str:  STRING[25]

BEGIN

  IF UNINIT(arc_optn) THEN --ArcTool
    arc_loaded
  ENDIF

  IF (arc_optn = FALSE) THEN --SpotTool+
    --SpotTool+
    IF UNINIT(mfg_area) THEN
      mfg_area = 0
    ENDIF

    IF (mfg_area <> mfg_area_ps) THEN  --check if press shop
      press_area = FALSE
    ELSE --press shop
      press_area = TRUE
    ENDIF

    IF (mfg_area <> mfg_area_pt) THEN  --check if powertrain shop
      pwr_area = FALSE
    ELSE --powertrain shop
      pwr_area = TRUE
    ENDIF

    IF (mfg_area <> mfg_area_bs) THEN  --check if bodyshop
      body_area = FALSE
    ELSE --bodyshop
      body_area = TRUE
    ENDIF

    IF (mfg_area <> mfg_area_pn) THEN --check if paint shop
      paint_area = FALSE
    ELSE --paint shop
      paint_area = TRUE
    ENDIF

    IF UNINIT(srvo_td_opt) THEN
      srvotd_optn  --servo tip dress option loaded
    ENDIF

    IF UNINIT(dispapp[1].ispare1) THEN
      dispapp[1].ispare1   = 0            --dispense 1K = 1 2K = 2
    ENDIF

    IF UNINIT(dispapp[2].ispare1) THEN
      dispapp[2].ispare1   = 0            --dispense 1K = 1 2K = 2
    ENDIF

  ELSE -- ArcTool
   press_area = FALSE  --no shops in Arc, therefore FALSE
   pwr_area = FALSE --no shops in Arc, therefore FALSE
   body_area = FALSE --no shops in Arc, therefore FALSE
   paint_area = FALSE --no shops in Arc, therefore FALSE
  ENDIF --Arc or Spot

  --Always clear run_fix array on an auto update
  GET_VAR(l_psve, 'runfix', 'run_fix[1]', temp_str, gm_status)  --check to see if array exists
  IF (gm_status = 0) THEN --variable structure exists
    FOR x = 1 TO 30 DO 
      a = int_to_strg(x)
      Set_S_PVar('runfix', 'run_fix[' + a + ']', '   ')
    ENDFOR
  ENDIF

  --Check if RTU is installed
  IF UNINIT(got_rtu) THEN
    IF Chk_Feature('J518') THEN -- is the extended axis option loaded
      got_rtu = TRUE  
    ELSE
      got_rtu = FALSE 
    ENDIF
  ENDIF 

  IF (arc_optn = FALSE) THEN --SpotTool+
    IF UNINIT(collab_rbt) THEN --check if the robot model is collaborative
      collab_arm
    ENDIF 
  ELSE --ArcTool
    IF UNINIT(collab_rbt) THEN --check if the robot model is collaborative
      a_collab_arm
    ENDIF
  ENDIF --SpotTool+ or ArcTool  

END init_updt
-----------------------------------------------------------------------------
ROUTINE spotwld_updt
-- PURPOSE: Update Spot App Settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
eq_num: STRING[2]
gun_num: STRING[2]
tip_dress:  BOOLEAN
srvotipdrs: BOOLEAN
numswgguns : INTEGER
guns_group2: INTEGER
guns_group3: INTEGER
l_gun:  INTEGER
l_psve:  INTEGER

BEGIN

  IF UNINIT(num_tipdrs) THEN  --num_tipdrs only gets set in srvo_tc
    num_tipdrs = 0
  ENDIF

  IF UNINIT(cap_chngtype) THEN --cap changer type, new for v833p06
    cap_chngtype = 0
  ENDIF
  
  IF UNINIT(swgtcnumguns) THEN --number of TC guns, UNINIT issue during V8.33P09
    swgtcnumguns = 0
  ENDIF

  --Clear old gun web screens
  Set_S_sVar('$CUSTOMMENU[27].$TITLE', '')
  Set_S_sVar('$CUSTOMMENU[27].$PROG_NAME', '')
  Set_S_sVar('$CUSTOMMENU[28].$TITLE', '')
  Set_S_sVar('$CUSTOMMENU[28].$PROG_NAME', '')
  Set_S_sVar('$CUSTOMMENU[29].$TITLE', '')
  Set_S_sVar('$CUSTOMMENU[29].$PROG_NAME', '')

  --Update I/O comments
  IF (numwldctrl <> 0) THEN --update process 1 spot I/O
    SET_PORT_CMT(IO_DIN,81, 'CC Bypassed',  gm_status)
    SET_PORT_CMT(IO_DIN,82, 'diP1SkipTD', gm_status)
    SET_PORT_CMT(IO_DIN,83, 'diP1SkipDVG',  gm_status)
    SET_PORT_CMT(IO_DIN,106, 'diP1CloseGunReq', gm_status)
    SET_PORT_CMT(IO_DIN,107, 'diP1OpenGunReq', gm_status)
    SET_PORT_CMT(IO_DOUT,106,'doP1GunClosed',   gm_status)
    SET_PORT_CMT(IO_DOUT,107,'doP1GunOpenAck',   gm_status)
  ENDIF --update process 1 spot I/O
  IF (numwldctrl = 2) THEN --update process 2 spot I/O
    SET_PORT_CMT(IO_DIN,146, 'diP2SkipTD',  gm_status)
    SET_PORT_CMT(IO_DIN,147, 'diP2SkipDVG',  gm_status)
    SET_PORT_CMT(IO_DIN,170, 'diP2CloseGunReq', gm_status)
    SET_PORT_CMT(IO_DIN,171, 'diP2OpenGunReq', gm_status)
    SET_PORT_CMT(IO_DOUT,170,'doP2GunClosed',   gm_status)
    SET_PORT_CMT(IO_DOUT,171,'doP2GunOpenAck',   gm_status)
  ENDIF --update process 2 spot I/O

  --Update variable settings  
  IF (numwldctrl >= 1) THEN
    Set_I_sVar('$spotweldio[1].$eow_type', 3)  --set eow type to weld in process and complete
  ENDIF
  IF (numwldctrl = 2) THEN
    Set_I_sVar('$spotweldio[2].$eow_type', 3)  --set eow type to weld in process and complete
  ENDIF

  --update programs
  Load_File('FRS:','dvgchke1.tp',1)
  Load_File('FRS:','notiprst.tp', 1)
  Load_File('FRS:','dvgchke2.tp', 1) 
  Load_File('FRS:','tipdress1.tp', 1)  
  Load_File('FRS:','cap_selc.tp', 1) 
  Load_File('FRS:','rst_stp.tp', 1)
  Load_File('FRS:','tip_rst.tp',1)    

  --clear v833p02 tip dress web screen settings, replaced with new common tip dress webscreen
  Set_S_sVar('$TX_SCREEN[4].$DESTINATION', '')
  Set_S_sVar('$TX_SCREEN[4].$SCREEN_NAME', '')
  Set_S_sVar('$UI_CONFIG.$MENU_FAVS[5]', '')
  Set_S_sVar('$TX_SCREEN[7].$DESTINATION', '')
  Set_S_sVar('$TX_SCREEN[7].$SCREEN_NAME', '')
  Set_S_sVar('$UI_CONFIG.$MENU_FAVS[8]', '')

  Set_I_sVar('$spots0alarm', 2) --set weld schedule 0 alarm to pause severity

  IF (g_servog_opt = TRUE) THEN --servo gun option loaded

    --Determine how many servo guns are installed
    numswgguns = 0
    guns_group2 = 0
    guns_group3 = 0
    GET_VAR(l_psve, '*system*', '$scr_grp[2].$num_axes', guns_group2,  gm_status)
    IF (gm_status = 0) THEN --valid read
      numswgguns = guns_group2
    ENDIF
    GET_VAR(l_psve, '*system*', '$scr_grp[3].$num_axes', guns_group3,  gm_status)
    IF (gm_status = 0) THEN --valid read
      numswgguns = numswgguns + guns_group3
    ENDIF

    di_gunopnflt = -33  --Gun Open on Fault
    do_gunopnflt = 33   --Gun Open on Fault

    sp_eqnum = 1       --initialize equipment setup for wizard to equipment 1
    sp_gnnum = 1       --initialize gun setup for wizard questions to gun 1    
    sp_eqgn_num = spttl_eq1gn  --initialize guns per equipment tracker

    FOR sp_eqnum = 1 TO sp_ttl_eq DO
      FOR sp_gnnum = 1 TO sp_eqgn_num DO
        eq_num = int_to_strg(sp_eqnum)
        gun_num = int_to_strg(sp_gnnum)

        Set_I_sVar('$spoteqio[' + eq_num + '].$di_pen_t', 1)
        Set_I_sVar('$spoteqio[' + eq_num + '].$di_pen_i', di_gunopnflt)
        Set_I_sVar('$spoteqio[' + eq_num + '].$di_nse_t', 1)
        Set_I_sVar('$spoteqio[' + eq_num + '].$di_nse_i', di_gunopnflt)
        Set_I_sVar('$spoteqio[' + eq_num + '].$do_penwt_t', 2)
        Set_I_sVar('$spoteqio[' + eq_num + '].$do_penwt_i', do_gunopnflt)
        Set_I_sVar('$spoteqio[' + eq_num + '].$do_nse_t', 2)
        Set_I_sVar('$spoteqio[' + eq_num + '].$do_nse_i', do_gunopnflt)

      ENDFOR
      IF (spttl_eq2gn = 2) THEN --reinitialize variables for equipment 2 gun setup
        sp_eqgn_num = sp_ttl_gn
      ENDIF
    ENDFOR

    --Gun open on fault
    Set_I_sVar('$sgsyscfg.$comp_switch', 820)
    FOR l_gun = 1 TO numswgguns DO
      gun_num = int_to_strg(l_gun)
      Set_I_sVar('$sgcfg[' + gun_num + '].$tryout_msk', 6)
    ENDFOR
    
    --Update macro table
    di_clsgun1mc = 106        --Close Gun Process 1 Macro Input
    di_opngun1mc = 107        --Open Gun Process 1 Macro Input
    Setup_Macro(1, 'CLSGUNP1', 'CLSGUNP1', 6, di_clsgun1mc, FALSE)
    Setup_Macro(2, 'OPENGUNP1', 'OPENGUNP1', 6, di_opngun1mc, FALSE)

    IF (bshop_proc2 = spotappl) THEN --process 2 is a spot weld app
      di_clsgun2mc = 170        --Close Gun Process 2 Macro Input
      di_opngun2mc = 171        --Open Gun Process 2 Macro Input
      Setup_Macro(3, 'CLSGUNP2', 'CLSGUNP2', 6, di_clsgun2mc, FALSE)
      Setup_Macro(4, 'OPENGUNP2', 'OPENGUNP2', 6, di_opngun2mc, FALSE)
    ENDIF --process 2 is a spot weld app

    --Load SWG Programs
    SPRUNCfile('FRS:GM_TW_PRS01.TP', 'FR:\TW_PRS01.TP')
    Load_File('FR:', 'tw_prs01.tp',1)
    setpg_visatr('tw_prs01',1)  --make the program visible
    Load_File('FRS:', 'opengunp1.tp', 1)
    Load_File('FRS:', 'clsgrp2.tp', 1)
    Load_File('FRS:', 'clsgrp3.tp', 1)
    Load_File('FRS:', 'clsgunp1.tp', 1)
    Load_File('FRS:', 'clsguns.tp', 1)
    SPRUNCfile('FRS:RST_WTR1.TP', 'FR:\RST_WTR.TP')
    Load_File('FR:','RST_WTR.TP',1)
    Load_File('FRS:','OPENGRP2.TP',1)
    Load_File('FRS:','cctiprst.tp',1)
    SPRUNCfile('FRS:PEDSTY30.TP', 'FR:\STYLE30.TP') 
    Load_File('FR:','STYLE30.TP',1)
    --V8.33P10 SMS 9-24-2020
    Load_File('FRS:', 'get_cfg.pc',1) --updated IO settings


    IF (numwldctrl = 2) THEN --Process 2 is a spotwelder
      Load_File('FRS:', 'opengunp2.tp', 1)
      Load_File('FRS:', 'clsgunp2.tp', 1)
    ENDIF

    IF (((numwldctrl = 1) AND ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh))) OR ((numwldctrl = 2) AND (wld2_app = wld2app_cgpg))) THEN 

    ELSE --not carried gun

      SPRUNCfile('FRS:\ADVSTD_D.TP', 'FR:\ADV_TD_D.TP')
      Load_File('FR:','ADV_TD_D.TP',1)

      SPRUNCfile('FRS:\RETSTD_D.TP','FR:\RET_TD_D.TP')   
      Load_File('FR:','RET_TD_D.TP',1) 

    ENDIF  --carried gun

    IF ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh) OR (wld1_app = wld1app_snut) OR (wld2_app = wld2app_cgpg)) THEN --one carried gun
      Load_File('FRS:', 'style28.tp', 1)
      Load_File('FRS:', 'tdfrcapchng.tp', 0)		
      Load_File('FRS:', 'tdtocapchng.tp', 0)
      --V8.33P09 set up style table
      Set_S_sVar('$style_comnt[28]','Auto Cap Changer')
      Set_S_sVar('$style_name[28]', 'STYLE28') 
      Set_B_sVar('$style_enab[28]', TRUE)
    ENDIF --there is one carried application

    IF ((wld1_app = wld1app_cg) AND (UseToolChngr = TRUE)) THEN --carried gun tool changer
      SPRUNCfile('FRS:TCSTY28.TP', 'FR:\STYLE28.TP') 
      Load_File('FR:','STYLE28.TP',1)
      --V833P09 5-13-2020 schoensm
      IF (swgtcnumguns > 0) THEN
        SPRUNCfile ('FRS:tc_tipdrs1.tp', 'FR:\tipdress1.tp')
        Load_File('fr:', 'tipdress1.tp', 1)         
      ENDIF  -- 1 gun
      IF (swgtcnumguns > 1) THEN
        Load_File('frs:', 'tipdress2.tp', 1) 
        Load_File('frs:', 'reschke2.tp', 1)   
      ENDIF  -- 2 guns
      IF (swgtcnumguns > 2) THEN
        Load_File('frs:', 'tipdress3.tp', 1)
      ENDIF  -- 3 guns
      IF (swgtcnumguns > 3) THEN
        Load_File('frs:', 'tipdress4.tp', 1)
      ENDIF  -- 4 guns      
    ELSE
      IF UseToolChngr = FALSE THEN
	LOAD('FRS:tipdress1.tp', 1,gm_status)  		  	
      ENDIF   
    ENDIF --carried gun tool changer
  ENDIF  --servo gun option loaded

  IF (cap_chnger = wizans_yes) THEN
    IF (cap_chngtype <> cap_srvcombo) THEN --not servo cap changer dresser combo
      Load_File('FRS:', 'capoff.tp', 1)
      Load_File('FRS:', 'capon.tp', 1)
      Load_File('FRS:', 'cc_proc1.tp',1)
      Load_File('FRS:', 'cc_frtd1.tp',1)
    ELSE
      Load_File('FRS:', 'combocapchgr.tp',0)
    ENDIF --not servo cap changer dresser combo

    IF (g_servog_opt = TRUE) THEN  --servo gun option 
      IF ((wld1_app = wld1app_cg) AND (UseToolChngr = TRUE)) THEN --carried gun tool changer  
        IF (cap_chngtype <> cap_srvcombo) THEN --not servo cap changer dresser combo
          IF (numswgguns > 1) THEN          
            Load_File('FRS:', 'cc_proc2.tp',1)
            Load_File('FRS:', 'cc_frtd2.tp',1)
          ENDIF
          IF (numswgguns > 2) THEN
            Load_File('FRS:', 'cc_proc3.tp',1)
            Load_File('FRS:', 'cc_frtd3.tp',1)
          ENDIF
          IF (numswgguns > 3) THEN
            Load_File('FRS:', 'cc_proc4.tp',1)
            Load_File('FRS:', 'cc_frtd4.tp',1)
          ENDIF
        ENDIF --not servo cap changer dresser combo
      
      IF (servotipdrs = wizans_no) THEN --electric dresser
        IF (swgtc_tipdrs <> 0) THEN
          SPRUNCfile('FRS:TDG1ON.TP', 'FR:\TD_1_ON.TP')
          Load_File('FR:','TD_1_ON.TP',1)
        ENDIF
        IF (swgtc_tipdrs > 1) THEN
          SPRUNCfile('FRS:TDG2ON.TP', 'FR:\TD_2_ON.TP')
          Load_File('FR:','TD_2_ON.TP',1)  
        ENDIF        
        IF (swgtc_tipdrs > 2) THEN
          SPRUNCfile('FRS:TDG3ON.TP', 'FR:\TD_3_ON.TP')
          Load_File('FR:','TD_3_ON.TP',1)  
        ENDIF
        IF (swgtc_tipdrs > 3) THEN
          SPRUNCfile('FRS:TDG4ON.TP', 'FR:\TD_4_ON.TP')
          Load_File('FR:','TD_4_ON.TP',1)  
        ENDIF  
      ENDIF --electric dresser        

      ENDIF --carried gun tool changer 
    ENDIF--servo gun option

  ENDIF --cap changer

  --Tipdress Updates
  tip_dress = FALSE --reset for autoupdate setup
  srvotipdrs = FALSE --reset for wizard setup
  sp_eqnum = 1       --initialize equipment setup for wizard to equipment 1
  sp_gnnum = 1       --initialize gun setup for wizard questions to gun 1	
  sp_eqgn_num = spttl_eq1gn  --initialize guns per equipment tracker
  FOR sp_eqnum = 1 TO sp_ttl_eq DO
    FOR sp_gnnum = 1 TO sp_eqgn_num DO    
      IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td = wizans_yes) THEN --tipdress
        tip_dress = TRUE
      ENDIF --tip dress  
      IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td = wizans_yes) THEN --servo tip dress
        srvotipdrs = TRUE
      ENDIF --servo tip dress          
    ENDFOR   
    IF (spttl_eq2gn = 2) THEN --reinitialize variables for equipment 2 gun setup
      sp_eqgn_num = sp_ttl_gn
    ENDIF
  ENDFOR

  IF (tip_dress = TRUE) THEN  --tip dress

    IF (((numwldctrl = 1) AND ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh))) OR ((numwldctrl = 2) AND (wld2_app = wld2app_cgpg))) THEN
      IF (UseToolChngr = TRUE) THEN  --carried app + tool changer
      ELSE --no tool changer
	SPRUNCfile('FRS:CARSTY29.TP', 'FR:\STYLE29.TP') 
	Load_File('FR:','STYLE29.TP',1)
      ENDIF --carried app + tool changer
    ELSE --not carried
      SPRUNCfile('FRS:PEDSTY29.TP', 'FR:\STYLE29.TP')
      Load_File('FR:','STYLE29.TP',1)	  	
    ENDIF
	   
    IF (UseToolChngr = TRUE) THEN -- tool changer
      SPRUNCfile('FRS:TCSTY29.TP', 'FR:\STYLE29.TP') 
      Load_File('FR:','STYLE29.TP',1)
    ENDIF -- tool changer    

    IF (srvotipdrs = TRUE) THEN --servo tip dress
      Set_B_sVar('$sgtdcfg.$srvo_tdrs', TRUE)
    ELSE --electric dress
      Set_B_sVar('$sgtdcfg.$srvo_tdrs', FALSE)
    ENDIF --servo tip dress?

    IF (srvo_td_opt = TRUE) THEN  --servo tip dress option
      SPRUNCfile('FRS:GMDRESSERON.TP', 'FR:\DRESSER_ON.TP')
      Load_File('FR:','DRESSER_ON.TP',1)
    ENDIF --servo tip dress option

    IF (srvotipdrs = TRUE) THEN --servo dresser
      SPRUNCfile('FRS:TCSDRESCP.TP', 'FR:\TCDRESCP.TP')
      Load_File('FR:','TCDRESCP.TP',1)
    ENDIF --servo tip dress

    --equipment 1 gun 1 has a tip dresser
    IF (spotapp_eq[1].spotgun[1].sp_td = wizans_yes) THEN --equipment 1, gun 1 has a tip dresser

      Load_File('FRS:', 'Postdres.tp', 1)
      Load_File('FRS:', 'Reschke1.tp', 1)
      Load_File('FRS:','TD_CHK.TP',1)

      IF (((numwldctrl = 1) AND ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh))) OR ((numwldctrl = 2) AND (wld2_app = wld2app_cgpg))) THEN   
        Load_File('FRS:', 'Tdverify.tp', 1)
        IF (UseToolChngr = TRUE) THEN  --carried app + tool changer
          Load_File('FRS:','TCPSTDRS.TP',1) 
        ENDIF --carried app + tool changer
      ENDIF --carried app

      IF (spotapp_eq[1].spotgun[1].sp_srvo_td = wizans_yes) THEN --servo tip dress
        SPRUNCfile('FRS:SDRSCAPS.TP', 'FR:\DRESCAPS.TP')
        Load_File('FR:','DRESCAPS.TP',1)
        SPRUNCfile('FRS:SDRSPDE1.TP', 'FR:\DRESPDE1.TP')
        Load_File('FR:','DRESPDE1.TP',1)
      ELSE
        SPRUNCfile('FRS:TDG1ON.TP', 'FR:\TD_1_ON.TP')
        Load_File('FR:','TD_1_ON.TP',1)
      ENDIF --servo tip dress 
    ENDIF --equipment 1, gun 1 has a tip dresser

    IF ((spotapp_eq[1].spotgun[2].sp_td = wizans_yes) OR (spotapp_eq[2].spotgun[1].sp_td = wizans_yes)) THEN --tip dresser 

       Load_File('FRS:', 'Reschke2.tp', 1)

      IF ((numwldctrl = 2) AND (wld2_app = wld2app_cgpg)) THEN --carried app

        Load_File('FRS:', 'Tdverify.tp', 1)
  
      ENDIF --carried app
     
      IF ((spotapp_eq[1].spotgun[2].sp_srvo_td = wizans_yes) OR (spotapp_eq[2].spotgun[1].sp_srvo_td = wizans_yes)) THEN
        SPRUNCfile('FRS:SDRSCPE2.TP', 'FR:\DRESCPE2.TP')
        Load_File('FR:','DRESCPE2.TP',1) 
        SPRUNCfile('FRS:SDRSPDE2.TP', 'FR:\DRESPDE2.TP')
        Load_File('FR:','DRESPDE2.TP',1)
      ENDIF --servo tip dresser

      SELECT sp_ttl_eq OF --total equipment
        CASE(1): 	  --gun 2 is on equipment 1 
          IF ((spotapp_eq[1].spotgun[2].sp_srvo_td = wizans_no) OR (spotapp_eq[1].spotgun[2].sp_srvo_td = 0)) THEN --eq 1 gun 2 is an eltric dresser
            SPRUNCfile('FRS:TDG2ON.TP', 'FR:\TD_2_ON.TP')
            Load_File('FR:','TD_2_ON.TP',1)
          ENDIF --equipment 1 gun 2 is an electric dresser
        CASE(2):  --gun 2 is equipment2
          IF ((spotapp_eq[2].spotgun[1].sp_srvo_td = wizans_no) OR (spotapp_eq[2].spotgun[1].sp_srvo_td = 0)) THEN --eq 2 gun 1 is an eltric dresser
            SPRUNCfile('FRS:TDG2ON.TP', 'FR:\TD_2_ON.TP')
            Load_File('FR:','TD_2_ON.TP',1)
           ENDIF --equipment 2 gun 1 is an electric dresser
        ELSE:
      ENDSELECT --total equipment

    ENDIF --second tip dresser

    --clear BG before reload
    prog_nam_bg2 = 'td_2_mtr'
    GET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status)  --save time stamp
    Set_S_sVar('$MIX_BG[2].$PROG_NAME', '')
    Set_I_sVar('$MIX_BG[2].$MODE', 2)
    Set_I_sVar('$MIX_BG[2].$STATUS', 1)
    Set_I_sVar('$MIX_BG[2].$MODIFY_TIME', -1)
    CLEAR('td_2_mtr',gm_status)

    SELECT (numwldctrl) OF --number of weld controllers

      CASE(1): --one weld controller

        IF ((srvotipdrs  = FALSE) AND (num_tipdrs > 1)) THEN --load tip dress programs for servo tool changers
          SPRUNCfile('FRS:TD_2_MT.tp','FR:\TD_2_MTR.TP')
          Load_File('FR:','TD_2_MTR.TP',1)
        ENDIF

        SELECT sp_ttl_eq OF --total equipment
          CASE(1): 	  --gun 2 is on equipment 1
            IF (spotapp_eq[1].spotgun[2].sp_td = wizans_yes) THEN
              IF ((spotapp_eq[1].spotgun[2].sp_srvo_td = wizans_no) OR (spotapp_eq[1].spotgun[2].sp_srvo_td = 0)) THEN --eq1 g2 is an eltric dresser

                SPRUNCfile('FRS:TD_2_MT.tp','FR:\TD_2_MTR.TP')

                -- Set Mixed Logic or BG Logic Program
                Load_File('FR:','TD_2_MTR.TP',1)
                SET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status)  --set time stamp to before update
                Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'TD_2_MTR')      
                Set_I_sVar('$MIX_BG[2].$MODE', 2)
                Set_I_sVar('$MIX_BG[2].$STATUS', 2)



              ENDIF --equipment 1 gun 2 is an electric dresser
            ENDIF --equipment 1 gun 2 has a tip dresser

          CASE(2):	  --gun 2 is on equipment 2
            IF (spotapp_eq[2].spotgun[1].sp_td = wizans_yes) THEN
              IF ((spotapp_eq[2].spotgun[1].sp_srvo_td = wizans_no) OR (spotapp_eq[2].spotgun[1].sp_srvo_td = 0)) THEN --eq2 g1 is an etric dresser

                SPRUNCfile('FRS:TD_2_MT.tp','FR:\TD_2_MTR.TP')
                 
                -- Set Mixed Logic or BG Logic Program
                Load_File('FR:','TD_2_MTR.TP',1)
                SET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status)  --set time stamp to before update
                Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'TD_2_MTR')      
                Set_I_sVar('$MIX_BG[2].$MODE', 2)
                Set_I_sVar('$MIX_BG[2].$STATUS', 2)
                
              ENDIF --equipment 2 gun 1 is an electric dresser
            ENDIF --gun 2 is on equipment 2
          
          ELSE:
        ENDSELECT --total equipment

      CASE(2): --two weld controllers

        SELECT sp_ttl_eq OF --total equipment
          CASE(1): 	  --gun 2 is on equipment 1
            IF (spotapp_eq[1].spotgun[2].sp_td = wizans_yes) THEN --equipment 1 gun 2 has a tip dresesr 
              IF ((spotapp_eq[1].spotgun[2].sp_srvo_td = wizans_no) OR (spotapp_eq[1].spotgun[2].sp_srvo_td = 0)) THEN --eq1, g2 is an elect dresser

                SPRUNCfile('FRS:TDGL2MTR.TP','FR:\TD_2_MTR.TP')

                 -- Set Mixed Logic or BG Logic Program
                 Load_File('FR:','TD_2_MTR.TP',1)
                 SET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status)  --set time stamp to before update
                 Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'TD_2_MTR')      
                 Set_I_sVar('$MIX_BG[2].$MODE', 2)
                 Set_I_sVar('$MIX_BG[2].$STATUS', 2)
                
               ENDIF --equipment 1, gun 2 has an electric tip dresser
             ENDIF --equipment 1 gun 2 has a tip dresser

          CASE(2): --two equipment
            IF (spotapp_eq[2].spotgun[1].sp_td = wizans_yes) THEN -- equipment 2, gun 1 has a tip dresser
              IF ((spotapp_eq[2].spotgun[1].sp_srvo_td = wizans_no) OR (spotapp_eq[2].spotgun[1].sp_srvo_td = 0)) THEN --eq2, g1 is an elec dresser

                SPRUNCfile('FRS:TDGL2MTR.TP','FR:\TD_2_MTR.TP')

                 -- Set Mixed Logic or BG Logic Program
                 Load_File('FR:','TD_2_MTR.TP',1)
                 SET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status)  --set time stamp to before update
                 Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'TD_2_MTR')      
                 Set_I_sVar('$MIX_BG[2].$MODE', 2)
                 Set_I_sVar('$MIX_BG[2].$STATUS', 2)
                
              ENDIF --equipment 2, gun 1 has an electrip tip dresser
            ENDIF --equipment 2 gun 1 has a tip dresser

          ELSE:
        ENDSELECT --total equipment

       ELSE:
    ENDSELECT --number of weld controllers
  ENDIF --tip dress
    
  IF (srvotipdrs = FALSE) THEN  --hide tip dress menu for electric dresser, auto update was loading it back
    SPRUNCfile('FRS:sggmdres.as', 'FRSU:sgtpdres.as') 
  ENDIF

END spotwld_updt
-----------------------------------------------------------------------------
ROUTINE proj_updt
-- PURPOSE: Update Projection Weld App Settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (bshop_proc1 = projappl) THEN --process 1 is a projection welder
    Set_I_sVar('$spotweldio[1].$eow_type', 3)  --set eow type to weld in process and complete
  ENDIF

  IF ((bshop_proc1 = spotappl) AND (bshop_proc2 = projappl)) THEN -- combination of a spot + projection weld application
                                                                  -- only time projection welder is process 2
                                                                  -- spot application setup does not account for configuring the number of equipment
		                                                  --  etc. for combos, that is handled in the process 2 configuration of spottool
				                                  --  for the combo.   
    Set_I_sVar('$spotweldio[2].$eow_type', 3)  --set eow type to weld in process and complete
  ENDIF                                                                    

END proj_updt
-----------------------------------------------------------------------------
ROUTINE stud_updt
-- PURPOSE: Update Stud App Settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (bshop_proc1 = studappl) THEN --process 1 is a stud welder
    Set_I_sVar('$spotweldio[1].$eow_type', 3)  --set eow type to weld in process and complete

    IF ((stud1_app = stud_spdg) OR (stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN  --singl ped with dual guns, three ped guns, four ped guns
      Set_I_sVar('$spotweldio[2].$eow_type', 3)  --set eow type to weld in process and complete
    ENDIF

    IF ((stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN  --three ped guns, four ped guns 
      Set_I_sVar('$spotweldio[3].$eow_type', 3)  --set eow type to weld in process and complete
    ENDIF

    IF (stud1_app = stud_4pg) THEN  --four ped guns 	
      Set_I_sVar('$spotweldio[4].$eow_type', 3)  --set eow type to weld in process and complete
    ENDIF

  ENDIF --process 1 is a stud welder

  IF (bshop_proc2 = studappl) THEN -- process 2 is a stud welder
                                   -- bshop_proc1 and bshop_proc2 can never both be stud per G4 specifications
                                   -- process 2 is ever only a stud when it is combined with a spot application
				   -- per G4 specifications
                                   -- spot application setup does not account for configuring the number of equipment
		                   -- etc. for combos, that is handled in the process 2 configuration of spottool
				   -- for the combo. 
    Set_I_sVar('$spotweldio[2].$eow_type', 3)  --set eow type to weld in process and complete

  ENDIF --proces 2 is a stud welder

END stud_updt
-----------------------------------------------------------------------------
ROUTINE spr_updt
-- PURPOSE: Update SPR App Settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --SPR Error Recovery Maint Output
  SET_PORT_ASG(io_dout,2042,0,0,io_mem_boo,2042,-1,gm_status)  
  SET_PORT_CMT(io_dout,2042,'ComboSPR_ErrOutput',gm_status)
	
  -- Set BG Logic programs to nothing
  Set_S_sVar('$MIX_BG[7].$PROG_NAME', '')
  Set_I_sVar('$Mix_BG[7].$STATUS',1)
  Set_S_sVar('$MIX_BG[8].$PROG_NAME', '')
  Set_I_sVar('$Mix_BG[8].$STATUS',1)
  
  Load_File('FRS:','rividchk.tp',1)
  Load_File('FRS:','riv1set.tp',1)
  Load_File('FRS:','riv2set.tp',1)
  Load_File('FRS:','prprcck1.tp',1)
  Load_File('FRS:','prprcck2.tp',1)    
  Load_File('FRS:','spr1hometool.tp',1)
  Load_File('FRS:','spr2hometool.tp',1)
  Load_File('FRS:','spr1calibrate.tp',1)
  Load_File('FRS:','spr2calibrate.tp',1)
  Load_File('FRS:','reenableffr.tp',1)
  Load_File('FRS:','rivbgpr1.tp',1)
  Load_File('FRS:','rivbgpr2.tp',1)
  --V8.33P08 schoensm 10-17-2019
  Load_File('FRS:','rivbgpr1_2.tp',1)
  --V8.33P08 schoensm 9-11-2019
  Load_File('FRS:','riv1chk.tp',1)
  Load_File('FRS:','riv2chk.tp',1)
  Load_File('FRS:','riv1pchk.tp',1)
  Load_File('FRS:','riv2pchk.tp',1)
  
  SPRUNCfile('FRS:\hmiospr.tp', 'FR:\hmiocst.tp')
  Load_File('FR:','hmiocst.tp',1)
  
  IF (bshop_proc1 = sprappl) THEN --process 1 is an SPR application
    SET_PORT_CMT(IO_DIN,75,'diP1OutOfTolAck',gm_status) 
    SET_PORT_CMT(IO_DOUT,78,'doP1RivMonOn',gm_status) 
    SET_PORT_CMT(io_dout,1033,'doHomeTool',gm_status)
    SET_PORT_CMT(io_dout,1034,'doCalibrate',gm_status)

    -- Macros for manual functions page
    Setup_Macro(17, 'SPR1 Home Tool',  'spr1hometool', 4,80,FALSE)
    Setup_Macro(18, 'SPR1 Calibrate',  'spr1calibrate', 4,81,FALSE)
    
    --BG Logic
    Set_S_sVar('$MIX_BG[8].$PROG_NAME', 'rivbgpr1')
    Set_I_sVar('$MIX_BG[8].$MODE',2)
    Set_I_sVar('$Mix_BG[8].$STATUS',2)
    
    --Interconnects
    Set_B_sVar('$thrsditable[52].$thr_enb', TRUE)                         
    Set_I_sVar('$thrsditable[52].$di_no', 1029)		     
    Set_I_sVar('$thrsditable[52].$do_no', 78)
  ENDIF --process 1 is SPR

  IF (bshop_proc2 = sprappl) THEN   --process 2 is an SPR application
    SET_PORT_CMT(IO_DIN,140,'diP2OutOfTolAck',gm_status)   
    SET_PORT_CMT(IO_DOUT,142,'doP2RivMonOn',gm_status) 
    SET_PORT_CMT(io_dout,1161,'doHomeTool',gm_status)
    SET_PORT_CMT(io_dout,1162,'doCalibrate',gm_status)

    -- Macros for manual functions page
    Setup_Macro(19, 'SPR2 Home Tool',  'spr2hometool', 4,82,FALSE)
    Setup_Macro(20, 'SPR2 Calibrate',  'spr2calibrate', 4,83,FALSE)
    
    --Interconnects
    Set_B_sVar('$thrsditable[53].$thr_enb', TRUE)                         
    Set_I_sVar('$thrsditable[53].$di_no', 1157)		     
    Set_I_sVar('$thrsditable[53].$do_no', 142) 
  ENDIF --process 2 is SPR

  IF (bshop_proc1 <> sprappl) AND (bshop_proc2 = sprappl) THEN
    Set_I_sVar('$rsmfst_sv.$ffast_do.$port_num',2042) 
    Load_File('FRS:','Pdstysptspr.tp',1)
    --BG Logic	  
    Set_S_sVar('$MIX_BG[8].$PROG_NAME', 'rivbgpr2')
    Set_I_sVar('$MIX_BG[8].$MODE',2)
    Set_I_sVar('$Mix_BG[8].$STATUS',2)
  ENDIF

  IF (bshop_proc1 = sprappl) AND (bshop_proc2 = sprappl) THEN
    --BG Logic	  
    Set_S_sVar('$MIX_BG[8].$PROG_NAME', 'rivbgpr1_2')
    Set_I_sVar('$MIX_BG[8].$MODE',2)
    Set_I_sVar('$Mix_BG[8].$STATUS',2)    	
  ENDIF

END spr_updt
-----------------------------------------------------------------------------
ROUTINE disp_updt
-- PURPOSE: Update dispense application
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --Set data register values, comments are handled in common area
  SET_REAL_REG(146,   .15           , gm_status) 
  SET_REAL_REG(147,   .25           , gm_status)

  Comment_Reg(1,264,'BG_Prg1 Time')
  Comment_Reg(1,265,'BG_Prg1 Flag')
  Comment_Reg(1,266,'BG_Prg2 Time')
  Comment_Reg(1,267,'BG_Prg2 Flag')

  --V8.33P09 sms 2-24-2020
  Comment_Reg(1,521,'AirNoAirVal     ')
  Set_Reg_Val(521,0)
  Comment_Reg(1,522,'NoAirBubbleValue')
  Set_Reg_Val(522,250)
  Comment_Reg(1,523,'AirBubbleValue  ')
  Set_Reg_Val(523,500)


  IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND ((bshop_proc1 = dispappl) OR (Use_Dispense) OR (pnt_dsp_used)))) THEN --controller 1 update can be executed
    SET_PORT_CMT(IO_DIN, 1042, 'diSL1LowTotVol', gm_status)
    SET_PORT_CMT(IO_DIN, 1043, 'diSL1HighTotVol', gm_status)
    SET_PORT_CMT(IO_DIN, 1047, 'diSL1AirDetected', gm_status)
    SET_PORT_CMT(IO_DIN, 1048, 'diSL1MeterFilling', gm_status)
    SET_PORT_CMT(IO_DIN, 1137, 'diSL1P1B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1138, 'diSL1P1B1Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1139, 'diSL1P1B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1140, 'diSL1P1B2Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1141, 'diSL1P2B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1142, 'diSL1P2B1Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1143, 'diSL1P2B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1144, 'diSL1P2B2Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1145, 'diSL1AutoMode', gm_status)
    SET_PORT_CMT(IO_DIN, 1146, 'diSL1EqCtrlStop', gm_status)
    SET_PORT_CMT(IO_DIN, 1147, 'diSL1TcuEnbl', gm_status)
    SET_PORT_CMT(IO_DIN, 1148, 'diSL1TempAchieved', gm_status)

    SET_PORT_CMT(IO_DOUT, 1063, 'doSL1RemoteStart', gm_status)

    SET_PORT_CMT(IO_DOUT, 81, 'doSL1P1B1Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 82, 'doSL1P1B1Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 83, 'doSL1P1B2Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 84, 'doSL1P1B2Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 85, 'doSL1P2B1Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 86, 'doSL1P2B1Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 87, 'doSL1P2B2Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 88, 'doSL1P2B2Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 96, 'doSL1AirDetected', gm_status)
    SET_PORT_CMT(IO_DOUT, 105, 'doSL1P1B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 106, 'doSL1P1B1Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 107, 'doSL1P1B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 108, 'doSL1P1B2Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 109, 'doSL1P2B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 110, 'doSL1P2B1Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 111, 'doSL1P2B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 112, 'doSL1P2B2Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 113, 'goSLXVolData1', gm_status)
    SET_PORT_CMT(IO_DOUT, 114, 'goSLXVolData2', gm_status)
    SET_PORT_CMT(IO_DOUT, 115, 'goSLXVolData3', gm_status)
    SET_PORT_CMT(IO_DOUT, 116, 'goSLXVolData4', gm_status)
    SET_PORT_CMT(IO_DOUT, 117, 'goSLXVolData5', gm_status)
    SET_PORT_CMT(IO_DOUT, 118, 'goSLXVolData6', gm_status)
    SET_PORT_CMT(IO_DOUT, 119, 'goSLXVolData7', gm_status)
    SET_PORT_CMT(IO_DOUT, 120, 'goSLXVolData8', gm_status)
    SET_PORT_CMT(IO_DOUT, 121, 'goSLXVolData9', gm_status)
    SET_PORT_CMT(IO_DOUT, 122, 'goSLXVolData10', gm_status)
    SET_PORT_CMT(IO_DOUT, 123, 'goSLXVolData11', gm_status)
    SET_PORT_CMT(IO_DOUT, 124, 'goSLXVolData12', gm_status)
    SET_PORT_CMT(IO_DOUT, 125, 'goSLXVolData13', gm_status)
    SET_PORT_CMT(IO_DOUT, 126, 'goSLXVolData14', gm_status)
    SET_PORT_CMT(IO_DOUT, 127, 'goSLXVolData15', gm_status)
    SET_PORT_CMT(IO_DOUT, 128, 'goSLXVolData16', gm_status)

    Load_File('FRS:', 'purge_1.tp',1)
    Load_File('FRS:', 'rmtstrt1.tp',1)
    IF DISPAPP[1].ispare1 = disp_2k THEN 
      --clear BG before reload 
      prog_nam_bg2 = 'purge_bkg1.tp'
      GET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status) --save time stamp
      Set_S_sVar('$MIX_BG[2].$PROG_NAME', '')
      Set_I_sVar('$MIX_BG[2].$MODE', 2)
      Set_I_sVar('$MIX_BG[2].$STATUS', 1)
      Set_I_sVar('$MIX_BG[2].$MODIFY_TIME', -1)
      CLEAR('purge_bkg1',gm_status)
      --Set Mixed Logic or BG Logic Program
      Load_File('FRS:', 'purge_bkg1.tp',1)
      SET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status) --set time stamp to before update
      Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'purge_bkg1')
      Set_I_sVar('$MIX_BG[2].$MODE', 2)
      Set_I_sVar('$MIX_BG[2].$STATUS', 2)
    ENDIF
  ENDIF --controller 1 update

  IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND (bshop_proc2 = dispappl))) THEN --controller 2 update can be executed
    SET_PORT_CMT(IO_DIN, 131, 'diP2RemoteStart', gm_status)
    SET_PORT_CMT(IO_DIN, 132, 'diP2Purge', gm_status)
    SET_PORT_CMT(IO_DIN, 133, 'diP2Shutdwn', gm_status)
    SET_PORT_CMT(IO_DIN, 1170, 'diSL2LowTotVol', gm_status)
    SET_PORT_CMT(IO_DIN, 1171, 'diSL2HighTotVol', gm_status)
    SET_PORT_CMT(IO_DIN, 1175, 'diSL2AirDetected', gm_status)
    SET_PORT_CMT(IO_DIN, 1176, 'diSL2MeterFilling', gm_status)
    SET_PORT_CMT(IO_DIN, 1265, 'diSL2P1B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1266, 'diSL2P1B1Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1267, 'diSL2P1B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1268, 'diSL2P1B2Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1269, 'diSL2P2B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1270, 'diSL2P2B1Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1271, 'diSL2P2B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DIN, 1272, 'diSL2P2B2Expired', gm_status)
    SET_PORT_CMT(IO_DIN, 1273, 'diSL2AutoMode', gm_status)
    SET_PORT_CMT(IO_DIN, 1274, 'diSL2EqCtrlStop', gm_status)
    SET_PORT_CMT(IO_DIN, 1275, 'diSL2TcuEnbl', gm_status)
    SET_PORT_CMT(IO_DIN, 1276, 'diSL2TempAchieved', gm_status)

    SET_PORT_CMT(IO_DOUT, 137, 'doP2RmtStartInp', gm_status)
    SET_PORT_CMT(IO_DOUT, 145, 'doSL2P1B1Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 146, 'doSL2P1B1Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 147, 'doSL2P1B2Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 148, 'doSL2P1B2Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 149, 'doSL2P2B1Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 150, 'doSL2P2B1Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 151, 'doSL2P2B2Empty', gm_status)
    SET_PORT_CMT(IO_DOUT, 152, 'doSL2P2B2Low', gm_status)
    SET_PORT_CMT(IO_DOUT, 160, 'doSL2AirDetected', gm_status)
    SET_PORT_CMT(IO_DOUT, 166, '(Reserved)', gm_status)
    SET_PORT_CMT(IO_DOUT, 167, '(Reserved)', gm_status)
    SET_PORT_CMT(IO_DOUT, 168, '(Reserved)', gm_status)
    SET_PORT_CMT(IO_DOUT, 169, 'doSL2P1B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 170, 'doSL2P1B1Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 171, 'doSL2P1B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 172, 'doSL2P1B2Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 173, 'doSL2P2B1ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 174, 'doSL2P2B1Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 175, 'doSL2P2B2ApprExp', gm_status)
    SET_PORT_CMT(IO_DOUT, 176, 'doSL2P2B2Expired', gm_status)
    SET_PORT_CMT(IO_DOUT, 177, 'goSLXVolData1', gm_status)
    SET_PORT_CMT(IO_DOUT, 178, 'goSLXVolData2', gm_status)
    SET_PORT_CMT(IO_DOUT, 179, 'goSLXVolData3', gm_status)
    SET_PORT_CMT(IO_DOUT, 180, 'goSLXVolData4', gm_status)
    SET_PORT_CMT(IO_DOUT, 181, 'goSLXVolData5', gm_status)
    SET_PORT_CMT(IO_DOUT, 182, 'goSLXVolData6', gm_status)
    SET_PORT_CMT(IO_DOUT, 183, 'goSLXVolData7', gm_status)
    SET_PORT_CMT(IO_DOUT, 184, 'goSLXVolData8', gm_status)
    SET_PORT_CMT(IO_DOUT, 185, 'goSLXVolData9', gm_status)
    SET_PORT_CMT(IO_DOUT, 186, 'goSLXVolData10', gm_status)
    SET_PORT_CMT(IO_DOUT, 187, 'goSLXVolData11', gm_status)
    SET_PORT_CMT(IO_DOUT, 188, 'goSLXVolData12', gm_status)
    SET_PORT_CMT(IO_DOUT, 189, 'goSLXVolData13', gm_status)
    SET_PORT_CMT(IO_DOUT, 190, 'goSLXVolData14', gm_status)
    SET_PORT_CMT(IO_DOUT, 191, 'goSLXVolData15', gm_status)
    SET_PORT_CMT(IO_DOUT, 192, 'goSLXVolData16', gm_status)

    --update process 2 dispense programs
    Load_File('FRS:', 'rmtstrt2.tp',1)
    Load_File('FRS:', 'purge_2.tp',1)
    IF (((numdispctrl = 2) AND (dispapp[2].ispare1 = disp_2k)) OR ((numdispctrl =1) AND (bshop_proc2 = dispappl) AND (dispapp[1].ispare1 = disp_2k))) THEN
      --clear BG before reload 
      prog_nam_bg2 = 'purge_bkg2.tp'
      GET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status) --save time stamp
      Set_S_sVar('$MIX_BG[3].$PROG_NAME', '')
      Set_I_sVar('$MIX_BG[3].$MODE', 2)
      Set_I_sVar('$MIX_BG[3].$STATUS', 1)
      Set_I_sVar('$MIX_BG[3].$MODIFY_TIME', -1)
      CLEAR('purge_bkg2',gm_status)
      --Set Mixed Logic or BG Logic Program
      Load_File('FRS:', 'purge_bkg2.tp',1)
      SET_ATTR_PRG(prog_nam_bg2, AT_MDFY_TIME, int_val, str_val, gm_status) --set time stamp to before update
      Set_S_sVar('$MIX_BG[3].$PROG_NAME', 'purge_bkg2')
      Set_I_sVar('$MIX_BG[3].$MODE', 2)
      Set_I_sVar('$MIX_BG[3].$STATUS', 2)
    ENDIF
  ENDIF --controller 2 update

  --update dispense programs
  Load_File('FRS:', 'areastrt.tp',1)
  Load_File('FRS:', 'area_dc.tp',1)

  --V833P09 5-29-2020 schoensm
  prog_nam = 'areadata'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  CLEAR('AREADATA', gm_status)
  Set_I_sVar('$MACROTABLE[15].$SYS_LEV_MSK', 0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','AREADATA.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(15,  'SEND DISP DATA' ,   'AREADATA', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[15].$SYS_LEV_MSK', 3)

  Load_File('FRS:', 'chkrfill.tp',1)
  Load_File('FRS:', 'sxxdcdeopik.tp',1)
  Load_File('FRS:', 'part_id.tp',1) --5-29-2020 schoensm V833P09

END disp_updt
-----------------------------------------------------------------------------
ROUTINE visn_updt
-- PURPOSE: Update vision app
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  SELECT VisSys_Type OF
    CASE(vis_fss, vis_fms, vis_guid):
      SET_PORT_CMT(IO_DOUT,503,  'PrcpUserDef1',gm_status)  
      SET_PORT_CMT(IO_DOUT,504,  'PrcpUserDef2',gm_status)
      --Position registers
      Comment_Reg(2,50, 'PRIMARY OFFSET')  
      Comment_Reg(2,52, 'NOMINAL OFFSET')    
      FOR i = 60 to 75 DO
        Comment_Reg(2,i,  'SXX AVG OFFSET')  
      ENDFOR

    ELSE:
  ENDSELECT

  --V8.33P08 schoensm 9-11-2019
  IF (press_area = FALSE) THEN  --check if NOT press shop
    IF VisSys_Type = vis_irvis THEN
      SPRUNCfile ('FRS:FEATURE_SRCH.TP', 'FR:\FEATURE_SEARCH.TP') 
      Load_File('FR:','FEATURE_SEARCH.TP',1)  
    ENDIF -- vis_irvis
  ENDIF --NOT press shop 

END visn_updt
-----------------------------------------------------------------------------
ROUTINE fds_updt
-- PURPOSE: Update fds app
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --update programs
  Load_File('FRS:','SCREW.TP',1)	
  Load_File('FRS:','SCREWSET.TP',1)
  Load_File('FRS:','SCREWPCK.TP',1)

  --update IO comments  
  SET_PORT_CMT(IO_DOUT,1030,'doFDS1HoldingAirOn',gm_status)  
  SET_PORT_CMT(IO_DOUT,1032,'doFDS1ChngMtrRot',gm_status)  

  -- Macros
  prog_nam = 'SCREWSET'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('SCREWSET')
  Set_I_sVar('$MACROTABLE[21].$SYS_LEV_MSK',0)
  Load_File('FRS:','SCREWSET.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(21, 'SCREWSET'   ,   'SCREWSET', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[21].$SYS_LEV_MSK', 3)

END fds_updt
-----------------------------------------------------------------------------
ROUTINE body_updt
-- PURPOSE: Update Bodyshop Settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (numwldctrl <> 0) THEN --Spot Application
    spotwld_updt
  ENDIF

  IF (numprojctrl <> 0) THEN --Projection Weld
    proj_updt
  ENDIF

  IF (numstudctrl <> 0) THEN --Stud Weld
    stud_updt
  ENDIF

  IF (numdispctrl <> 0) THEN --Dispense
    disp_updt
  ENDIF

  IF (numsprctrl <> 0) THEN --SPR
    spr_updt
  ENDIF

  IF Use_Vision THEN   --  Vision
    visn_updt
  ENDIF 

  IF (numfdsctrl <> 0) THEN --FDS
    fds_updt
  ENDIF

END body_updt
-----------------------------------------------------------------------------
ROUTINE press_updt
-- PURPOSE: Update press shop. the press shop will have 4 booleans, when true
--          the program for those booleans execute
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
----------------------------------------------------------------------------
BEGIN

  --always reset programs to run after an auto update
  --only needed to support updates robots on v833p02 and earlier
  IF (LPT = TRUE) THEN
    Set_B_Pvar('atcustom','Prgs2RunPRS[2].needtorun',TRUE)
    Set_S_Pvar('atcustom','Prgs2RunPRS[2].prog_name','LPT_TASK')
  ENDIF
  IF LPT_IIC THEN  -- run for 200P and 100P w/wo lpt
    Set_S_PVar('atcustom','PRGS2RUNPRS[1].PROG_NAME','iic_sig')
    Set_B_PVar('atcustom','PRGS2RUNPRS[1].NEEDTORUN',TRUE)
  ENDIF

  IF (LPT = TRUE) THEN
    IF PresLineType = prestandem THEN  --Tandem = 1
      Load_File('FRS:','Sync_mon.tp',1)	    	
    ENDIF
  ENDIF --LPT    

  IF (Use_Vision = TRUE) THEN  --vision application
    visn_updt
  ENDIF 

USING Updt_toPress DO -- if unit, means not in setup, so make FALSE
   IF UNINIT(update_io) THEN
     update_io = FALSE
   ENDIF
   IF UNINIT(update_reg) THEN
     update_reg = FALSE
   ENDIF
   IF UNINIT(update_prog) THEN
     update_prog = FALSE
   ENDIF
   IF UNINIT(update_vars) THEN
     update_vars = FALSE
   ENDIF


  -- 7-19-17 RK added to call to update press registers and press I/O
  -- ********** REMOVE CODE for P05 RELEASE****************
     update_io = TRUE
     update_reg = TRUE

  -- ********** End of REMOVE code block **************

  -- Set Variables so programs run without user prompt if ran before
    IF update_reg = TRUE THEN
      IF chk_loaded('GMPRESRG') THEN
        Set_B_PVar('GMPRESRG','PresRegsDone',FALSE) -- reset var
        GMPRESRG -- run register program again
        POST_ERR(38000, 'Press Registers Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

    IF update_io = TRUE  THEN
      IF chk_loaded('GMPRESIO') THEN
        Set_B_PVar('GMPRESIO','Pres_IO_Done',FALSE)
        GMPRESIO -- run I/O comments again
        POST_ERR(38000, 'Press I/O Cmnts Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

    IF update_prog = TRUE THEN
      IF chk_loaded('GMPRESPG') THEN
        Set_B_PVar('GMPRESPG','PresPrgsDone',FALSE)
        GMPRESPG -- run program load again
        POST_ERR(38000, 'Press Programs Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

    IF update_vars = TRUE THEN
      IF chk_loaded('GMPRESVR') THEN
        Set_B_PVar('GMPRESVR','PresVarsDone',FALSE)
        GMPRESVR -- run variables setup again
        POST_ERR(38000, 'Press Variables Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

ENDUSING -- end the using of structure Updt_toPress.

  Comment_Reg(1,295,'SYNC Var Enabled') 
  Comment_Reg(1,296,'PK-Enc DEGRADE') 
  Comment_Reg(1,297,'DP-Enc DEGRADE') 
  Comment_Reg(1,298,'PK-AntiAngle') 
  Comment_Reg(1,299,'DP-AntiAngle')

   POST_ERR(38000, 'Press Shop Update Completed', 0, 0) --

END press_updt
-----------------------------------------------------------------------------
ROUTINE pwr_updt
-- PURPOSE: Update powertrain shop
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
----------------------------------------------------------------------------
BEGIN

  IF (Use_Dispense) THEN --dispense
    disp_updt
  ENDIF

  IF Use_Vision THEN  --vision
    visn_updt
  ENDIF

  --always reset programs to run after an auto update
  --only needed to support updates robots on v833p02 and earlier
  IF (EOATUseAnlog = TRUE) THEN
    Set_B_PVar('ATCUSTOM' , 'Prgs2RunCell[1].NeedToRun',TRUE)
    Set_B_PVar('ATCUSTOM' , 'Prgs2RunCell[1].NeedForProd',TRUE)
    Set_S_PVar('ATCUSTOM' , 'Prgs2RunCell[1].Prog_Name','CNVRTGIN')
  ENDIF --analog gripper
  IF Use_Spin_Top THEN --spintop 
    Set_S_PVar('atcustom','PRGS2RUNGMPT[1].PROG_NAME','spintopbgr')
    Set_B_PVar('atcustom','PRGS2RUNGMPT[1].NEEDTORUN',TRUE)
  ENDIF --spintop

USING Updt_toPwrtn DO -- if unit, means not in setup, so make FALSE
   IF UNINIT(update_io) THEN
     update_io = FALSE
   ENDIF
   IF UNINIT(update_reg) THEN
     update_reg = FALSE
   ENDIF
   IF UNINIT(update_prog) THEN
     update_prog = FALSE
   ENDIF
   IF UNINIT(update_vars) THEN
     update_vars = FALSE
   ENDIF

  -- Set Variables so programs run without user prompt if ran before
    IF update_reg = TRUE THEN
      IF chk_loaded('GMPTREGS') THEN
        Set_B_PVar('GMPTREGS','GMPTRegsDone',FALSE) -- reset var
        GMPTREGS -- run register program again
        POST_ERR(38000, 'Powertrain Registers Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

    IF update_io = TRUE  THEN
      IF chk_loaded('GMPT_IO') THEN
        Set_B_PVar('GMPT_IO','GMPT_IO_Done',FALSE)
        GMPT_IO -- run I/O comments again
        POST_ERR(38000, 'Powertrain I/O Cmnts Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

    IF update_prog = TRUE THEN
      IF chk_loaded('GMPTPRGS') THEN
        Set_B_PVar('GMPTPRGS','GMPTPrgsDone',FALSE)
        GMPTPRGS -- run program load again
        POST_ERR(38000, 'Powertrain Programs Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

    IF update_vars = TRUE THEN
      IF chk_loaded('GMPTVARS') THEN
        Set_B_PVar('GMPTVARS','GMPTVarsDone',FALSE)
        GMPTVARS -- run Vars setup again
        POST_ERR(38000, 'Powertrain Variables Updated', 0, 0) -- log to alarm updated
      ENDIF
    ENDIF

ENDUSING -- end the using of structure Updt_toPwrtn.

   POST_ERR(38000, 'Powertrain Update Completed', 0, 0) --

END pwr_updt
-----------------------------------------------------------------------------
ROUTINE paint_updt
-- PURPOSE: Update paintshop
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
----------------------------------------------------------------------------
BEGIN

  --always reset programs to run after an auto update 
  --only needed to support updates robots on v833p02 and earlier
  Set_B_PVar('ATCUSTOM' , 'Prgs2RunPS[1].NeedToRun',TRUE)
  Set_B_PVar('ATCUSTOM' , 'Prgs2RunPS[1].NeedForProd',TRUE)
  Set_S_PVar('ATCUSTOM' , 'Prgs2RunPS[1].Prog_Name','pntutils')

  IF (pnt_dsp_used) THEN --dispense
    disp_updt
  ENDIF

END paint_updt
-----------------------------------------------------------------------------
ROUTINE laser_updt
-- PURPOSE: Update laser applications
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
----------------------------------------------------------------------------
BEGIN

  --Setup Programs to Run
  Set_B_PVar('ATSHCUST' , 'Prgs2RunLS[1].NeedToRun',TRUE)
  Set_B_PVar('ATSHCUST' , 'Prgs2RunLS[1].NeedForProd',TRUE)
  Set_S_PVar('ATSHCUST' , 'Prgs2RunLS[1].Prog_Name','interupt')

END laser_updt
-----------------------------------------------------------------------------
ROUTINE upd_spot_var
-- PURPOSE: Update SpotTool+ variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
----------------------------------------------------------------------------
BEGIN

  --Always setup programs to rerun after an auto update
  --only needed to support updates robots on v833p02 and earlier
  Set_B_PVar('ATCUSTOM' , 'Prgs2RunCell[2].NeedToRun',TRUE)
  Set_B_PVar('ATCUSTOM' , 'Prgs2RunCell[2].NeedForProd',TRUE)
  Set_S_PVar('ATCUSTOM' , 'Prgs2RunCell[2].Prog_Name','gmaspd')

  --Reset old tool change web screen settings
  IF (mfg_area <> 0) THEN --wizard has been run
    IF (press_area = FALSE) THEN --press uses different tool change setup
      IF(UseToolChngr = TRUE) THEN --tool change application
        Set_S_sVar('$CUSTOMMENU[26].$TITLE','')
        Set_S_sVar('$CUSTOMMENU[26].$PROG_NAME','')  
      ENDIF --tool change application
    ENDIF --press uses different tool change setup
  ENDIF --wizard has been run

  --copy gmlogo.jpg and cstrt.jpg to FR to fix missing images on wizard top menu
  SPRUNCfile('FRH:\gui\gmlogo.jpg', 'FR:\gmlogo.jpg')
  SPRUNCfile('FRH:\gui\cstrt.jpg', 'FR:\cstrt.jpg')

  --user alarms
  Set_S_sVar('$UALRM_MSG[80]','TP Program or DISP_SEQ Error')
  Set_I_sVar('$UALRM_SEV[80]',6) --Pause program and stop its motion


  --enable production path for ZDT
  Set_B_sVar('$mfrq_cfg.$enable', TRUE)

  --Fanuc Server Access Control set to read only
  --Removed temporarily from p08 release per GM's request, need some other items before this can be used
  --Set_I_sVar('$fsac_enable', 1)
  --Set_I_sVar('$fsac_def_lv', 0)
  
  --endwld4paus --new variable for existing feature on v833p08, set to default for all
  --applications. Variable exists on all robots.
  FOR i = 1 TO 5 DO
    a = int_to_strg(i)
    Set_I_sVar('$spoteqsetup[' + a + '].$endwld4paus', 0)
  ENDFOR

  IF (got_rtu = FALSE) THEN  --extended axis
    rtu_grp2 = FALSE  --no RTU, turn off brkcheck variable for RTU on group 2
  ENDIF
END upd_spot_var
-----------------------------------------------------------------------------
ROUTINE upd_arc_var
-- PURPOSE: Update ArcTool  variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
----------------------------------------------------------------------------
BEGIN

  --Fanuc Server Access Control set to read only
  --temporarily taken out for p08 release per GM's request, need other settings before this can be applied
  --Set_I_sVar('$fsac_enable', 1)
  --Set_I_sVar('$fsac_def_lv', 0)

  IF (got_rtu = FALSE) THEN  --extended axis
    rtu_grp2 = FALSE  --no RTU, turn off brkcheck variable for RTU on group 2
  ENDIF

END upd_arc_var
-----------------------------------------------------------------------------
ROUTINE update_io
-- PURPOSE: Update I/O
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
----------------------------------------------------------------------------
BEGIN

  --Common I/O Updates
  IF ((body_area = TRUE) OR (pwr_area = TRUE) OR (arc_optn = TRUE)) THEN --set for bodyshop, powertrain and arc
    SET_PORT_CMT(IO_DIN,278, 'StackSearch',  gm_status)      -- Stack Search
    SET_PORT_CMT(IO_DIN,279, 'SearchDisabled',  gm_status)   -- Search Disabled
  ENDIF --bodyshop and powertrain and arc

  SET_PORT_CMT(IO_DIN, 465, 'HmiSpdOvrReq', gm_status)                          --4-14-2020 v8.33p09 schoensm 
  SET_PORT_CMT(IO_DIN, 501, 'AbortFrame', gm_status)

  --External Interlock I/O --common
  SET_PORT_ASG(IO_DIN,  2011,36, 2, IO_DIN, 1, -1,gm_status)
  SET_PORT_CMT(IO_DIN,2011,'SPO_1_24VOut_Enb',gm_status)  

  --Common Flag Updates
  SET_PORT_CMT(IO_FLAG,33,'DCD MultiLvl', gm_status)
  SET_PORT_CMT(IO_FLAG,34,'DCD Invalid', gm_status)
  SET_PORT_CMT(IO_FLAG,56,'DVG Redress', gm_status) 
  SET_PORT_CMT(IO_FLAG,57,'ResChkRedress', gm_status) 
  SET_PORT_CMT(IO_FLAG,85,'FDS_SpindleAdv', gm_status) 
  SET_PORT_CMT(IO_FLAG,201,'CC Max Retry', gm_status)
  SET_PORT_CMT(IO_FLAG,202,'Inspection Dress', gm_status)

END update_io
-----------------------------------------------------------------------------
ROUTINE update_prg
-- PURPOSE: Update programs
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --ALWAYS update exclusion files
  SPRUNCfile('FRS:gmkvareeg.dt','FR:kvareeg.dt')
  SPRUNCfile('FRS:gmposreeg.dt','FR:posreeg.dt')
  SPRUNCfile('FRS:gmregeeg.dt','FR:regeeg.dt')
  SPRUNCfile('FRS:gmsvareeg.dt','FR:svareeg.dt')
  SPRUNCfile('FRS:gmtplineeg.dt','FR:tplineeg.dt')

  --Update Common Programs
  Load_File('FRS:','bodyhmio.tp',1)
  Load_File('FRS:', 'gmhstset.pc',1) --sets up host comm settings
  Load_File('FRS:','PRE_REPR.TP',1)
  IF Chk_Feature('J951') AND (collab_rbt = FALSE) THEN --Brake Check Option
    Load_File('FRS:','BRAKECHK.TP',1)  --v8.33p10 check for brake check option
    Load_File('FRS:','style25.tp',1)
  ENDIF
  
  IF (arc_optn = FALSE) THEN  --SpotTool
    prog_nam = 'home_io'
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    CLEAR('HOME_IO', gm_status)
    Set_I_sVar('$MACROTABLE[10].$SYS_LEV_MSK', 0)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','HOME_IO.TP',1) -- Must relaod standard macro
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
    Set_I_sVar('$MACROTABLE[10].$SYS_LEV_MSK',3)
  ENDIF

  IF ((body_area = TRUE) OR (pwr_area = TRUE)) THEN
    -- Update Stack Size of TP file
    prog_nam = 'MOV_REPR'
    SET_ATTR_PRG(prog_nam, AT_STK_SIZE, 750, prog_nam, gm_status)
    SET_ATTR_PRG(prog_nam, AT_COMMENT, int_val, 'REPAIR PROG V4.1',gm_status) 
  ENDIF

  IF (press_area = FALSE) THEN
    Load_File('FRS:','Postrepr.tp',1)  -- 3-26-18 
  ENDIF

  copyFile('FRSU:\gmvarchg.xml','FR:\varchg.xml')

IF (arc_optn = FALSE) THEN  --SpotTool+ only for MH Grip
  IF (USE_MH_TOOL) THEN  --MH applications only
    IF (use_vacuum) THEN
      prog_nam = 'blowoff'
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
      Clear_Prog('BLOWOFF')
      Set_I_sVar('$MACROTABLE[138].$SYS_LEV_MSK', 0)
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
      Load_File('FRS:','BLOWOFF.TP',1) -- Must relaod standard macro
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
      Set_I_sVar('$MACROTABLE[138].$SYS_LEV_MSK',3)

      prog_nam = 'vacuumon'
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
      Clear_Prog('VACUUMON')
      Set_I_sVar('$MACROTABLE[136].$SYS_LEV_MSK',0)
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
      Load_File('FRS:','VACUUMON.TP',1) -- Must relaod standard macro
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
      Set_I_sVar('$MACROTABLE[136].$SYS_LEV_MSK', 3)

      prog_nam = 'vacuumof'
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
      Clear_Prog('VACUUMOF')
      Set_I_sVar('$MACROTABLE[137].$SYS_LEV_MSK',0)
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
      Load_File('FRS:','VACUUMOF.TP',1) -- Must relaod standard macro
      SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
      Set_I_sVar('$MACROTABLE[137].$SYS_LEV_MSK',3)
    ENDIF
		
    prog_nam = 'droppart'
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Clear_Prog('droppart')
    Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK',0)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','DROPPART.TP',1) -- Must reload standard macro
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
    Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK', 3)

    prog_nam = 'chkpart'
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Clear_Prog('chkpart')
    Set_I_sVar('$MACROTABLE[132].$SYS_LEV_MSK',0)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','CHKPART.TP',1) -- Must reload standard macro
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
    Set_I_sVar('$MACROTABLE[132].$SYS_LEV_MSK',3)

    prog_nam = 'chknoprt'
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Clear_Prog('chknoprt')
    Set_I_sVar('$MACROTABLE[133].$SYS_LEV_MSK',0)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','CHKNOPRT.TP',1) -- Must reload standard macro
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
    Set_I_sVar('$MACROTABLE[133].$SYS_LEV_MSK',3)

    prog_nam = 'setvalve' --macro 139
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status) 
    Clear_Prog('setvalve')
    Set_I_sVar('$MACROTABLE[139].$SYS_LEV_MSK',0)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','setvalve.tp',1)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
    Set_I_sVar('$MACROTABLE[139].$SYS_LEV_MSK',3)
	  
    prog_nam = 'grippart' --macro 130
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status) 
    Clear_Prog('grippart')
    Set_I_sVar('$MACROTABLE[130].$SYS_LEV_MSK',0) 
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','grippart.tp',1)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
    Set_I_sVar('$MACROTABLE[130].$SYS_LEV_MSK',3)	  	  
	  
    prog_nam = 'oktopick' --macro 134
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status) 
    Clear_Prog('oktopick')
    Set_I_sVar('$MACROTABLE[134].$SYS_LEV_MSK',0)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','oktopick.tp',1) 
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)	
    Set_I_sVar('$MACROTABLE[134].$SYS_LEV_MSK',3)  

  ENDIF  --MH applications only
ENDIF --SpotTool+ only for MH Grip

END update_prg
-----------------------------------------------------------------------------
ROUTINE spottl_updt
-- PURPOSE: Update SpotTool+ Settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --ALWAYS UPDATE PMC
  load_pmc

  --Set PMC internal I/O assignment
  setpmcintio

  --Common Variables
  upd_spot_var

  IF Chk_Feature ('H736') THEN
    Set_R_sVar('$BCK_GRP[1].$BRK_TORQUE[4]', 82.0)
    Set_R_sVar('$BCK_GRP[1].$BRK_TORQUE[5]', 82.0)
    Set_R_sVar('$BCK_GRP[1].$BRK_TORQUE[6]', 82.0)
    Set_B_sVar('$BCK_GRP[1].$CHK_AXIS[4]', TRUE)
    Set_B_sVar('$BCK_GRP[1].$CHK_AXIS[5]', TRUE)
    Set_B_sVar('$BCK_GRP[1].$CHK_AXIS[6]', TRUE)
  ENDIF
  Set_B_sVar('$MACRTPDSBEX', FALSE)

  --Update I/O
  update_io

  --Update programs
  update_prg

  SELECT mfg_area OF --shop specific updates
    CASE(mfg_area_bs):  --bodyshop
      body_updt
    CASE(mfg_area_ps):  --press
      press_updt
    CASE(mfg_area_pt):  --powertrain
      pwr_updt
    CASE(mfg_area_pn):  --paint
      paint_updt
    ELSE:
  ENDSELECT --shop specific updates  

  --set Hints screen version
  $application[8] = 'GM Global 4 Rev00'

END spottl_updt
-----------------------------------------------------------------------------
ROUTINE arctl_updt
-- PURPOSE: Update ArcTool  Settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(laser_app) THEN --wizard has not been run
    laser_app = 0 --init to 0 and use this as trigger to not run specific updates
  ENDIF

  --ALWAYS UPDATE PMC
  load_arc_pmc

  --Set PMC internal I/O assignment
  setpmcintio
  arcpmcinitio

  --Common Variables
  upd_arc_var

  --ALWAYS update exclusion files
  SPRUNCfile('FRS:gmkvareeg.dt','FR:kvareeg.dt')
  SPRUNCfile('FRS:gmposreeg.dt','FR:posreeg.dt')
  SPRUNCfile('FRS:gmregeeg.dt','FR:regeeg.dt')
  SPRUNCfile('FRS:gmsvareeg.dt','FR:svareeg.dt')
  SPRUNCfile('FRS:gmtplineeg.dt','FR:tplineeg.dt')

  IF Chk_Feature ('H736') THEN
    Set_R_sVar('$BCK_GRP[1].$BRK_TORQUE[4]', 82.0)
    Set_R_sVar('$BCK_GRP[1].$BRK_TORQUE[5]', 82.0)
    Set_R_sVar('$BCK_GRP[1].$BRK_TORQUE[6]', 82.0)
    Set_B_sVar('$BCK_GRP[1].$CHK_AXIS[4]', TRUE)
    Set_B_sVar('$BCK_GRP[1].$CHK_AXIS[5]', TRUE)
    Set_B_sVar('$BCK_GRP[1].$CHK_AXIS[6]', TRUE)
  ENDIF
    Set_B_sVar('$MACRTPDSBEX', FALSE)

  IF (laser_app <> 0) THEN  --only do updates if wizard has been run

    --ALWAYS SETUP PROGRAMS TO RUN
    Set_B_PVar('ATSHCUST' , 'Prgs2RunAT[1].NeedToRun',TRUE)
    Set_B_PVar('ATSHCUST' , 'Prgs2RunAT[1].NeedForProd',TRUE)
    Set_S_PVar('ATSHCUST' , 'Prgs2RunAT[1].Prog_Name','gmaspd') 

    --Common I/O Updates
    update_io

    --Update programs
    update_prg

    IF Use_Vision THEN  --vision
      visn_updt
    ENDIF

    IF (laser_app = wizans_yes) THEN  --laser application
      laser_updt
    ENDIF

  ENDIF --check that wiz has been run for updating

  --set Hints screen version
  $application[8] = 'GM Global 4 Rev00'

END arctl_updt
-----------------------------------------------------------------------------
BEGIN

  gm_autouprun = TRUE --auto update setup is running

  init_updt  --intialize settings for autoupdate

  brk_updt  -- break check settings

  dcsio_prot --enable/disable DCS I/O write protection

  ftp_updt --clear out FTP servers 2-4 schoensm 11-1-2019
  
  comm_var --update common var settings for Arc and Spot
  --Collaborative
  IF (collab_rbt = TRUE) THEN --collaborative robot arm
    colbrbt_updt --collaborative robot updates
  ENDIF

  IF (arc_optn = FALSE) THEN --SpotTool+
    spottl_updt  --SpotTool+ settings
  ELSE --ArcTool
    arctl_updt   --ArcTool settings
  ENDIF --SpotTool+
  
  gm_autouprun = FALSE --auto update setup is no longer executing

END GMAUTOUP