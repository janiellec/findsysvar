-- -----------------------------------------------------------------------
--
--   MODULE:         GMPNTRG.KL
--   TITLE:          GMPNTRG PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Paint Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE        BY               COMMENTS
--         --------   ----------  ---------------  --------------------
--         4.0        2016-10-27  D. Friedeman		Initial Configuration
--         4.01       2017-02-24  D. Friedeman      Don't set $VR[X] variables unless
--                                                  vision is loaded.
--         4.1        2019-08-30  D. Friedeman      Added support for 
--                                                  Style ID and Tip Inspection
--
--------------------------------------------------------------------------
PROGRAM GMPNTRG

%COMMENT = 'Paint Regs V4.1'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

CONST

Version = '2019-08-30'
%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  PntRG_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup Mh I/O at least first time
  loop        : INTEGER
  status      : INTEGER
  zero_xyz    : XYZWPR
  
-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgpnt

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables
-----------------------------------------------------------------------------
ROUTINE initPNTREGS
-- PURPOSE: to initialize Registers associated with Material Handling setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN
WriteLog('  Routine initPNTregs starting in GMPNTRG',FALSE)

  FOR loop = 900 TO 999 DO -- clear all PaintShop Data Register comments
    Comment_Reg(1,loop,'')
  ENDFOR

  Comment_Reg(1,900,'iRV Vis Reg Indx')
  Comment_Reg(1,901,'iRV ClrOfst Stat')
  Comment_Reg(1,902,'iRV GetOfst Stat')
  Comment_Reg(1,903,'iRV Offset Ready')
  Comment_Reg(1,904,'3DMV GUI Dat Ok ')
  Comment_Reg(1,905,'Ghost Ofst Index')	
  Comment_Reg(1,906,'Camera Door Dely')  
  
  Comment_Reg(1,910,'iRV Vis Status  ') -- iRV Vision Status Register
  Comment_Reg(1,911,'iRV Train Mode  ') -- iRV Vision Mode Register
  Comment_Reg(1,912,'iRV Max AutoRtry') -- iRV Maximum Auto Retries
  Comment_Reg(1,913,'iRV Cur Rtry Num') -- iRV Current Retry Attempt
  Comment_Reg(1,914,'3DL XYZ Ofst Tol')
  set_int_reg(914, 50, status) -- Default 50 mm
  Comment_Reg(1,915,'3DL WPR Ofst Tol')
  set_int_reg(915,  3, status) -- Default 3 degrees
  Comment_Reg(1,916,'iRV Process Okay') -- iRV Part Found & Confirmed
  Comment_Reg(1,917,'iRV #Targs Found') -- iRV Number Of Found Targets
  Comment_Reg(1,918,'iRV FB Rot Enabl') -- iRV FndBdy Enable Rotation	 
  Comment_Reg(1,919,'3DL Diag Tst Idx')
  Comment_Reg(1,920,'3DL Diag Pos Idx')  

  Comment_Reg(1,926,'Style ID Reg    ')
  
  Comment_Reg(1,928,'L Ditch Ofst Rdy')
  Comment_Reg(1,929,'R Ditch Ofst Rdy')  
  
  Comment_Reg(1,930,'Gun Clean # Strk')
  Comment_Reg(1,931,'Gun Cln Strk Ctr')
  Comment_Reg(1,932,'Super Purge Time')  
  
  
  Comment_Reg(1,950,'ToolX Compliance') 
  Comment_Reg(1,951,'Tip Inspt Result') -- Hem Tip Inspection Result
  Comment_Reg(1,952,'Disabl Tip Inspt') -- Disable Hem Tip Inspection
  
  Comment_Reg(1,990,'UTOOL3D UTOOLNum')
  Comment_Reg(1,991,'UTOOL3D Temp Reg')
  Comment_Reg(1,992,'Math Op Stat Reg')
  
   
  FOR loop = 1 TO 200 DO -- clear all Position Register comments
    Comment_Reg(2,loop,'')
  ENDFOR

  Comment_Reg(2, 1,'HOME Position   ')
  Comment_Reg(2, 2,'PURGE Position  ')
  Comment_Reg(2, 3,'REPAIR/BYPAS Pos')
  Comment_Reg(2, 4,'GUN MAINT Positn')
  Comment_Reg(2, 5,'USER 1 Position ')
  Comment_Reg(2, 6,'USER 2 Position ')  
  Comment_Reg(2, 7,'Spare Home  7   ')  
  Comment_Reg(2, 8,'Spare Home  8   ')  
  Comment_Reg(2, 9,'Spare Home  9   ')  
  Comment_Reg(2,10,'Spare Home 10   ')  
  
  Comment_Reg(2,11,'UTOOL3D Tool 1  ') -- UTOOLS3D
  Comment_Reg(2,12,'UTOOL3D Tool 2  ') -- UTOOLS3D
  Comment_Reg(2,13,'ToolCal Strt Pos') -- UTOOLS3D
  Comment_Reg(2,14,'Tool Offset     ') -- UTOOLS3D

  Comment_Reg(2,21,'3DL Snap1 Result')
  Comment_Reg(2,22,'3DL Snap2 Result')
  Comment_Reg(2,23,'3DL Snap3 Result')
  Comment_Reg(2,24,'Vis Frame Offst ')
  Comment_Reg(2,25,'Nominal Ofst Dat')  

  Comment_Reg(2,28,'Left Ditch Offst')
  Comment_Reg(2,29,'Right Ditch Ofst')
  
  -- Initialize Ghost Registers to zero.
  zero_xyz = $MOR_GRP[1].$NILPOS
  Comment_Reg(2,31,'Ghost Offset 1  ')
  set_pos_reg(31, zero_xyz, status)	
  Comment_Reg(2,32,'Ghost Offset 2  ')
  set_pos_reg(32, zero_xyz, status)	
  Comment_Reg(2,33,'Ghost Offset 3  ')
  set_pos_reg(33, zero_xyz, status)	
  Comment_Reg(2,34,'Ghost Offset 4  ')
  set_pos_reg(34, zero_xyz, status)	
  Comment_Reg(2,35,'Ghost Offset 5  ')
  set_pos_reg(35, zero_xyz, status)
  Comment_Reg(2,36,'iRV Validatn Pos')  -- 3DL
  Comment_Reg(2,37,'iRV Val Nom Ofst')  -- 3DL  
	
  Comment_Reg(2,38,'Cam  1 Diag Posn')
  Comment_Reg(2,39,'Cam  2 Diag Posn')
  Comment_Reg(2,40,'Cam  3 Diag Posn')
  Comment_Reg(2,41,'Cam  4 Diag Posn')
  Comment_Reg(2,42,'Cam  5 Diag Posn')
  Comment_Reg(2,43,'Cam  6 Diag Posn')
  Comment_Reg(2,44,'Cam  7 Diag Posn')
  Comment_Reg(2,45,'Cam  8 Diag Posn')
  Comment_Reg(2,46,'Cam  9 Diag Posn')
  Comment_Reg(2,47,'Cam 10 Diag Posn')
  Comment_Reg(2,48,'Cam 11 Diag Posn')
  Comment_Reg(2,49,'Cam 12 Diag Posn')
  Comment_Reg(2,50,'Cam 13 Diag Posn')
  Comment_Reg(2,51,'Cam 14 Diag Posn')
  Comment_Reg(2,52,'Cam 15 Diag Posn')
  Comment_Reg(2,53,'Cam 16 Diag Posn')
  Comment_Reg(2,54,'Cam 17 Diag Posn')
  Comment_Reg(2,55,'Cam 18 Diag Posn')
  Comment_Reg(2,56,'Cam 19 Diag Posn')
  Comment_Reg(2,57,'Cam 20 Diag Posn')
  Comment_Reg(2,58,'Cam 21 Diag Posn')
  Comment_Reg(2,59,'Cam 22 Diag Posn')
  Comment_Reg(2,60,'Cam 23 Diag Posn')
  Comment_Reg(2,61,'Cam 24 Diag Posn')
  Comment_Reg(2,62,'Cam 25 Diag Posn')
  Comment_Reg(2,63,'Cam 26 Diag Posn')
  Comment_Reg(2,64,'Cam 27 Diag Posn')
  Comment_Reg(2,65,'Cam 28 Diag Posn')
  Comment_Reg(2,66,'Cam 29 Diag Posn')
  Comment_Reg(2,67,'Cam 30 Diag Posn')
  Comment_Reg(2,68,'Cam 31 Diag Posn')
  Comment_Reg(2,69,'Cam 32 Diag Posn')

  Comment_Reg(2,70,'TransFrame Reg 1')
  Comment_Reg(2,71,'TransFrame Reg 2')
  Comment_Reg(2,72,'TransFrame Reg 3')
  Comment_Reg(2,73,'TransFrame Reg 4')
  Comment_Reg(2,74,'TransFrame Reg 5')

  Comment_Reg(2,75,'Zero            ')
  set_pos_reg(75, zero_xyz, status)
  Comment_Reg(2,76,'3DMV Base Frame ')
  Comment_Reg(2,77,'3DMV Visn Offset')
  Comment_Reg(2,78,'3DMV Shiftd Fram')
	
  -- Set Vision Register Comments
  IF (Chk_Feature('R685')) THEN  -- Set this if 2DV Pkg is loaded.  This covers any vision option.  
    Set_S_sVar('$VR[1].$COMMENT','Vis Results For R1 ')
    Set_S_sVar('$VR[2].$COMMENT','Vis Results For R2 ')
    Set_S_sVar('$VR[3].$COMMENT','Vis Results For R3 ')
    Set_S_sVar('$VR[4].$COMMENT','Vis Results For R4 ')
    Set_S_sVar('$VR[5].$COMMENT','Vis Results For R5 ')
    Set_S_sVar('$VR[6].$COMMENT','Vis Results For R6 ')
    Set_S_sVar('$VR[7].$COMMENT','Vis Results For R7 ')
    Set_S_sVar('$VR[8].$COMMENT','Vis Results For R8 ')
    Set_S_sVar('$VR[9].$COMMENT','Style ID Results')
    Set_S_sVar('$VR[10].$COMMENT','Zero')
  ENDIF
	
WriteLog('  Routine initPNTregs in GMPNTRG Completed',FALSE)

END initPNTREGS
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN

Current_Ver = Version -- Set the version for reference

IF UNINIT(ErrsInShop.ErrorsRgstrs) THEN
  ErrsInShop.ErrorsRgstrs = 0
ENDIF
IF UNINIT(PntRG_Setup) THEN
  PntRG_Setup = FALSE
ENDIF

 StrtinErs = ErrsInShop.ErrorsRgstrs -- grab current error count
 ClrUtltyErrs -- Clear all error in utility program to be used when done

 WriteLog('  Starting the Paint Program GMPNTRG', FALSE)

  IF (PntRG_Setup = TRUE) THEN -- setup has already been setup
      WriteLog('  Paint Registers Already Setup', FALSE)
    IF ExecSetupAgn('Paint REGS') THEN -- ask user if they want to setup again
      PntRG_Setup = FALSE
    ELSE
      WriteLog('  Paint Registers already Complete', FALSE)
      WriteLog('  GMPNTRG Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

-- Insert routines created call here
initPNTregs

 ErrsInShop.ErrorsRgstrs =  ErrsInShop.ErrorsRgstrs + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInShop.ErrorsRgstrs -StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('  Paint Program Setup GMPNTRG had ' + int2str((ErrsInShop.ErrorsRgstrs- StrtinErs))+' while executing', TRUE)
 ELSE
   WriteLog('  Paint Register Setup completed', FALSE)
   PntRG_Setup = TRUE
 ENDIF

 WriteLog('', FALSE)

END GMPNTRG
