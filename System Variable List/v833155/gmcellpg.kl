--
--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--    +
--    Program:
--
--    Description: Copied from swwizio4 due to size requirements.
--				   Origional creator L. Steed
--
--    GMCELLPG -- program for loading all unique program that are generic to all applications
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
-------------------------------------------------------------------------------------------------------------
--    Other Application files:
--    GMCELLIO -- program to setup and comment the Cell I/O GMCELLIO is also required to setup workcell interface
--    GMCELLRG -- program for setting registers and position registers comments and default values
--    GMCELLVR -- program for setting variables specific to All application
-------------------------------------------------------------------------------
--    Language: KAREL
--
--    Source File: modified swwCell    11-NOVEMBER-31 01:11PM
--
--    Author: Lloyd Steed
--            Fanuc Robotics North America
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--      2016/11/08 marchaka Reset Num_errors to 0.
--      2016/11/17 marchaka Do not load mov_repr if any part of application is carried SPR.
--                          A specific version of mov_repr needs to get loaded for this app.
--      2016/12/12 marchaka SPR applications now use mov_repr again.
--      2017/01/27 marchaka Add new common programs
--      2017/03/12 marchaka Modifications to support ArcTool
--      2017/03/21 marchaka Load hmiocst for ArcTool
--      2017/03/27 marchaka Add menuedt
--      2018/03/16 marchaka Do not load certain programs if ArcTool
--      2019/10/17 marchaka Do not load mov_repr if it is already loaded as it may have path data.
--      2020/02/18 schoensm Added brakechk.tp and style25.tp for V8.33P09
--      2020/02/25 marchaka Load GM's version of varchg.xml --gmvarchg.xml
--      2020/03/23 marchaka Remove gmfsac from getting loaded.  It gets loaded by rs4cus.fd during 
--                          software installation.
--      2020-09-15 marchaka Load FMD files from /custom/FMD/ folder on GM full load media.  Replace 
--                          the files on FR in their real names.  Replace them on FRS in their real 
--                          names and GM names.  Do not copy FMD files from custom folder if FRVRC.
--                          The custom folder will not be included in FRVRC.
--      2020/10/12 schoensm v8.33p10 added brake check option check to load brakechk.tp
--      2020/11/03 marchaka Only load style 25 if brake check is installed on the robot.
-----------------------------------------------------------------------------
PROGRAM gmcellpg
-----------------------------------------------------------------------------
%ENVIRONMENT ATCLDEF -- required for the $Style_name variables
%ENVIRONMENT mnmcdef -- required for the macro table system variables
%ENVIRONMENT SYSDEF  -- required for the $group[1]. variable
%ENVIRONMENT TPE -- required for the set_attr tp program header
%COMMENT='GM Cell PrgsV4.6'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS

%NOPAUSE = ERROR + COMMAND + TPENABLE
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

%INCLUDE gmcnstnt  -- Constant file for GM
%INCLUDE gmcfgerr  -- has the structures for the error tracking
%INCLUDE gmcfgcel  -- has the workcell variable setting for configuration
%INCLUDE gmcfgspr  -- has SPR variables
%INCLUDE gmcfgfds  -- has FDS variables


CONST
 Version = '2020-11-03'

VAR
  StylTblDone  IN SHADOW :BOOLEAN -- indicates the Style table has already been setup
  CellMacDone  IN SHADOW :BOOLEAN -- indicates the macro table has already been setup
  CellPrgsDone IN SHADOW :BOOLEAN -- indicates teh Cell program file has ran completly succusfully before

  gm_status    : INTEGER
  psve         : INTEGER
  dummy        : INTEGER
  press_shop   : BOOLEAN
--  gpmac_done   : BOOLEAN
  entry,        -- used for the GET_VAR command
  cur_styl_len  : INTEGER -- Used for how large Style table is when it is read
  ans          : INTEGER
  prog_nam     : STRING[12]
  l_stat       : INTEGER
  l_status     : INTEGER
  I            : INTEGER
  num_errors   : INTEGER
  StrtinErs  : INTEGER  -- How many errors I/O error counter had when the program started
  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine

  arc_optn      IN SHADOW FROM GMVARS :BOOLEAN  --ArcTool or LR ArcTool loaded 

%INCLUDE klrdutil
%INCLUDE gmrdutil --GM common routines
ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
ROUTINE arc_loaded FROM gmmain1 --ArcTool option
-------------------------------------------------------------------
ROUTINE Cell_sty_tbl            --
--  Cell style table common settings            --
-------------------------------------------------------------------
VAR
I: INTEGER
l_sty        : STRING[2]
gm_status: INTEGER

BEGIN

  IF StylTblDone = TRUE THEN -- setup has been setup
    WRITE TPERROR(CHR(cc_clear_win),'Style Table has Already Setup')
    IF NOT ExecSetupAgn('Style Table') THEN
      RETURN
    ENDIF
  ENDIF

  WriteLog('  Starting Workcell Cell_sty_tbl Routine Setup', FALSE)

  --Style table array is setup in gmcellvr so that the array is built before
  -- this program executes going to controlled start.

  FOR I = 1 to 34 DO
    l_sty = int_to_strg(I)
    Set_B_sVar('$style_enab[' + l_sty + ']',TRUE)
  ENDFOR

  IF (press_shop = FALSE) AND (Chk_Feature('J951')) THEN --setup for all shops but press and ArcTool
    Set_S_sVar('$style_name[25]','STYLE25')
    Load_File('FRS:','STYLE25.TP',1)
  ENDIF

  Set_S_sVar('$style_name[31]','MOV_REPR')

  Set_S_sVar('$style_name[32]','MOVREPR2')
  Load_File('FRS:','MOVREPR2.TP',0)
  Set_S_sVar('$style_name[33]','MOVREPR3')
  Load_File('FRS:','MOVREPR3.TP',0)
  Set_S_sVar('$style_name[34]','MOVREPR4')
  Load_File('FRS:','MOVREPR4.TP',0)

  Set_S_sVar('$style_comnt[25]','Style 25')
  Set_S_sVar('$style_comnt[26]','Tool Change')
  Set_S_sVar('$style_comnt[27]','Cap Change')
  Set_S_sVar('$style_comnt[28]','Auto Cap Changer')


  Set_S_sVar('$style_comnt[31]','Repair')
  Set_S_sVar('$style_comnt[32]','Repair2')
  Set_S_sVar('$style_comnt[33]','Repair3')
  Set_S_sVar('$style_comnt[34]','Repair4')

  FOR I = 35 to 49 DO
    l_sty = int_to_strg(I)
    Set_S_sVar('$style_comnt[' + l_sty + ']','Reserved')
  ENDFOR

  --Load Standard Programs
  IF (press_shop = FALSE) THEN --load for all shops but press and arctool
    Load_File('FRS:','bypproc1.tp',1)
    Load_File('FRS:','bypproc2.tp',1)
  ENDIF

  WriteLog('  Workcell Cell_sty_tbl Routine Setup Complete', FALSE)

END Cell_sty_tbl

---------------------------------------------------------------------------
ROUTINE load_Cellmac               --
--									 --
-- This Routine re-loads macro's/tp programs for the GM RS4 customization--
-- This Routine will also look to see if Cell Interface is desired.   --
---------------------------------------------------------------------------
VAR
  l_reload	   : INTEGER
  l_status	   : INTEGER
  l_stat           : INTEGER

BEGIN

  IF CellMacDone = TRUE THEN -- setup has been setup
    WRITE TPERROR(CHR(cc_clear_win),'Cell Macro has Already Setup')
    IF NOT ExecSetupAgn('Macro Table') THEN
      RETURN
    ENDIF
  ENDIF

  WriteLog('  Starting Workcell load_CellMac Routine', FALSE)

  -- Must set selected TP program to something other than 1 of the following or
  -- It will NOT load because it is the current program editable on the TP.
  Set_S_sVar('$TP_DEFPROG','PROMPTYN')
  Set_S_sVar('$SHELL_WRK.$ROUT_NAME','')

  --Clear on robot, applications will load if required
  CLEAR('caploss',gm_status)
  CLEAR('ffroptn2',gm_status)
  
  -- Bypass Programs
            -- #, Name to display      program  ,Asgn,A ID, Protect
  Load_File('FRS:','RMBYPASS.TP',1)
  Setup_Macro(199,'ROBOT BYPASS OFF','RMBYPASS', 4, 98, FALSE)
  Load_File('FRS:','BYPASS.TP',1)
  Setup_Macro(200,'RBT AUTO BYPASS '  ,  'BYPASS'  , 4, 99, FALSE)  

  -- Strategic/Global Macros Not Needed for Cell
  CLEAR('STYLE26.TP', gm_status) -- Global Body Tool Changer Macro


  --load on every robot
  Load_File('FRS:','mov_pounce.tp',1)
  Load_File('FRS:','ref_pos_flt.tp',1)
  Load_File('FRS:','hostset.pc',1)
  Load_File('FRS:','gmhstset.pc',1) --sets up host comm settings
  Load_File('FRS:','menuedt.pc',1) --loads program for menu edit webscreens (custolst, custook, custoyn)

  Set_I_sVar('$MACROTABLE[71].$SYS_LEV_MSK',0)
  prog_nam = 'ATPOUNCE'
  CLEAR('ATPOUNCE', gm_status)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','ATPOUNCE.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)  
  Setup_Macro(71,  'AT POUNCE' ,   'ATPOUNCE', 1, 0,TRUE)

  Set_I_sVar('$MACROTABLE[73].$SYS_LEV_MSK',0)
  prog_nam = 'DCD_DROP'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  CLEAR('DCD_DROP', gm_status)
  Set_S_sVar('$macrotable[73].$macro_name','')
  Set_S_sVar('$macrotable[73].$prog_name','')
  Set_I_sVar('$macrotable[73].$assign_type',1)
  Set_I_sVar('$macrotable[73].$assign_id',0)
  Set_I_sVar('$MACROTABLE[73].$SYS_LEV_MSK',0)

  Set_I_sVar('$MACROTABLE[74].$SYS_LEV_MSK',0)
  prog_nam = 'DCD_PICK'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  CLEAR('DCD_PICK', gm_status)
  Set_S_sVar('$macrotable[74].$macro_name','')
  Set_S_sVar('$macrotable[74].$prog_name','')
  Set_I_sVar('$macrotable[74].$assign_type',1)
  Set_I_sVar('$macrotable[74].$assign_id',0)
  Set_I_sVar('$MACROTABLE[74].$SYS_LEV_MSK',0)

  CLEAR('TEMPLA01',gm_status)
  CLEAR('TEMPLA02',gm_status)
  CLEAR('TEMPLA03',gm_status)
  CLEAR('TEMPLA04',gm_status)
  CLEAR('TEMPLA05',gm_status)
  CLEAR('TEMPLA06',gm_status)
  CLEAR('TEMPLA07',gm_status)
  CLEAR('TEMPLA08',gm_status)
  CLEAR('TEMPLA09',gm_status)
  CLEAR('TEMPLA10',gm_status)
  CLEAR('TEMPLA11',gm_status)
  CLEAR('TEMPLA12',gm_status)
  CLEAR('TEMPLA13',gm_status)
  CLEAR('TEMPLA14',gm_status)
  CLEAR('TEMPLA15',gm_status)
  CLEAR('TEMPLA16',gm_status)
  CLEAR('TEMPLA17',gm_status)
  CLEAR('TEMPLA18',gm_status)
  CLEAR('TEMPLA19',gm_status)
  CLEAR('TEMPLA20',gm_status)
  CLEAR('TEMPLA21',gm_status)
  CLEAR('TEMPLA22',gm_status)
  CLEAR('TEMPLA23',gm_status)

  CLEAR('TEMPLA26',gm_status)
  CLEAR('TEMPLA27',gm_status)
  CLEAR('TEMPLA28',gm_status)
  CLEAR('TEMPLA29',gm_status)
  CLEAR('TEMPLA30',gm_status)

  CLEAR('TEMPLA31',gm_status)
  CLEAR('TEMPLA32',gm_status)
  CLEAR('TEMPLA33',gm_status)
  CLEAR('TEMPLA34',gm_status)
  CLEAR('TEMPLA35',gm_status)

  CLEAR('CLR_ADC',gm_status)

  prog_nam = 'HOMFRPON'
  Set_I_sVar('$MACROTABLE[8].$SYS_LEV_MSK',0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  CLEAR('HOMFRPON',gm_status)

  CLEAR('REPAIR',gm_status)

  prog_nam = 'MOV_HOME'
  Set_I_sVar('$MACROTABLE[9].$SYS_LEV_MSK',0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  CLEAR('MOV_HOME',gm_status)

  -- Standard TP loads
  -- Load additional macro's
  IF (arc_optn = FALSE) THEN  --SpotTool only
    Load_File('FRS:','HOME_IO.TP',1)
  ENDIF

  Load_File('FRS:','ABORTIT.TP',1)
  Load_File('FRS:','BODYHMIO.TP',1)
  Load_File('FRS:','BRKCHECK.PC',1)
  Load_File('FRS:','CUSTOLST.PC',1)
  Load_File('FRS:','CUSTOYN.PC',1)
  Load_File('FRS:','HOMFRPON.TP',0)
  Load_File('FRS:','POSTREPR.TP',1)
  Load_File('FRS:','PRE_REPR.TP',1)
  Load_File('FRS:','HOMTOPRC.TP',1)
  Load_File('FRS:','PRCTOHOM.TP',1)
  Load_File('FRS:', 'displaypage.tp',1)
  
  IF Chk_Feature('J951') THEN --Brake Check Option
    Load_File('FRS:','BRAKECHK.TP',1)  --v8.33p10 check for brake check option
  ENDIF

  --Load common PC
  Load_File('FRS:', 'disppage.pc',1)

  -- Prompt Box Mac's
  Load_File('FRS:','REQMENU.TP',1)
  Setup_Macro(113,'Request Menu'    ,    'REQMENU', 1, 0, TRUE)
  Load_File('FRS:','PROMPTYN.TP',1)
  Setup_Macro(114,'Prompt Box YN',       'PROMPTYN', 1, 0, TRUE)
  Load_File('FRS:','PROMPTOK.TP',1)
  Setup_Macro(115,'Prompt Box Msg'  ,    'PROMPTOK', 1, 0, TRUE)
  Load_File('FRS:','LISTMENU.TP',1)
  Setup_Macro(116,'List Menu'    ,       'LISTMENU', 1, 0, TRUE)
  Load_File('FRS:','STATPAGE.TP',1)
  Setup_Macro(117,'Status Menu'     ,    'STATPAGE' , 1, 0, TRUE)
  Load_File('FRS:','OPERMENU.TP',1)
  Setup_Macro(118,'Op. Entry Menu'  ,    'OPERMENU', 1, 0, TRUE)
  CLEAR('MENUTEST.TP', gm_status)

  IF (arc_optn = FALSE) THEN  --SpotTool
    Setup_Macro(10,  'HOME I/O' ,   'HOME_IO', 1, 0,TRUE)
  ENDIF

  Load_File('FRS:','MOV_HOME.TP',1)
  Setup_Macro(9, 'MOVE TO HOME'     ,   'MOV_HOME', 4, 1,FALSE)

  Load_File('FRS:','INV_ROUT.TP',1)
  Setup_Macro(78, 'INVALID ROUTINE'   ,   'INV_ROUT', 1, 0,TRUE)

  Load_File('FRS:','ECHOOPTN.TP',1)
  Setup_Macro(125,'ECHO OPTION'    ,     'ECHOOPTN', 1, 0, TRUE)
  prog_nam = 'echooptn'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)

  IF (press_shop = FALSE) THEN --load for all shops but press and ArcTool
    Load_File('FRS:','POUNCE.TP',0)
    IF (arc_optn = TRUE) THEN  --ArcTool
      Load_File('FRS:','HMIOCST.TP',1)
    ELSE  --SpotTool
      IF ((numsprctrl = 0) AND (numfdsctrl = 0)) THEN --If not SPR and FDS
        Load_File('FRS:','HMIOCST.TP',1)
      ENDIF  --not SPR and FDS
    ENDIF  --ArcTool
  ENDIF --load for all shops but press and ArcTool
    
  prog_nam = 'entrizon'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  CLEAR('ENTRIZON', gm_status)
  Set_I_sVar('$MACROTABLE[94].$SYS_LEV_MSK',0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','ENTRIZON.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)  
  Setup_Macro(94,  'ENTER I-ZONE' ,   'ENTRIZON', 1, 0,TRUE)

  prog_nam = 'exitizon'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  CLEAR('EXITIZON', gm_status)
  Set_I_sVar('$MACROTABLE[95].$SYS_LEV_MSK', 0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','EXITIZON.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(95,  'EXIT I-ZONE' ,   'EXITIZON', 1, 0,TRUE)

  IF (arc_optn = FALSE) THEN  --SpotTool
    prog_nam = 'home_io'
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    CLEAR('HOME_IO', gm_status)
    Set_I_sVar('$MACROTABLE[10].$SYS_LEV_MSK', 0)
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    Load_File('FRS:','HOME_IO.TP',1) -- Must relaod standard macro
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
    Setup_Macro(10,  'HOME I/O' ,   'HOME_IO', 1, 0,TRUE)
  ENDIF
 
  IF (Chk_loaded('mov_repr')) THEN --program is loaded, do not do anything

  ELSE --program not loaded, can load and set it up
    prog_nam = 'mov_repr'
    SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
    CLEAR('MOV_REPR', gm_status)
    Load_File('FRS:','MOV_REPR.TP',0)
  ENDIF

  prog_nam = 'req_cont'
  CLEAR('REQ_CONT', gm_status)
  Set_I_sVar('$MACROTABLE[75].$SYS_LEV_MSK', 0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','REQ_CONT.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(75,  'REQUEST CONTINUE' ,   'REQ_CONT', 1, 0,TRUE)

  prog_nam = 'set_segm'
  CLEAR('SET_SEGM', gm_status)
  Set_I_sVar('$MACROTABLE[76].$SYS_LEV_MSK',0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','SET_SEGM.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(76,  'SET SEGMENT' ,   'SET_SEGM', 1, 0,TRUE)

  --GM wants req_erly, they don't want req_erly.....
  --LOAD('FRS:REQ_ERLY.TP',1,gm_status) -- Must relaod standard macro
  --define_macro(77,  'REQUEST EARLY' ,   'REQ_ERLY', 1, 0,3)

  -- Spot
  prog_nam = 'rst_stp'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  prog_nam = 'rst_stpr'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  prog_nam = 'rst_wtr'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  prog_nam = 'wtr_off'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)

  WriteLog('  Workcell load_CellMac Routine Setup Complete', FALSE)

END load_Cellmac
---------------------------------------------------------------------------
ROUTINE load_other               
--This routine loads files that are not TP programs.
---------------------------------------------------------------------------
BEGIN

  --Load GM's version of varchg.xml on FR.
  copyFile('FRSU:gmvarchg.xml','FR:varchg.xml')


END load_other
---------------------------------------------------------------------------
ROUTINE fmd_load              
--This routine copies FMD files from the /custom/fmd/ folder on the full
--load media onto FR.  It also copies the files to FRS in their original names
--and in their GM names.  This routine is executed during install (gminstal and
--gmainstall) and auto update (gmautoup).
---------------------------------------------------------------------------
VAR
cur_dev:  STRING[10]
start_dev:  STRING[40]
cur_path:  STRING[40]
start_path:  STRING[40]
from_path:  STRING[40]
virt_rbt:  BOOLEAN
x:  INTEGER

BEGIN

  -- Added below because Loading files at controlled start, if a file needs
  -- Convert and Saved, this variable needs to be set Judy Evans Helped solve this
  Set_B_sVar('$karel_cfg.$conv_ctrl', TRUE)

  --set device
  GET_VAR(entry, '*SYSTEM*' , '$device', cur_dev, gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, '[*SYSTEM*].$DEVICE FAILED', gm_status, 0) --
    ELSE -- was good, go get original setup to use to set back after done laoding
      GET_VAR(entry, '*SYSTEM*' , '$device', start_dev, gm_status)
      IF (gm_status <> 0) THEN
        POST_ERR(38000, '[*SYSTEM*].$DEVICE FAILED', gm_status, 0) --
      ENDIF
    ENDIF

    IF UNINIT(cur_dev) THEN -- could be bad if above failed
      cur_dev = 'UD1:'
    ENDIF

  -- go get the path to load from
  GET_VAR(entry, '*SYSTEM*' , '$dev_path', cur_path, gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, '[*SYSTEM*].$DEV_PATH FAILED', gm_status, 0) --
    ELSE -- if was successful get it again for setting back when all done
      GET_VAR(entry, '*SYSTEM*' , '$dev_path', start_path, gm_status)
      IF (gm_status <> 0) THEN
        POST_ERR(38000, '[*SYSTEM*].$DEV_PATH FAILED', gm_status, 0) --
      ENDIF
    ENDIF

    IF UNINIT(cur_path) THEN
      cur_path = '\'
    ENDIF

  --Dan Merchant informed must be MED for RobobGuide to Work loading files
  from_path = 'MED:\custom\fmd\' --location of FMD files on full load media

  GET_VAR(entry, '*SYSTEM*', '$VIRTUALTIME', x, gm_status)
  IF (gm_status <> 0) THEN
    -- var does not exist, must be real controller environment
    virt_rbt = FALSE
  ELSE
    -- var exists, must be pc (virtual) environment
    virt_rbt = TRUE
  ENDIF 

  IF (virt_rbt = FALSE) THEN --custom folder will not be in FRVRC
                             --do not attempt to copy from it 

    --copy files to FR
    copyFile(from_path +'kvareeg.dt', 'FR:\kvareeg.dt')
    copyFile(from_path +'posreeg.dt', 'FR:\posreeg.dt')
    copyFile(from_path +'regeeg.dt', 'FR:\regeeg.dt')
    copyFile(from_path +'svareeg.dt', 'FR:\svareeg.dt')
    copyFile(from_path +'tplineeg.dt', 'FR:\tplineeg.dt')

    --copy files to FRS
    copyFile(from_path +'kvareeg.dt', 'FRS:\kvareeg.dt')
    copyFile(from_path +'posreeg.dt', 'FRS:\posreeg.dt')
    copyFile(from_path +'regeeg.dt', 'FRS:\regeeg.dt')
    copyFile(from_path +'svareeg.dt', 'FRS:\svareeg.dt')
    copyFile(from_path +'tplineeg.dt', 'FRS:\tplineeg.dt')

    copyFile(from_path +'kvareeg.dt', 'FRS:\gmkvareeg.dt')
    copyFile(from_path +'posreeg.dt', 'FRS:\gmposreeg.dt')
    copyFile(from_path +'regeeg.dt', 'FRS:\gmregeeg.dt')
    copyFile(from_path +'svareeg.dt', 'FRS:\gmsvareeg.dt')
    copyFile(from_path +'tplineeg.dt', 'FRS:\gmtplineeg.dt')

  ENDIF --not virtual robot

  Set_B_sVar('$karel_cfg.$conv_ctrl', FALSE)
  
  --set the Device back to FR: THIS MAY HAVE TO CHANGE for TPU????  --done in gmptload process
  IF UNINIT(start_dev) THEN
    POST_ERR(38000, 'GM fmd_load had to set start_dev', 0, 0) --
    start_dev = 'UD1:'
  ENDIF

  Set_S_sVar('$DEVICE', start_dev)

  IF UNINIT(start_path) THEN
    POST_ERR(38000, 'GM fmd_load had to set start_path', 0, 0) --
    start_path = '\'
  ENDIF

  Set_S_sVar('$dev_path', start_path)

  POST_ERR(38000, 'GM FMD Loaded '+from_path, 0, 0) --

END fmd_load
---------------------------------------------------------------------------
ROUTINE set_cellpg
---------------------------------------------------------------------------
BEGIN

  IF UNINIT(arc_optn) THEN --ArcTool
    arc_loaded
  ENDIF

  IF (arc_optn = FALSE) THEN --SpotTool
    IF (mfg_area <> mfg_area_ps) THEN  --check if press shop
      press_shop = FALSE
    ELSE --press shop
      press_shop = TRUE
    ENDIF
  ELSE  --ArcTool
    press_shop = FALSE  --no shops in Arc, therefore FALSE
  ENDIF

  IF UNINIT(ErrsInCell.ErrorsPrgrms) THEN
    ErrsInCell.ErrorsPrgrms = 0
  ENDIF
  IF UNINIT(Reset_Cell) THEN
    Reset_Cell = FALSE
  ENDIF
  IF UNINIT(StylTblDone) OR (Reset_Cell) THEN
    StylTblDone = FALSE
  ENDIF
  IF UNINIT(CellMacDone) OR (Reset_Cell) THEN
    CellMacDone = FALSE
  ENDIF
  IF UNINIT(CellPrgsDone) OR (Reset_Cell) THEN
    CellPrgsDone = FALSE
  ENDIF

  num_errors = 0  --Reset number of execution errors to 0

  WriteLog('Starting the Workcell Set_CellPG Routine in GMCELLPG Program ', FALSE)

  Current_Ver = Version -- Set the version for reference

  StrtinErs = ErrsInShop.ErrorsPrgrms -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  IF (CellPrgsDone = TRUE) THEN -- setup has already been setup
    WriteLog('  Cell Programs Already Setup', FALSE)
    IF ExecSetupAgn('Cell Programs') THEN -- ask user if they want to setup again
      CellPrgsDone = FALSE
    ELSE
      WriteLog('  Cell Programs already Complete', FALSE)
      WriteLog('  GMCELLPG Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  load_Cellmac -- call macro setup

  Cell_sty_tbl -- call style table setup

  load_other --load other types of files

 ErrsInCell.ErrorsPrgrms =  ErrsInCell.ErrorsPrgrms + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInCell.ErrorsPrgrms -StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('  Workcell Program GMCELLPG had ' + int2str((ErrsInCell.ErrorsPrgrms- StrtinErs))+' errors', TRUE)
 ELSE
   WriteLog('  GMCELLRG Setup Succesfully', FALSE)
   CellPrgsDone = TRUE
 ENDIF

 WriteLog('Workcell Set_CellPG Routine in GMCELLPG Program Completed ', FALSE)
 WriteLog('', FALSE) -- add space in log to make easier to read

END set_cellpg
---------------------------------------------------------------------------
BEGIN

set_cellpg

END gmcellpg





















