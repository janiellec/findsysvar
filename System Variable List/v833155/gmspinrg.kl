--
--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--    +
--    Program:
--
--    Description: .
--
--    GMSPINRG -- program for setting registers and position registers comments and default values
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
-------------------------------------------------------------------------------------------------------------
--    Other Application files:
--    GMSPINIO -- program to setup and comment the Cell I/O GMCELLIO is also required to setup workcell interface
--    GMSPINPG -- program for loading all unique program that are specific to Cell applications
--    GMSPINVR -- program for setting variables specific to Cell application
-------------------------------------------------------------------------------
--    Language: KAREL
--
--
--    Modification history:
--    10/10/18  R.Kosaski updated setup the Pun Data String Registers
--
-----------------------------------------------------------------------------
PROGRAM GMSPINRG
-----------------------------------------------------------------------------
%COMMENT = 'Press Regs V4.0'
%ALPHABETIZE
%NOLOCKGROUP
%INVISIBLE
%RWACCESS

%ENVIRONMENT REGOPE -- required for register builtins
%ENVIRONMENT proddef -- Required for the $FEATURE.$MOD[i] variable

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the constants
CONST

Version = '2018-10-10 RK'
%INCLUDE gmcnstnt -- used for all GM wizard constants

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs  : INTEGER  -- How many errors I/O error counter had when the program started

  gm_status    : INTEGER
  i       : INTEGER

SpinRegsDone IN SHADOW FROM GMSPINRG: BOOLEAN -- if the registers has ran completly

  -- From other programs
-- Variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

-- Variables declares for Shop specifics
%INCLUDE gmcfgvis  -- GM wizard variables for Vision Applications -- Needed for USE_SPIN_TOP

%INCLUDE gmrdutil -- has all GM common wizard routine in it

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
------------------------------------------------------------------------------


-----------------------------------------------------------------------------
ROUTINE ChkRegInit
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(CellCommType) THEN
  CellCommType = Ethernet
ENDIF

  RETURN
END ChkRegInit
-------------------------------------------------------------------
ROUTINE set_spin_reg            --
-- This routine's function is to set all Cell register comments.--
-------------------------------------------------------------------
BEGIN

ChkRegInit
  -- PR Comments
  -- Comment_Reg(RegType,Reg#,Comment)
   WriteLog('   SpinTop set_spin_reg Routine Started', FALSE)

    -- Setup the Registers for the SpinTop  40-50
      -- Register Comments
      Comment_Reg(1,38,'SpinTop Seg Num')
      Comment_Reg(1,39,'SpinTop Flag Reg')
      Comment_Reg(1,40,'S.T.Control Plan')
      SET_INT_REG(40,1,gm_status)

      Comment_Reg(1,41,'S.T. Auto Angle')
      Comment_Reg(1,42,'S.T.Comm.Delay')
      SET_REAL_REG(42,.1,gm_status)
      Comment_Reg(1,43,'S.T.Freeze MSEC.')
      Comment_Reg(1,44,'S.T.OverideAngle')
      Comment_Reg(1,45,'S.T.PathLearning')
      SET_INT_REG(45,0,gm_status)

      Comment_Reg(1,46,'Reserved SpinTop')
      Comment_Reg(1,47,'FixMode Train =1')
      Comment_Reg(1,48,'ST1=Fixed 2=Auto')
      SET_INT_REG(48,2,gm_status)-- set default to Auto for operation
      Comment_Reg(1,49,'FixMode SyncTime')

      Comment_Reg(3,2,'P.U.N. from PLC')  -- set the PUN comment for GMPUNDTA program
      Comment_Reg(3,3,'P.U.N. from VMT')  -- set the comment for recieving program

   WriteLog('   SpinTop set_spin_reg Routine Completed', FALSE)

END set_spin_reg
-------------------------------------------------------------------------------
--  ****************** Main Program *****************************************--
-------------------------------------------------------------------------------
BEGIN

Current_Ver = Version -- Set the version for reference
-- Check these here instead of a routine so can return to calling routine
IF UNINIT(Use_Spin_Top) THEN
  POST_ERR(38000, 'Use_Spin_Top not setup in GMSPINRG program', 0, 0) --
  RETURN
ENDIF

IF UNINIT(ErrsInShop.ErrorsRgstrs) THEN
  ErrsInShop.ErrorsRgstrs = 0
ENDIF
IF UNINIT(SpinRegsDone) THEN
  SpinRegsDone = FALSE
ENDIF

   WriteLog(' SpinTop GMSPINRG Program started', FALSE)

  IF (SpinRegsDone = TRUE) THEN -- setup has already been setup
      WriteLog('  SpinTop REGISTERS Already Setup', FALSE)
    IF ExecSetupAgn('SpinTop REGISTERS') THEN -- ask user if they want to setup again
      SpinRegsDone = FALSE
    ELSE
      WriteLog('  SpinTop REGISTERS already Complete', FALSE)
      WriteLog('  GMSPINRG Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

 StrtinErs = ErrsInShop.ErrorsRgstrs

 ClrUtltyErrs -- Clear all errors in utility program to be used when done

 set_spin_reg -- setup all the SpinTop registers

  -- Get all errors in utility program that was used to any program errors
 ErrsInShop.ErrorsRgstrs = ErrsInShop.ErrorsRgstrs +  (AddUtltyErrs)

 IF (ErrsInShop.ErrorsRgstrs - StrtinErs) > 0 THEN -- check for I/O setup errors
   POST_ERR(38000, 'GMSPINRG had '+int2str((ErrsInShop.ErrorsRgstrs - StrtinErs))+' Errors while executing',0, 0) --
   WriteLog('  SpinTop Register setup,GMSPINPG had ' + int2str((ErrsInShop.ErrorsRgstrs-StrtinErs))+' Errors', TRUE)
 ELSE
   WriteLog(' SpinTop Register setup Program completed', FALSE)
   SpinRegsDone = TRUE
 ENDIF

END GMSPINRG

