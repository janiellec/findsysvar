--    This material is the joint property of GM/Fanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GM/Fanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GM/Fanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GM/Fanuc Robotics Corporation
--
--    Program: gmbodysh.kl
--
--    Description: This a utility program used at controlled start to load
--                 specific programs; and set specific variables by running the
--                 wizard. It shall be included as a utility option in the FD
--                 program for updates.
-----------------------------------------------------------------------------
--    ROUTINES INCLUDED
--    Press_set    Bodyshop Wizard Setup File
-----------------------------------------------------------------------------
--
--    Program Name: gmbodysh.kl
--
--    Language: KAREL
--
--    Modification history:
--       2016/10/14 marchaka Moved setup routine calls from gmmain1 into gmbodysh
--       2017/01/25 marchaka Add call to bodyshop_reg to setup bodyshop specific
--                           registers.  Add call to set_spotio3.
--
-----------------------------------------------------------------------------
PROGRAM gmbodysh
-----------------------------------------------------------------------------
%ALPHABETIZE

%COMMENT = 'Bodyshop Setup V4.1'
%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE klevkmsk
%INCLUDE klevkeys
%INCLUDE kliotyps
%INCLUDE KLEVCCDF

%INCLUDE gmcfgcel  --  GM wizard variables that are common across all shops
%INCLUDE gmcfgerr  --  Required for the configuration of GM Error counting and logging
%INCLUDE gmcfgbdy  -- GM wizard variables for body shop Applications
%INCLUDE gmcfgstd  -- GM wizard variables for Stud Applications
%INCLUDE gmcfgfds  -- GM wizard variables for FDS Applications
%INCLUDE gmcfgspr  -- GM wizard variables for SPR Applications
%INCLUDE gmcfgspt  -- GM wizard variables for spot applications
%INCLUDE gmcfgpjw  -- GM wizard variables for projection weld applications
%INCLUDE gmcfgdmp  -- GM wizard variables for dimpler applications
%INCLUDE gmcfgmh   --  GM wizard variables for MH applications
%INCLUDE gmcfgtlc  --  GM wizard variables for TC applications
%INCLUDE gmcfgvis  --  GM wizard variables for vision applications
%INCLUDE gmcfgdsp  --  GM wizard variables for dispense applications

CONST

  -- Version
  Version = 'GM Bodyshop 2017-01-25' -- Please change version when you make an update
  %INCLUDE gmcnstnt -- used for GM constants

%INCLUDE klrdutil
%INCLUDE gmrdutil -- has all the builtin routines i.e. Int2str, was GMUTILTY

ROUTINE body_app_wiz FROM gmwizbsh

ROUTINE set_spot_var FROM gmspotvr --setup spottool variables
ROUTINE set_spotvar2 FROM gmspotvr2 --setup servo gun variables 
ROUTINE set_spot_io FROM gmspotio --setup spot I/O 
ROUTINE set_spotio2 FROM gmspotio2 --setup spot I/O
ROUTINE set_spot_pg FROM gmspotpg --setup spot programs
ROUTINE set_spot_reg FROM gmspotrg  --setup spot registers  
ROUTINE set_spotio3 FROM gmspotio3 --setup spot I/O
 
ROUTINE set_stud_var FROM gmstudvr --sets stud parameters  
ROUTINE set_stud_IO  FROM gmstudio --sets stud parameters 
ROUTINE set_stud_pg  FROM gmstudpg --sets stud parameters 
ROUTINE set_stud_reg FROM gmstudrg --sets stud parameters 
 
ROUTINE set_fds_var FROM gmfdsvr --sets FDS parameters  
ROUTINE set_fds_IO  FROM gmfdsio --sets FDS parameters 
ROUTINE set_fds_pg  FROM gmfdspg --sets FDS parameters 
ROUTINE set_fds_reg FROM gmfdsrg --sets FDS parameters 
 
ROUTINE set_spr_var FROM gmsprvr --sets SPR parameters  
ROUTINE set_spr_IO  FROM gmsprio --sets SPR parameters 
ROUTINE set_spr_pg  FROM gmsprpg --sets SPR parameters 
ROUTINE set_spr_reg FROM gmsprrg --sets SPR parameters 

ROUTINE set_proj_var FROM gmprojvr --sets projection weld parameters
ROUTINE set_proj_io  FROM gmprojio --sets projection weld parameters
ROUTINE set_projio2  FROM gmprojio2 --sets projection weld parameters
ROUTINE set_proj_pg  FROM gmprojpg --sets projection weld parameters
ROUTINE set_proj_rg  FROM gmprojrg --sets projeciton weld parameters

ROUTINE set_dimp_var FROM gmdimpvr --sets dimpler parameters
ROUTINE set_dimp_io  FROM gmdimpio --sets dimpler parameters
ROUTINE set_dimp_pg  FROM gmdimppg --sets dimpler parameters
ROUTINE set_dimp_rg  FROM gmdimprg --sets dimpler parameters

ROUTINE set_disp_IO FROM gmdispio
ROUTINE initDISPVARS FROM gmdispvr
ROUTINE set_disp_pg FROM gmdisppg

ROUTINE bodyshop_reg FROM gmbodyrg --sets bodyshop registers

-----------------------------------------------------------------------------
ROUTINE body_config
-- PURPOSE: This routine is called from the main wizard when the user has Selected
--          GM Bodyshop as the Shop. 
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:  GMWIZARD program from the RUN_CONFIG routine.
--
-----------------------------------------------------------------------------
BEGIN

  body_app_wiz  --run body shop wizard questions

END body_config
-----------------------------------------------------------------------------
ROUTINE set_bodyshop
-- PURPOSE: This routine is called from the gmmain1.  It calls all the bodyshop
--          application setup routines
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:  
--
-----------------------------------------------------------------------------
BEGIN

--Common bodyshop setup
  IF (Chk_loaded('gmbodyrg')) THEN
    bodyshop_reg --set bodyshop registers
  ELSE
    ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
  ENDIF 

--MH application setup
  IF Use_MH_Tool THEN  -- if user confiqured MH stuff
    IF NOT (CallThisProg('gmmhvars')) THEN  ErrsInShop.ErrorsVarbls = ErrsInShop.ErrorsVarbls+1; ENDIF  --sets MH variables
    IF NOT (CallThisProg('gmmhgpio')) THEN  ErrsInShop.ErrorsIOCom  = ErrsInShop.ErrorsIOCom+1; ENDIF  --sets MH I/O
    IF NOT (CallThisProg('gmmhprgs')) THEN  ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1; ENDIF --sets MH programs
    IF NOT (CallThisProg('gmmhregs')) THEN  ErrsInShop.ErrorsRgstrs = ErrsInShop.ErrorsRgstrs+1; ENDIF --sets MH registers
  ENDIF

--Tool changer application setup
  IF UseToolChngr THEN -- if user configured TC stuff
    IF NOT (CallThisProg('gmtlchio')) THEN ErrsInCell.ErrorsPrgrms  = ErrsInCell.ErrorsPrgrms+1; ENDIF --sets up the tool changer
  ENDIF

--Vision applicaiton setup
  IF Use_Vision THEN   -- If user configured vision stuff
    IF NOT (CallThisProg('gmvisvar')) THEN  ErrsInShop.ErrorsVarbls = ErrsInShop.ErrorsVarbls+1; ENDIF --sets Vision variables
    IF NOT (CallThisProg('gmvisnio')) THEN  ErrsInShop.ErrorsIOCom  = ErrsInShop.ErrorsIOCom +1; ENDIF --sets Vision I/O
    IF NOT (CallThisProg('gmvisprg')) THEN  ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1; ENDIF --sets Vision programs
    IF NOT (CallThisProg('gmvisreg')) THEN  ErrsInShop.ErrorsRgstrs = ErrsInShop.ErrorsRgstrs+1; ENDIF --sets Vision registers
  ENDIF


--****************************
--IMPORTANT!!!!
--
--Spot weld application setup does not account for configuring the number of equipment, etc. for combos.
--  This is handled in the spottool configuration for the second process.
--  Therefore, the routines below are called out in an order that will support this functionality.
--  It is important that spot weld applications are always called first, then projection weld applicaition setup,
--  then stud setup.  This follows GM's Global 4 specification for spottool equipment order of precedence.  
--
-- DO NOT MODIFY THE ORDER IN WHICH THE APPLICATION CONFIGURATION IS CALLED!!
--***************************

--Spot welding applicaiton setup
  IF (numwldctrl <> 0) THEN --spot application
    IF (Chk_loaded('gmspotvr')) THEN
      set_spot_var --set spottool variables 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF   
    IF (Chk_loaded('gmspotvr2')) THEN
      set_spotvar2  --set servo gun variables
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF     
    IF (Chk_loaded('gmspotio')) THEN
      set_spot_io --setup spot I/O 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF  
    IF (Chk_loaded('gmspotio2')) THEN
      set_spotio2 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
    IF (Chk_loaded('gmspotio3')) THEN
      set_spotio3
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
    IF (Chk_loaded('gmspotpg')) THEN
      set_spot_pg --spot programs 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmspotrg')) THEN
      set_spot_reg --setup spot registers 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
  ENDIF

--Projection welding application setup
  IF (numprojctrl<>0) THEN --projection weld application selected
    IF (Chk_loaded('gmprojvr')) THEN
      set_proj_var --set projection weld variables 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
    IF (Chk_loaded('gmprojio')) THEN
      set_proj_io --setup projection weld I/O 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmprojio2')) THEN
      set_projio2 --setup projection weld I/O 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmprojpg')) THEN
      set_proj_pg --projection weld programs 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmprojrg')) THEN
      set_proj_rg --setup projection weld registers 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
  ENDIF --projection weld application

--Stud welding application setup
  IF (numstudctrl<>0) THEN --studs application selected
    IF (Chk_loaded('gmstudvr')) THEN
      set_stud_var  --sets stud parameters 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
    IF (Chk_loaded('gmstudio')) THEN
      set_stud_IO  --sets stud parameters 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF  
    IF (Chk_loaded('gmstudpg')) THEN
      set_stud_pg  --sets stud parameters 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmstudrg')) THEN
      set_stud_reg  --sets stud parameters 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
  ENDIF

--Dimpler application setup
  IF (numdimpctrl<>0) THEN --dimpler application selected
    IF (Chk_loaded('gmdimpvr')) THEN
      set_dimp_var --set dimpler variables 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
    IF (Chk_loaded('gmdimpio')) THEN
      set_dimp_io --setup dimpler I/O 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF  
    IF (Chk_loaded('gmdimppg')) THEN
      set_dimp_pg --dimpler programs 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmdimprg')) THEN
      set_dimp_rg --setup dimpler registers 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
  ENDIF --dimpler application

--Dispense application setup
  IF (numdispctrl <> 0) THEN --dispense application
    IF (Chk_loaded('gmdispvr')) THEN
      initDISPVARS      --set dispense equipment, need to do here for repower
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
    IF (Chk_loaded('gmdispio')) THEN
      set_disp_IO       --sets dispense I/O
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
    IF (Chk_loaded('gmdisppg')) THEN
      set_disp_pg       --loads tp's for dispense
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF
  ENDIF

--SPR application setup
  IF (numsprctrl<>0) THEN --SPR application selected
    IF (Chk_loaded('gmsprvr')) THEN
      set_spr_var 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
    IF (Chk_loaded('gmsprio')) THEN
      set_spr_IO 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF  
    IF (Chk_loaded('gmsprpg')) THEN
      set_spr_pg  
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmsprrg')) THEN
      set_spr_reg 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
  ENDIF

--FDS application setup
  IF (numfdsctrl<>0) THEN --FDS application selected
    IF (Chk_loaded('gmfdsvr')) THEN
      set_fds_var 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
    IF (Chk_loaded('gmfdsio')) THEN
      set_fds_IO 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF  
    IF (Chk_loaded('gmfdspg')) THEN
      set_fds_pg  
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF 
    IF (Chk_loaded('gmfdsrg')) THEN
      set_fds_reg 
    ELSE
      ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
    ENDIF        
  ENDIF

END set_bodyshop
-----------------------------------------------------------------------------
ROUTINE body_dsply
-- PURPOSE: this program is call for diisplaying the current configuration
--          this is used as a display only and changes are made using the
--          wizard. this program will be called from a case select in GMWIZARD
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
--VAR

BEGIN

  RETURN
END body_dsply
-----------------------------------------------------------------------------
ROUTINE body_setup
-- PURPOSE: This routine will setup and execute the program files based on how
-- the user has configured the setup. When this routine is called, the Main Cell
-- interface has been already set by the Main cell wizard. 
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY: this routine is call from the Main GM Global Wizard.
--
--
-----------------------------------------------------------------------------
BEGIN

END body_setup
------------------------------------------------------------------------------------------------

BEGIN

END gmbodysh
