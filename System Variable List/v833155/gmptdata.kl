-- -----------------------------------------------------------------------
--
--   MODULE: GMPT Data.kl
--   TITLE:  Powertrain Setup Menu
--
--   WRITTEN BY:     Randy Kosaski
--   REVISION DATE:  03/6/2016
--
--   LANGUAGE:       KAREL 8.33
--   CONTROL GROUP:  General Motor Global Center
--
--   ORDER NUMBER:   GM Global Center
--   PROJECT NAME:
--
--
--   COPYRIGHT:     Fanuc Robotics America, Inc. retains rights in any
--                  and all Software contained in the material attached
--                  hereto and said Software may not be copied
--                  reproduced without the written permission Fanuc
--                  Robotics America, Inc..
--
--                  All Software, (C) Copyright Fanuc Robotics
--                  America, Inc., 2016
--
--         DESCRIPTION: This program controls the screens for setting up
--                      the fixture grouping.  There are two screens
--                      one for the insert data, one for inspection
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  -------------  --------------------
--
--------------------------------------------------------------------------
PROGRAM GMPTDATA

%SYSTEM
--%INVISIBLE
                --*****************************************************************
%NOABORT = ERROR + COMMAND-- *** REMOVE COMMENT FOR PRODUCTION NEED TO IGNORE ABORT
                --*****************************************************************
%NOPAUSE = ERROR + COMMAND + TPENABLE
%NOBUSYLAMP
%NOLOCKGROUP
%PRIORITY=100
%NOPAUSESHFT
%ALPHABETIZE
%COMMENT = 'GMPT Setup'
%INCLUDE klevksp  -- TPMM KAREL softpart loader. and the device_stat and tpdc_tp_c
%INCLUDE klevkmsk
%INCLUDE kliosop
%INCLUDE KLIOTYPS -- used for the GET_PORT_CMT builting for the port types


 CONST

  dly_time    = 4500    --time to keep messages up for
  dict_name   = 'GMPT'  --dictionary name for clear data
  max_col_wid = 16      --max column width in schedule
  update_only = 4
  ver = '02/17/18'      -- REV. A
  Contr_State = 1 -- read from $SYS_CONFIG.$STARTMD 1 = Controlled Start
  Cold_State  = 2 -- read from $SYS_CONFIG.$STARTMD 2 = Cold Start

VAR
-- below is used for builtins
pop_index, -- used in teh PUSH_KEY_RD

rack_no,
slot_no,
phy_PortType,
phy_port_no,
n_ports : INTEGER

WizRanTime IN CMOS : INTEGER -- Used for the Time the Wizard was Ran by user

oldscreen  IN CMOS : STRING[16] -- the screen active when started

 -- structure data must be in this program for the ACT_FORM or UNKNOWN variable error occurs
 -- i.e. if FROM progname is used 5/5/03
unlocked,
loaded, -- used for the return from builtin PROG_STATUS if TRUE program is loaded
initialized,-- used for the return from builtin PROG_STATUS if TRUE variable file is loaded
Detail_done: BOOLEAN -- used to see if the detail is available

ConStartStat IN CMOS : INTEGER -- used for the controller state 1= Control,2= Cold
                               -- $SYS_CONFIG.$STARTMD
i,
entry,
int_value,
term_mask,
term_char,
open_id    : INTEGER -- Used for routine in getting teach pendant positions
karel_name IN CMOS : STRING[16] -- Used for name of the fixture group variable will be read from
status     IN CMOS :INTEGER -- Status of built-in procedure call nice to see if power cycled because of issue can see cmos
LastChngItem : INTEGER -- used to look at the last changed item in the menu

form_number IN CMOS : INTEGER -- Used for which form to display
value_array: ARRAY [60] OF STRING [120]
inact_array: ARRAY [60] OF BOOLEAN
change_array: ARRAY[60] OF BOOLEAN
def_item: INTEGER
Det_num_name  : STRING[60] -- Used for

DsplySubMenu IN CMOS: ARRAY[30] OF BOOLEAN -- Used for if user wanted to detail of a specific Menu,i.e. detail of MH setup

det_done IN CMOS : BOOLEAN -- Used for
StrtFrmWizrd,               -- The menu was started from wizard.

all_done:          BOOLEAN             --user wants to exit laser schedules
prmp_file:         FILE                --prompt window on tp
ftnk_file:         FILE                --function window on tp
do_detail:         BOOLEAN             --go to detail page on next loop
version_id    IN CMOS : STRING [15]
last_screen   :STRING[8]
-- below are needed for the act_form to kill the form manager from SWCFSCRN
  form_data FROM SWCFSCRN :    WORK_T

%INCLUDE GMCFGMH
%INCLUDE GMCFGCEL
%INCLUDE GMCFGTLC
%INCLUDE GMCFGDSP
%INCLUDE GMCFGPWR

-- Vision
%INCLUDE GMCFGVIS
--  GMPT Setup Information
%INCLUDE KLEVCCDF  -- provides character definition
%INCLUDE FXGMPTEG  -- dictionary constant file
%INCLUDE klrdutil
%INCLUDE klrdread
%INCLUDE gmrdutil -- required for the GM built in routine for utilities

--Other applications
ROUTINE run_config FROM GMWIZARD

-----------------------------------------------------------
ROUTINE int_2_str(p_integer:INTEGER):STRING
-- Routine to convert integers to string variables
-----------------------------------------------------------
VAR
  l_string: STRING[4]
BEGIN
  l_string = ''
  CNV_INT_STR(p_integer, 0, 0, l_string)
  RETURN(SUB_STR(l_string, 2, STR_LEN(l_string)))
END int_2_str
------------------------------------------------------------------------------
-- ROUTINE Trim
-- Remove leading and trailing spaces
-------------------------------------------------------------------------------
ROUTINE Trim (strText : STRING) : STRING

VAR
  strChar      : STRING[1]
  strTemp      : STRING[128]
  intFront     : INTEGER
  intBack      : INTEGER
  intIndex     : INTEGER
  intLength    : INTEGER

BEGIN

  strChar = ''
  strTemp = ''

IF UNINIT(strText) THEN
  strText = 'UNINT'
  POST_ERR(38000, 'String Not Initialized??', 0, 0) --
ENDIF


  intLength = STR_LEN(strText)

  IF intLength = 0 THEN RETURN(strText) ; ENDIF

  intIndex = 1
  intFront = intIndex

  --find the front of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex + 1
    IF intIndex <= intLength THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intFront = intIndex
    ELSE
      strChar = ''
    ENDIF

  ENDWHILE

  intIndex = STR_LEN(strText)
  intBack = intIndex

  --find the back of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex - 1
    IF intIndex >= 1 THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intBack = intIndex
    ELSE
      strChar = ''
    ENDIF
  ENDWHILE

  -- using SUB_STR to extract the string between front and back doesn't work - so we do it the hard way
  FOR intIndex=intFront TO intBack DO
    strChar = SUB_STR(strText, intIndex, 1)
    strTemp = strTemp + strChar
  ENDFOR

  RETURN(strTemp)

END Trim
-----------------------------------------------------------------------------
ROUTINE init_all_var
-- PURPOSE: Initialize all variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN
--RETURN

IF UNINIT(int_value) THEN
  int_value = 1
ENDIF
IF UNINIT(initialized) THEN
  initialized = FALSE
ENDIF

FOR i = 1 TO ARRAY_LEN(DsplySubMenu) DO
  IF UNINIT(DsplySubMenu[i]) THEN
    DsplySubMenu[i] = FALSE
  ENDIF
ENDFOR --

 IF UNINIT(Use_MH_Tool) THEN
   Use_MH_Tool = FALSE
 ENDIF
 IF UNINIT(Load_Templts) THEN
   Load_Templts = FALSE
 ENDIF
IF UNINIT(EOATUseAnlog) THEN
  EOATUseAnlog = FALSE
ENDIF
IF UNINIT(Use_Dispense) THEN
  Use_Dispense = FALSE
ENDIF
IF UNINIT(UseToolChngr) THEN
  UseToolChngr = FALSE
ENDIF
IF UNINIT(Use_RZIC) THEN
  Use_RZIC = FALSE
ENDIF
IF UNINIT(Use_Vision) THEN
  Use_Vision = FALSE
ENDIF
IF UNINIT(Use_Fastener) THEN
  Use_Fastener = FALSE
ENDIF

-- Setup so the GMPT Setup is viewable in the setup menu

 Set_S_sVar('$custommenu[19].$title','GMPT Setup')
 Set_S_sVar('$custommenu[19].$prog_name','GMPTDATA')
 Set_I_sVar('$custommenu[19].$option',31)

END init_all_var
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
ROUTINE Set_Trees
-- PURPOSE: To setup the look of the form when it first opens, if item is
--          enabled, the tree should be expanded to show all items.
--
--
-----------------------------------------------------------------------------

BEGIN

  DsplySubMenu[1] = Use_MH_Tool  -- if enabled tree will be expanded
  DsplySubMenu[2] = Load_Templts -- if disabled tree is collasped to start
  DsplySubMenu[3] = Use_Fastener
  DsplySubMenu[4] = Use_Dispense
  DsplySubMenu[5] = UseToolChngr
  DsplySubMenu[6] = Use_RZIC
  DsplySubMenu[7] = Use_Vision

  RETURN
END Set_Trees
-----------------------------------------------------------------------------
ROUTINE UpdateTrees
-- PURPOSE: to see if what was changed on the form was a tree view type element,
--          if a tree element was enabled, open tree so user can see the additional feilds
--
--
-----------------------------------------------------------------------------
VAR

 Changed_item :INTEGER

BEGIN

FOR i = 1 TO ARRAY_LEN(change_array) DO -- there should only be one because form
  IF UNINIT(change_array[i]) THEN
    change_array[i] = FALSE
  ENDIF
  IF (change_array[i]) THEN             -- ends on entry for evaluation of these booleans
    Changed_item = i
    LastChngItem = Changed_item
  ENDIF
ENDFOR --

---***** NOTE any variables used in IF statement need to verify boolean id initalize or will crash
-- so make sure by putting into the "init_all_var" routine that is called at start of this program

     SELECT (Changed_item) OF --
        CASE (7):  -- Use MH_TOOL
              IF Use_MH_Tool THEN
                DsplySubMenu[1] = TRUE
              ELSE
                DsplySubMenu[1] = FALSE
              ENDIF
        CASE (16):  -- GMPT Templates
              IF Load_Templts THEN
                DsplySubMenu[2] = TRUE
              ELSE
                DsplySubMenu[2] = FALSE
              ENDIF
        CASE (23):  -- Fastening System
              IF Use_Fastener THEN
                DsplySubMenu[3] = TRUE
              ELSE
                DsplySubMenu[3] = FALSE
              ENDIF
        CASE (26):  -- If Dispensing application
              IF Use_Dispense THEN
                DsplySubMenu[4] = TRUE
              ELSE
                DsplySubMenu[4] = FALSE
              ENDIF
        CASE (32):  -- If Tool Changer application
              IF UseToolChngr THEN
                DsplySubMenu[5] = TRUE
              ELSE
                DsplySubMenu[5] = FALSE
              ENDIF
        CASE (36):  -- If Use_RZIC application
              IF Use_RZIC THEN
                DsplySubMenu[6] = TRUE
              ELSE
                DsplySubMenu[6] = FALSE
              ENDIF
        CASE (39):  -- If Use_Vision application
              IF Use_Vision THEN
                DsplySubMenu[7] = TRUE
              ELSE
                DsplySubMenu[7] = FALSE
              ENDIF
        ELSE: --
     ENDSELECT --

END UpdateTrees
-----------------------------------------------------------------------------
ROUTINE setup_data
-- PURPOSE: to setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(all_done) THEN
  all_done = FALSE
ENDIF

FOR i = 1 TO ARRAY_LEN(inact_array) DO
  inact_array[i] = FALSE
ENDFOR --

IF UNINIT(unlocked) THEN
  unlocked = TRUE
ENDIF


--unlocked = TRUE
-- set the value array to be the program variable from the current fixture group
REPEAT --
 FOR i = 1 TO ARRAY_LEN(inact_array) DO
    IF unlocked THEN -- if user know secret to unlock
      inact_array[i] = FALSE
    ELSE
      inact_array[i] = TRUE
    ENDIF
  ENDFOR --

Value_array[1]= '[GMWIZARD]WizEndTimStr' -- the time the wazard was ran by user
Value_array[2]= '[GMCFGCEL]eip_oct1'   -- WorkCell IP Config Octate 1
Value_array[3]= '[GMCFGCEL]eip_oct2'   -- WorkCell IP Config Octate 2
Value_array[4]= '[GMCFGCEL]eip_oct3'   -- WorkCell IP Config Octate 3
Value_array[5]= '[GMCFGCEL]eip_oct4'   -- WorkCell IP Config Octate 4
Value_array[6]=  'DsplySubMenu[1]'      -- If user wants to display Gripper setup Grippers
inact_array[5] = FALSE -- always enable Tree action, minus 1 because only for editable items, Wiz timer is not
Value_array[7]=  '[GMCFGMH]Use_MH_Tool'    -- If have Grippers
Value_array[8]=  '[GMCFGPWR]PromptToOpen'   -- If user should be prompted to open gripper in manual
--Value_array[9]=  '[GMCFGMH]EOATCommType'   -- Tool COmmunication types
Value_array[9]= '[GMCFGMH]NumEOATInBlk'   -- Number of input blocks
Value_array[10]= '[GMCFGMH]EOATUseAnlog'   -- Use analog Input for gripper sensor
Value_array[11]= '[GMCFGMH]NumAnlogInpt'   -- Number of input blocks
Value_array[12]= '[GMCFGMH]AnlgInptBrnd'   -- Type of analog blocks turck and Baluff

Value_array[13]= '[GMCFGMH]NumEOATOtMan'   -- Number of Output Blocks
Value_array[14]= '[GMCFGPWR]ENBLIGNRFLTS'  -- Allow IGNORE faults

Value_array[15]= 'DsplySubMenu[2]'          -- If user wants to display Details of the Template setup
inact_array[14] = FALSE -- always enable Tree action
Value_array[16]= '[GMCFGPWR]Load_Templts'   -- If Program Templates are to be loaded
Value_array[17]= '[GMCFGPWR]Num_PickTmpl'   -- If Program Templates, then number of Pick Templates
Value_array[18]= '[GMCFGPWR]Num_PlacTmpl'   -- If Program Templates, then number of Place Templates
Value_array[19]= '[GMCFGPWR]LoadPlltTmpl'   -- If Program Templates, if load Palletizing Templates
Value_array[20]= '[GMCFGPWR]Use_Prog_Mon'   -- If Program program monitoring is to be loaded
Value_array[21]= '[GMCFGPWR]LoadShelTmpl'   -- If Program event programs are loaded.


Value_array[22]= 'DsplySubMenu[3]'          -- If user wants to display Details of the Fastener setup
inact_array[21] = FALSE -- always enable Tree action
Value_array[23]= '[GMCFGPWR]Use_Fastener'   -- User dais is a fastener application
Value_array[24]= '[GMCFGPWR]Num_FstnTmpl'   -- Number of fastener templates user want to load

Value_array[25]= 'DsplySubMenu[4]'          -- If user wants to display Details of the Dispense setup
inact_array[24] = FALSE -- always enable Tree action
Value_array[26]= '[GMCFGPWR]Use_Dispense'   -- If Dispense Equipment
--Value_array[13]= Prog_name + 'DispenseType'   -- Dispense type 1=SCA,2=Fanuc,3=Graco
Value_array[27]= '[GMCFGDSP]dispapp[1].disp_dozr'--GM dispense equipment configuration,1=80CC,2=160cc,3=None
Value_array[28]= '[GMCFGVIS]Use_Spin_Top'   -- If Spin Top is Used
Value_array[29]= '[GMSPINVR]ST_Mnt_Angle'   -- Mounting Angle of the SpinTop relative to Faceplate 0, rotation about z

Value_array[30]= 'DsplySubMenu[5]'          -- If user wants to display Details of the Tool Changer setup
inact_array[29] = FALSE -- always enable Tree action
Value_array[31]= '[GMCFGTLC]UseToolChngr'   -- If Tool Changer on Tool
Value_array[32]= '[GMCFGTLC]Num_ToolStnd'   -- WorkCell Communication Type
Value_array[33]= '[GMCFGTLC]ToolStndType[1]'-- WorkCell Communication Type

Value_array[34]= 'DsplySubMenu[6]'          -- If user wants to display Details of the RZIC setup
inact_array[33] = FALSE -- always enable Tree action
Value_array[35]= '[GMCFGPWR]Use_RZIC'       -- If Rail ZOne is Required
Value_array[36]= '[GMCFGPWR]RZIC_Type'      -- 1 is left, 2 is Right

Value_array[37]= 'DsplySubMenu[7]'          -- If user wants to display Details of the Vision setup
inact_array[36] = FALSE -- always enable Tree action
Value_array[38]= '[GMCFGVIS]Use_Vision'     -- If has Vision
Value_array[39]= '[GMCFGVIS]VisSys_Type'    -- If has Vision what type of vision
Value_array[40]= '[GMCFGVIS]iRType'         -- If has iRVision, what type of iRVision 2d,3d both
Value_array[41]= '[GMCFGVIS]VisLghtType'    -- What Type of Vision Lighting

                                                  --term_mask
-- kc_f1_type to handle the TYPE key processing with custommenu[x].$option = 31 will have TYPE work No FORCE USER!
term_mask =  kc_item_chng  + kc_f1_type + kc_func_key-- kc_f1_type + kc_func_key  --kc_other
term_char = -1

  DISCTRL_FORM(dict_name, setup_GMPT, value_array, inact_array, change_array, term_mask, def_item, term_char, status)
    IF status<>0 THEN
      all_done = TRUE
      POST_ERR(38000, 'GMPT SETUP_GMPT Display Failed', status, 0) -- 2
    ENDIF

   IF (ConStartStat = Cold_State)AND (term_char<>ky_new_menu) THEN
     WRITE TPERROR(CHR(cc_clear_win),'Use Wizard at CONTROLLED start to Modify')
   ENDIF

--WRITE TPERROR(CHR(cc_clear_win),'SOMETHING CHANGED')
 -- form has ended
   UpdateTrees -- Go see if Change_Array was a FALSE to True on Elements to expand or collapse a tree automatically

  SELECT (term_char) OF -- select how the form was ended or which key Cell
    CASE(ky_new_menu):

    CASE(ky_prev,ky_prev_s): -- set so form ends based on user do previous
         all_done = TRUE
         term_char = ky_new_menu
         WRITE TPERROR(CHR(cc_clear_win),'Pressed PREV key')
    CASE(ky_f1): -- [TYPE] functioning

    CASE(ky_f2,ky_f2_s): -- Selected EXIT
         IF (ConStartStat = Contr_State) THEN
           all_done = TRUE
           term_char = ky_new_menu
           Set_B_PVar('GMWIZARD','Display_exec',FALSE) -- set varaible so setup can not run yet
         ENDIF

    CASE(ky_f3,ky_f3_s): -- Include SHIFT in Case user is teaching -- Selected EXEC.
         IF (ConStartStat = Contr_State) THEN
           all_done = TRUE
           term_char = ky_new_menu
           Set_B_PVar('GMWIZARD','Display_exec',TRUE)-- set var so SETUP portion of wizard can run
         ENDIF
    CASE(ky_f4,ky_f4_s):

    CASE(ky_f7): -- Selected to Load the data file.
      --  WRITE TPERROR(CHR(cc_clear_win),'Loading GMPT Setup Settings')
      --  DELAY 2000 -- put call program here
      --  WRITE TPERROR(CHR(cc_clear_win),'GMPT Setup Loaded')

    CASE(ky_f8): -- Selected to Save the data file.
      --  WRITE TPERROR(CHR(cc_clear_win),'Saving GMPT Setup Settings')
      --  DELAY 2000 -- put call program here
      --  WRITE TPERROR(CHR(cc_clear_win),'GMPT Settings Saved')
    CASE(ky_f9): -- Selected to Unlock
       --   WRITE TPERROR(CHR(cc_clear_win),'Unlocked Setup for Changes')
       --   unlocked = TRUE
      CASE(ky_undef):
    ELSE: --
  ENDSELECT   --det_term_chr OF



UNTIL ((term_char = ky_new_menu) OR (status <>0)) -- New Screen selected

END setup_data

--------------------------------------------------------------------------------
--------------------        MAIN BODY OF PROGRAM     ---------------------------
--------------------------------------------------------------------------------

BEGIN

 version_id = ver

  SET_FILE_ATR(prmp_file, 1, 0)
  SET_FILE_ATR(ftnk_file, 1, 0)
  OPEN FILE prmp_file ('RW', 'WD:prmp/tpkb')
  OPEN FILE ftnk_file ('RW', 'WD:ftnk')

init_all_var -- initailize all variables
def_item = 1 -- setup so first time displayed it sets item 1 to edit
Set_Trees -- setup how tree are expanded based on the status

-- GO and get the controller state to determine if need to force User SCreen
-- in controlled State, need to force user, if in cold state and menu is a CUSTOM MENU
-- then dont need to, system will

GET_VAR(entry, '*SYSTEM*' , '$SYS_CONFIG.$STARTMD', ConStartStat, status)
   IF status <> 0 THEN
     POST_ERR(38000, '[*SYSTEM*].$SYS_CONFIG.$STARTMD FAILED', status, 0) --
     ConStartStat = cold_state -- force at cold_state
   ENDIF

IF UNINIT(ConStartStat) THEN --make sure code can run
  ConStartStat = Cold_State
ENDIF

IF UNINIT(StrtFrmWizrd) THEN
  StrtFrmWizrd = FALSE
ENDIF

-- Forcing the menu is not needed when using custom menu and $option set to 31 for TYPE function
SELECT (ConStartStat) OF --
  CASE (Contr_State):  -- 1 = at Controlled Start Status
    def_item = 1 -- setup so first time displayed it sets item 1 to edit
    unlocked = TRUE  -- Unlock so user can modify settings
  CASE (Cold_State):  -- 2 = at cold state no need to force if system is handling
    ---- Need to force menu if Ran from Wizard
    IF StrtFrmWizrd THEN
      REPEAT
        FORCE_SPMENU(tp_panel,spi_tpuser2, 1)
        DELAY 8
      UNTIL ($tp_curscrn[1].$sp_id = spi_tpuser2)
     -- FORCE_SPMENU(tp_panel,SPI_TPUSER2,1) -- force the user screen to display forms
    ENDIF
      unlocked = FALSE  -- Lock so user can't modify settings at Cold State
  ELSE: --
    POST_ERR(38000, 'Unknown ConStartStat in GMPTDATA', 0, 0) --
ENDSELECT --

IF UNINIT(form_number) THEN
  form_number = 1
ENDIF
  all_done = FALSE-- set the loop flag
 WHILE NOT (all_done) DO -- do diplay until they say stop
   SELECT (form_number) OF --
      CASE (1):  --
        setup_data -- this is for the initial setting
      CASE (2):  --
      ELSE: --
   ENDSELECT --
 ENDWHILE --

  StrtFrmWizrd = FALSE
  CLOSE FILE prmp_file
  CLOSE FILE ftnk_file

END GMPTDATA
