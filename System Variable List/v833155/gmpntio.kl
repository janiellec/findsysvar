-- -----------------------------------------------------------------------
--
--   MODULE:         GMPNTIO.KL
--   TITLE:          GMPNTIO PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Paint Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE        BY               COMMENTS
--         --------   ----------  ---------------  --------------------
--         4.0        2016-10-27  D. Friedeman		Initial Configuration
--         4.01       2018-03-15  D. Friedeman		Modifications for V8.33P/05
--         4.1        2019-08-30  D. Friedeman      Added support for Style ID
--                                                  Moved I/O setup vars from CUSTOMVR to
--                                                  new GMPNTVAR.
--         4.1        2019-10-17  marchaka          Modify $slcellio[1].do_wait_plc_i to 19001 because 17 is now controlled
--                                                  by PMC by DO[19001] OR DO[19002].
--
--------------------------------------------------------------------------
PROGRAM GMPNTIO

%COMMENT = 'PAINT I/O V4.1 '

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

CONST

Version = '2019-10-17'
%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  PntIO_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup Mh I/O at least first time
  gm_status   : INTEGER
  dummy_int   : INTEGER
  
-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgpnt  -- PaintShop Configuration

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables
-----------------------------------------------------------------------------
ROUTINE paint_io_cmt
-- PURPOSE: to initialize Programs associated with I/O setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR

  l_counter : INTEGER
  
BEGIN

  WriteLog('  Routine paint_io_cmt starting in GMPNTIO',FALSE)

  -- Set dedicated Paintshop Cell I/O to "Reserved"
  FOR l_counter = 257 TO 384 DO
    set_port_cmt(io_din , l_counter, 'Reserved - Paint',gm_status)     -- Reserved For PaintShop Use.
    set_port_cmt(io_dout, l_counter, 'Reserved - Paint',gm_status)     -- Reserved For PaintShop Use.    
  ENDFOR
  -- Set Paint Cell Inputs
  -- Robot Bypass Bits.
  set_port_cmt(io_din, 257, 'Robot1Bypassed  ',gm_status)     --Robot 1 is Bypassed
  set_port_cmt(io_din, 258, 'Robot2Bypassed  ',gm_status)     --Robot 2 is Bypassed
  set_port_cmt(io_din, 259, 'Robot3Bypassed  ',gm_status)     --Robot 3 is Bypassed
  set_port_cmt(io_din, 260, 'Robot4Bypassed  ',gm_status)     --Robot 4 is Bypassed		
  set_port_cmt(io_din, 261, 'Robot5Bypassed  ',gm_status)     --Robot 5 is Bypassed
  set_port_cmt(io_din, 262, 'Robot6Bypassed  ',gm_status)     --Robot 6 is Bypassed
  set_port_cmt(io_din, 263, 'Robot7Bypassed  ',gm_status)     --Robot 7 is Bypassed
  set_port_cmt(io_din, 264, 'Robot8Bypassed  ',gm_status)     --Robot 8 is Bypassed
  set_port_cmt(io_din, 265, 'Robot9Bypassed  ',gm_status)     --Robot 9 is Bypassed	
  set_port_cmt(io_din, 266, 'Robot10Bypassed ',gm_status)     --Robot 10 is Bypassed
  set_port_cmt(io_din, 267, 'Robot11Bypassed ',gm_status)     --Robot 11 is Bypassed	
  set_port_cmt(io_din, 268, 'Robot12Bypassed ',gm_status)     --Robot 12 is Bypassed	
  set_port_cmt(io_din, 269, 'Robot13Bypassed ',gm_status)     --Robot 13 is Bypassed		
  set_port_cmt(io_din, 270, 'Robot14Bypassed ',gm_status)     --Robot 14 is Bypassed		
  set_port_cmt(io_din, 271, 'Robot15Bypassed ',gm_status)     --Robot 15 is Bypassed		
  set_port_cmt(io_din, 272, 'Robot16Bypassed ',gm_status)     --Robot 16 is Bypassed		
	
  -- Error Recovery Inputs
  set_port_cmt(io_din, 273, 'Continue WET    ',gm_status)     --Continue the Job WET.
    Set_I_sVar('$SLCELLIO[1].DI_CONT_WETT', 1); Set_I_sVar('$SLCELLIO[1].DI_CONT_WETI', 273)  
  set_port_cmt(io_din, 274, 'Continue DRY    ',gm_status)     --Continue the Job DRY.		
    Set_I_sVar('$SLCELLIO[1].DI_CONT_DRYT', 1); Set_I_sVar('$SLCELLIO[1].DI_CONT_DRYI', 274)
  set_port_cmt(io_din, 275, 'Run RESUME_PROG ',gm_status)     --Run the RESUME_PROG.
    Set_I_sVar('$SLCELLIO[1].DI_RSM_PROGT', 1); Set_I_sVar('$SLCELLIO[1].DI_RSM_PROGI', 275)
  set_port_cmt(io_din, 276, 'Early Exit Enabl',gm_status)     --Continue DRY, but Exit Early.


  set_port_cmt(io_din, 277, 'Ignore1xProx4   ',gm_status)     --
  set_port_cmt(io_din, 278, 'diHead1InNest   ',gm_status)     --
  set_port_cmt(io_din, 279, 'diHead2InNest   ',gm_status)     --
  set_port_cmt(io_din, 280, 'diHead3InNest   ',gm_status)     --
  set_port_cmt(io_din, 281, 'diChangerBypass ',gm_status)     --  
  
  -- Opener Control Inputs
  set_port_cmt(io_din, 289, 'LFDrHeldCls     ',gm_status)     -- Left Front Door is held closed.	
  set_port_cmt(io_din, 290, 'LFDrHeldOpn     ',gm_status)     -- Left Front Door is held open.	
  set_port_cmt(io_din, 291, 'LRDrHeldCls     ',gm_status)     -- Left Rear Door is held closed.	
  set_port_cmt(io_din, 292, 'LRDrHeldOpn     ',gm_status)     -- Left Rear Door is held open.	
  set_port_cmt(io_din, 293, 'RFDrHeldCls     ',gm_status)     -- Right Front Door is held closed.	
  set_port_cmt(io_din, 294, 'RFDrHeldOpn     ',gm_status)     -- Right Front Door is held open.	
  set_port_cmt(io_din, 295, 'RRDrHeldCls     ',gm_status)     -- Right Rear Door is held closed.	
  set_port_cmt(io_din, 296, 'RRDrHeldOpn     ',gm_status)     -- Right Rear Door is held open.	
  set_port_cmt(io_din, 297, 'DeckRaised      ',gm_status)     -- Decklid is raised.	
  set_port_cmt(io_din, 298, 'HoodRaised      ',gm_status)     -- Hood is raised.	
  set_port_cmt(io_din, 299, 'HoldLFDrClsRq   ',gm_status)     -- Request to hold Left Front Door Closed.	
  set_port_cmt(io_din, 300, 'HoldLFDrOpnRq   ',gm_status)     -- Request to hold Left Front Door Open.	
  set_port_cmt(io_din, 301, 'HoldLRDrClsRq   ',gm_status)     -- Request to hold Left Rear Door Closed.	
  set_port_cmt(io_din, 302, 'HoldLRDrOpnRq   ',gm_status)     -- Request to hold Left Rear Door Open.	
  set_port_cmt(io_din, 303, 'HoldRFDrClsRq   ',gm_status)     -- Request to hold Right Front Door Closed.	
  set_port_cmt(io_din, 304, 'HoldRFDrOpnRq   ',gm_status)     -- Request to hold Right Front Door Open.	
  set_port_cmt(io_din, 305, 'HoldRRDrClsRq   ',gm_status)     -- Request to hold Right Rear Door Closed.	
  set_port_cmt(io_din, 306, 'HoldRRDrOpnRq   ',gm_status)     -- Request to hold Right Rear Door Open.
  set_port_cmt(io_din, 307, 'RaiseDeckReq    ',gm_status)     -- Request to raise the Decklid.	
  set_port_cmt(io_din, 308, 'RaiseHoodReq    ',gm_status)     -- Request to raise the Hood.	
  set_port_cmt(io_din, 309, 'ClrOpnReq       ',gm_status)     -- Clear all opener requests.	
  set_port_cmt(io_din, 310, 'CancelOpnProc   ',gm_status)     -- Cancel the opener process.

  set_port_cmt(io_din, 329, 'Style ID Request',gm_status)     -- Style ID Request.
  
  -- Vision Inputs
  set_port_cmt(io_din, 505, 'UseVisionBackup ',gm_status)     -- Ust the Backup Robot to perform vision.	
    SET_VAR(dummy_int, 'IRVOFFSV', 'vis_sel_din', 505, gm_status)  
  set_port_cmt(io_din, 506, 'Clear Offsets   ',gm_status)     -- Clear old vision offsets.	
    SET_VAR(dummy_int, 'GMPNTVAR', 'di_clrrqst_t', 1, gm_status); SET_VAR(dummy_int, 'GMPNTVAR', 'di_clrrqst_i', 506, gm_status)  
  set_port_cmt(io_din, 507, 'Run W/O Offsets ',gm_status)     -- Ignore all vision requests and use default offsets.	
    SET_VAR(dummy_int, 'GMPNTVAR', 'di_ghost_t', 1, gm_status);   SET_VAR(dummy_int, 'GMPNTVAR', 'di_ghost_i', 507, gm_status)  
  set_port_cmt(io_din, 508, 'Style ID Request',gm_status)     -- Use vision to identify/validate the vehicle type.
    SET_VAR(dummy_int, 'GMPNTVAR', 'di_id_req_t', 1, gm_status);  SET_VAR(dummy_int, 'GMPNTVAR', 'di_id_req_i', 508, gm_status)  

  -- Paint Cell Outputs 

  -- Set "Waiting for Cancel/Continue for the PLC.  This goes where RS4 normally puts the 
  -- "Set when prompt displayed" item on the SYSTEM CONFIG screen.
  -- The normal RS4 comment "Manual Intervention Required" doesn't need to be changed at this time.
  -- This variable is hidden in the sysvar listing.
  Set_I_sVar('$PRMPDSPOUT', 0)  
  Set_I_sVar('$SLCELLIO[1].DO_WAIT_PLCT', 2)
  Set_I_sVar('$SLCELLIO[1].DO_WAIT_PLCI', 19001)  --hard coded because Karel variable prmp_sdout must be 0 for paint shop
                                                  --because this output is used for something different than the rest of of GM shops  
  
  -- Opener Control Outputs  
  set_port_cmt(io_dout, 257, 'HoldLFDrClsRq   ',gm_status)     --	
  set_port_cmt(io_dout, 258, 'HoldLFDrOpnRq   ',gm_status)     --	
  set_port_cmt(io_dout, 259, 'HoldLRDrClsRq   ',gm_status)     --	
  set_port_cmt(io_dout, 260, 'HoldLRDrOpnRq   ',gm_status)     --	
  set_port_cmt(io_dout, 261, 'HoldRFDrClsRq   ',gm_status)     --	
  set_port_cmt(io_dout, 262, 'HoldRFDrOpnRq   ',gm_status)     --	
  set_port_cmt(io_dout, 263, 'HoldRRDrClsRq   ',gm_status)     --	
  set_port_cmt(io_dout, 264, 'HoldRRDrOpnRq   ',gm_status)     --	
  set_port_cmt(io_dout, 265, 'RaiseDeckRq     ',gm_status)     --	
  set_port_cmt(io_dout, 266, 'RaiseHoodRq     ',gm_status)     --	
  set_port_cmt(io_dout, 267, 'LFDrHeldCls     ',gm_status)     --	
  set_port_cmt(io_dout, 268, 'LFDrHeldOpn     ',gm_status)     --	
  set_port_cmt(io_dout, 269, 'LRDrHeldCls     ',gm_status)     --	
  set_port_cmt(io_dout, 270, 'LRDrHeldOpn     ',gm_status)     --	
  set_port_cmt(io_dout, 271, 'RFDrHeldCls     ',gm_status)     --	
  set_port_cmt(io_dout, 272, 'RFDrHeldOpn     ',gm_status)     --	
  set_port_cmt(io_dout, 273, 'RRDrHeldCls     ',gm_status)     --	
  set_port_cmt(io_dout, 274, 'RRDrHeldOpn     ',gm_status)     --	
  set_port_cmt(io_dout, 275, 'DeckRaised      ',gm_status)     --	
  set_port_cmt(io_dout, 276, 'HoodRaised      ',gm_status)     --	
  set_port_cmt(io_dout, 277, 'Reserved Opener ',gm_status)     --	
  set_port_cmt(io_dout, 278, 'Reserved Opener ',gm_status)     --	
  set_port_cmt(io_dout, 279, 'Reserved Opener ',gm_status)     --	
  set_port_cmt(io_dout, 280, 'OpnrWaitForRqust',gm_status)     --	
  set_port_cmt(io_dout, 281, 'OpnrToolEngaged ',gm_status)     --	
  set_port_cmt(io_dout, 282, 'LFPosChkEnb     ',gm_status)     --	
  set_port_cmt(io_dout, 283, 'LRPosChkEnb     ',gm_status)     --	
  set_port_cmt(io_dout, 284, 'RFPosChkEnb     ',gm_status)     --	
  set_port_cmt(io_dout, 285, 'RRPosChkEnb     ',gm_status)     --	
  set_port_cmt(io_dout, 286, 'Reserved Opener ',gm_status)     --	
  set_port_cmt(io_dout, 287, 'Reserved Opener ',gm_status)     --	
  set_port_cmt(io_dout, 288, 'Early Exit Enabl',gm_status)     --	
  set_port_cmt(io_dout, 289, 'P1Gun1Echo      ',gm_status)     --	
  set_port_cmt(io_dout, 290, 'P1Gun2Echo      ',gm_status)     --	
  set_port_cmt(io_dout, 291, 'P1Gun3Echo      ',gm_status)     --	
  set_port_cmt(io_dout, 292, 'P1Gun4Echo      ',gm_status)     --	
  set_port_cmt(io_dout, 293, 'P1Gun5Echo      ',gm_status)     --	

    -- Hot Edit Made
  set_port_cmt(io_dout, 297, 'TP_HotEdit      ',gm_status);  
    Set_I_sVar('$SLCELLIO[1].DO_SPARE5T', 2);  Set_I_sVar('$SLCELLIO[1].DO_SPARE5I', 297)

  set_port_cmt(io_dout, 298, 'Tip Blowoff Rqst',gm_status)     --	
  set_port_cmt(io_dout, 299, 'TipInsp Light Rq',gm_status)     --	

  set_port_cmt(io_dout, 329, 'Style ID Dat Rdy',gm_status)
  set_port_cmt(io_dout, 330, 'Style ID Bit  1 ',gm_status)     
  set_port_cmt(io_dout, 331, 'Style ID Bit  2 ',gm_status)     
  set_port_cmt(io_dout, 332, 'Style ID Bit  3 ',gm_status)     
  set_port_cmt(io_dout, 333, 'Style ID Bit  4 ',gm_status)     
  set_port_cmt(io_dout, 334, 'Style ID Bit  5 ',gm_status)     
  set_port_cmt(io_dout, 335, 'Style ID Bit  6 ',gm_status)     
  set_port_cmt(io_dout, 336, 'Style ID Bit  7 ',gm_status)     
  set_port_cmt(io_dout, 337, 'Style ID Bit  8 ',gm_status)     
  set_port_cmt(io_dout, 338, 'Style ID Bit  9 ',gm_status)     
  set_port_cmt(io_dout, 339, 'Style ID Bit 10 ',gm_status)     
  set_port_cmt(io_dout, 340, 'Style ID Bit 11 ',gm_status)     
  set_port_cmt(io_dout, 341, 'Style ID Bit 12 ',gm_status)     
  set_port_cmt(io_dout, 342, 'Style ID Bit 13 ',gm_status)     
  set_port_cmt(io_dout, 343, 'Style ID Bit 14 ',gm_status)     
  set_port_cmt(io_dout, 344, 'Style ID Bit 15 ',gm_status)     
  
  set_port_cmt(io_dout, 345, 'goSL1GunPress1  ',gm_status)     
  set_port_cmt(io_dout, 346, 'goSL1GunPress2  ',gm_status)
  set_port_cmt(io_dout, 347, 'goSL1GunPress3  ',gm_status)
  set_port_cmt(io_dout, 348, 'goSL1GunPress4  ',gm_status)
  set_port_cmt(io_dout, 349, 'goSL1GunPress5  ',gm_status)
  set_port_cmt(io_dout, 350, 'goSL1GunPress6  ',gm_status)
  set_port_cmt(io_dout, 351, 'goSL1GunPress7  ',gm_status)
  set_port_cmt(io_dout, 352, 'goSL1GunPress8  ',gm_status) 
	
  set_port_cmt(io_dout, 353, 'goSL1MtrPress1  ',gm_status)     
  set_port_cmt(io_dout, 354, 'goSL1MtrPress2  ',gm_status)     
  set_port_cmt(io_dout, 355, 'goSL1MtrPress3  ',gm_status)     
  set_port_cmt(io_dout, 356, 'goSL1MtrPress4  ',gm_status)     
  set_port_cmt(io_dout, 357, 'goSL1MtrPress5  ',gm_status)     
  set_port_cmt(io_dout, 358, 'goSL1MtrPress6  ',gm_status)     
  set_port_cmt(io_dout, 359, 'goSL1MtrPress7  ',gm_status)     
  set_port_cmt(io_dout, 360, 'goSL1MtrPress8  ',gm_status)     
	
  set_port_cmt(io_dout, 361, 'goSL1TempSetpnt1',gm_status)     
  set_port_cmt(io_dout, 362, 'goSL1TempSetpnt2',gm_status)     
  set_port_cmt(io_dout, 363, 'goSL1TempSetpnt3',gm_status)     
  set_port_cmt(io_dout, 364, 'goSL1TempSetpnt4',gm_status)     
  set_port_cmt(io_dout, 365, 'goSL1TempSetpnt5',gm_status)     
  set_port_cmt(io_dout, 366, 'goSL1TempSetpnt6',gm_status)     
  set_port_cmt(io_dout, 367, 'goSL1TempSetpnt7',gm_status)     
  set_port_cmt(io_dout, 368, 'goSL1TempSetpnt8',gm_status)     
	
  set_port_cmt(io_dout, 369, 'goSL1CurrTemp1  ',gm_status)     
  set_port_cmt(io_dout, 370, 'goSL1CurrTemp2  ',gm_status)     
  set_port_cmt(io_dout, 371, 'goSL1CurrTemp3  ',gm_status)     
  set_port_cmt(io_dout, 372, 'goSL1CurrTemp4  ',gm_status)     
  set_port_cmt(io_dout, 373, 'goSL1CurrTemp5  ',gm_status)     
  set_port_cmt(io_dout, 374, 'goSL1CurrTemp6  ',gm_status)     
  set_port_cmt(io_dout, 375, 'goSL1CurrTemp7  ',gm_status)     
  set_port_cmt(io_dout, 376, 'goSL1CurrTemp8  ',gm_status)     

  IF (appl_type = HEMFLANGE) THEN -- I/O For Hem Tooling
    set_port_cmt(io_din, 1602, 'EOAT Coll Detect',gm_status)  -- Hem Tip Collision 
    set_port_cmt(io_dout,1602, 'EOAT Lock TipPos',gm_status)  -- Lock Hem Tip Compliance 	
  ENDIF
  
  -- Pressure and Temperature Reporting DOUTS and GOUTS are set by GMDISPIO
  set_port_cmt(io_dout, 433, 'At HOME Pos     ',gm_status)
    Set_I_sVar('$REFPOS1[1].$DOUT_INDX', 433)
    Set_S_sVar('$REFPOS1[1].$COMMENT','At HOME Pos')
    Set_R_sVAR('$REFPOS1[1].$PERCHTOL[7]', 7) -- ( 7 millimeters )
    Set_B_sVAR('$REFPOS1[1].$HOMEPOS', TRUE)
  
  set_port_cmt(io_dout, 434, 'At PURGE Pos    ',gm_status)     --
    Set_I_sVar('$REFPOS1[2].$DOUT_INDX', 434)
    Set_S_sVar('$REFPOS1[2].$COMMENT','At PURGE Pos')
    Set_R_sVAR('$REFPOS1[2].$PERCHTOL[7]', 7) -- ( 7 millimeters )
    Set_B_sVAR('$REFPOS1[2].$HOMEPOS', TRUE)
  
  set_port_cmt(io_dout, 435, 'At REPAIR/BYPASS',gm_status)     --
    Set_I_sVar('$REFPOS1[3].$DOUT_INDX', 435)
    Set_S_sVar('$REFPOS1[3].$COMMENT','At REPAIR/BYPASS')
    Set_R_sVAR('$REFPOS1[3].$PERCHTOL[7]', 7) -- ( 7 millimeters )
    Set_B_sVAR('$REFPOS1[3].$HOMEPOS', TRUE)
  
  set_port_cmt(io_dout, 436, 'At GUN MAINT Pos',gm_status)     --
    Set_I_sVar('$REFPOS1[4].$DOUT_INDX', 436)
    Set_S_sVar('$REFPOS1[4].$COMMENT','At GUN MAINT Pos') 
    Set_R_sVAR('$REFPOS1[4].$PERCHTOL[7]', 7) -- ( 7 millimeters )
    Set_B_sVAR('$REFPOS1[4].$HOMEPOS', TRUE)
  
  set_port_cmt(io_dout, 437, 'At USER Pos #1  ',gm_status)     --
    Set_I_sVar('$REFPOS1[5].$DOUT_INDX', 437)
    Set_S_sVar('$REFPOS1[5].$COMMENT','At USER Pos #1')
    Set_R_sVAR('$REFPOS1[5].$PERCHTOL[7]', 7) -- ( 7 millimeters )
    Set_B_sVAR('$REFPOS1[5].$HOMEPOS', TRUE)
  
  set_port_cmt(io_dout, 438, 'At USER Pos #2  ',gm_status)     --
    Set_I_sVar('$REFPOS1[6].$DOUT_INDX', 438)
    Set_S_sVar('$REFPOS1[6].$COMMENT','At USER Pos #2')
    Set_R_sVAR('$REFPOS1[6].$PERCHTOL[7]', 7) -- ( 7 millimeters )
    Set_B_sVAR('$REFPOS1[6].$HOMEPOS', TRUE)
  
  -- Vision Outputs
  set_port_cmt(io_dout, 497, 'Curr Vision Mstr',gm_status)     -- 
    SET_VAR(dummy_int, 'GMPNTVAR', 'do_mstrflg_t', 1, gm_status);  SET_VAR(dummy_int, 'GMPNTVAR', 'do_mstrflg_i', 497, gm_status)  
  set_port_cmt(io_dout, 498, 'Vision Fault    ',gm_status)     -- 
    SET_VAR(dummy_int, 'GMPNTVAR', 'do_visflt_t', 1, gm_status);  SET_VAR(dummy_int, 'GMPNTVAR', 'do_visflt_i', 498, gm_status)  
  set_port_cmt(io_dout, 499, 'VisionDataPres  ',gm_status)     -- 
    SET_VAR(dummy_int, 'GMPNTVAR', 'do_data_ok_t', 1, gm_status);  SET_VAR(dummy_int, 'GMPNTVAR', 'do_data_ok_i', 499, gm_status)  
  set_port_cmt(io_dout, 500, 'CamDoorReq      ',gm_status)     -- 
    SET_VAR(dummy_int, 'GMPNTVAR', 'do_camdoor_t', 1, gm_status);  SET_VAR(dummy_int, 'GMPNTVAR', 'do_camdoor_i', 500, gm_status)  
  set_port_cmt(io_dout, 501, 'VisionInProcess ',gm_status)     -- 
    SET_VAR(dummy_int, 'GMPNTVAR', 'do_visproc_t', 1, gm_status);  SET_VAR(dummy_int, 'GMPNTVAR', 'do_visproc_i', 501, gm_status)  
  set_port_cmt(io_dout, 502, 'ClrOffsetAck    ',gm_status)     -- 
    SET_VAR(dummy_int, 'GMPNTVAR', 'do_clrack_t', 1, gm_status);  SET_VAR(dummy_int, 'GMPNTVAR', 'do_clrack_i', 502, gm_status)  
  set_port_cmt(io_dout, 503, 'ErrorPrfFailed  ',gm_status)     -- 
  set_port_cmt(io_dout, 504, 'ErrorPrfSkipped ',gm_status)     -- 
  set_port_cmt(io_dout, 505, 'ErrorPrfPassed  ',gm_status)     -- 

  -- Set the comment for the Circulation Flag.. only used by Paint.
  -- SET_PORT_CMT(IO_FLAG,1024,'Circulation Rqst', gm_status)
  
  WriteLog('  Routine paint_io_cmt in GMPNTIO Completed',FALSE)

END paint_io_cmt
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN

Current_Ver = Version -- Set the version for reference

IF UNINIT(ErrsInShop.ErrorsIOCom) THEN
  ErrsInShop.ErrorsIOCom = 0
ENDIF
IF UNINIT(PntIO_Setup) THEN
  PntIO_Setup = FALSE
ENDIF

 StrtinErs = ErrsInShop.ErrorsIOCom -- grab current error count
 ClrUtltyErrs -- Clear all error in utility program to be used when done

 WriteLog('  Starting the Paint I/O Program GMPNTIO', FALSE)

  IF (PntIO_Setup = TRUE) THEN -- setup has already been setup
      WriteLog('  Paint I/O Already Setup', FALSE)
    IF ExecSetupAgn('Paint I/O') THEN -- ask user if they want to setup again
      PntIO_Setup = FALSE
    ELSE
      WriteLog('  Paint I/O already Complete', FALSE)
      WriteLog('  GMPNTIO Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  paint_io_cmt

 ErrsInShop.ErrorsIOCom =  ErrsInShop.ErrorsIOCom + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInShop.ErrorsIOCom -StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('  Paint I/O setup Program GMPNTIO had ' + int2str((ErrsInShop.ErrorsIOCom- StrtinErs))+' while executing', TRUE)
 ELSE
   WriteLog('  Paint I/O setup Program completed', FALSE)
   PntIO_Setup = TRUE
 ENDIF

 WriteLog('', FALSE)

END GMPNTIO
