--
--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--    +
--    Program: gmwizdp.kl
--
--    Description:
--
--    gmwizdp contains questions for configuring GM G4 dispense applications
--
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
-------------------------------------------------------------------------------------------------------------
--
--    Language: KAREL
--
--    Source File:
--
--    Author:
--            Fanuc Robotics North America
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--           2016/03/23   marchaka Program created
--           2016/05/25   Kosaski Program changed to not display the message the
--                                ghost keys, because it is not occuring yet until the
--                                display is occuring.
--           2016/10/26   marchaka Logic added to support combos
--           2017/01/30   marchaka Removed IF statement around second dispense process, again.  Someone
--                                 keeps adding it back in.  It is not needed and shouldn't be there. 
--           2018/09/05   schoensm added V8.33P06 updates, new menu items for 1K and 2K dispenser.                               
--                                 
-------------------------------------------------------------------------------------------------------------
PROGRAM gmwizdp
-------------------------------------------------------------------------------------------------------------
%ALPHABETIZE
%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%COMMENT='GM DispenseWizG4.3'

%ENVIRONMENT sldef  --sealer system variables

%INCLUDE gmevrlng -- Required for the language constants
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgdsp  -- Required for the configuration for GM Dispense variables
%INCLUDE gmcfgbdy  -- Required for the configuration for GM Body Shop variables

CONST

Version = '2018-09-05'
%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR
  ans          : INTEGER
  gm_status    : INTEGER
  psve         : INTEGER
  l_response   : INTEGER

%INCLUDE klrdutil -- Required for the CLR_STND_SCR routine for Pendant screen
%INCLUDE gmrdutil

ROUTINE set_english FROM GMlang1 -- setup variable for the user prompts
ROUTINE USERPAGE FROM USERPAGE  -- forces user screen to pendant
-------------------------------------------------------------------
ROUTINE initdpwizvar
--intialize variables in case dispense wizard is run not from wizard
-------------------------------------------------------------------
VAR
w:  INTEGER

BEGIN
  --Initialize variables

  IF UNINIT(bshop_proc1) THEN
    bshop_proc1 = 0
  ENDIF

  IF UNINIT(bshop_proc2) THEN
    bshop_proc2 = 0
  ENDIF

  IF UNINIT(numdispctrl) THEN
    numdispctrl   = 0                --Number of dispense controllers
    FOR w = 1 TO 2 Do
      dispapp[w].disp_eqty = 0		--dispense controller type
      dispapp[w].disp_ldsc = 0		--dispense controller load dispense schedules
      dispapp[w].disp_dozr = 0		--dispense controller dozer
      dispapp[w].ispare1   = 0		--dispense 1K or 2K
    ENDFOR
  ENDIF

  IF UNINIT(disp_ctrl) THEN
    disp_ctrl     = 0                --Wizard dispense equipment for execution
  ENDIF

  IF UNINIT(disp1_app) THEN
    disp1_app     = 0                --Dispense controller 1 application
  ENDIF

  IF UNINIT(disp2_app) THEN
    disp2_app     = 0                --Dispense controller 2 application
  ENDIF

END initdpwizvar
-------------------------------------------------------------------
ROUTINE disp_app_wiz
-------------------------------------------------------------------
BEGIN
  IF ((bshop_proc1 = dispappl) AND (bshop_proc2 = dispappl)) THEN --two weld controllers
    numdispctrl = 2
  ELSE
   numdispctrl = 1
  ENDIF
  SELECT numdispctrl OF
    CASE(1):  --one dispense controller
      IF (disp1_app = 0) THEN --skip if combo, disp1_app was set in gmwizbsh
        REPEAT
          CLR_STND_SCR(gm_status)
          WRITE(CR,d1dc_gmdata,CR)--WRITE(CR,'First Dispense Controller',CR)
          WRITE('1.',rhn_gmdata,CR)--WRITE('1. Robot Held Nozzle',CR)
          WRITE('2.',phn_gmdata,CR)--WRITE('2. Pedestal Held Nozzle',CR)
          WRITE('3.',rnmh_gmdata,CR)--WRITE('3. Robot Held Nozzle with Material Handler',CR)
          WRITE(gdata_ans,'(1-3):')--WRITE('Answer: ')
          READ(ans)
        UNTIL(Verify_Answr(ans,1,3))
        disp1_app = ans
      ENDIF --skip if combo

    CASE(2):  --two dispense controllers
      REPEAT
        CLR_STND_SCR(gm_status)
        WRITE(CR,d2dc_gmdata ,CR)--WRITE(CR, 'Two Dispense Controllers',CR)
        WRITE('1.',r2n_gmdata,CR)--WRITE('1. Robot Held Dual Nozzles',CR)
        WRITE('2.',d2p1e_gmdata,CR)--WRITE('2. Dual Pedestal with Single Nozzles On Each',CR)
        WRITE('3.',rnpn_gmdat,CR)--WRITE('3. Robot Held & Pedestal Held Nozzle',CR)
        WRITE(gdata_ans,'(1-3):') --WRITE('Answer: ')
        READ(ans)
      UNTIL(Verify_Answr(ans,1,3))
      disp2_app = ans
  ENDSELECT --dispense application select

  FOR disp_ctrl = 1 TO numdispctrl DO

     SELECT disp_ctrl OF
       CASE(1):  --first dispense controller
       
         REPEAT
           CLR_STND_SCR(gm_status)
           WRITE(CR,dtyp16gmdata,CR) --'What type of Dispensing System(E1)?'
           WRITE('1.',dtyp18gmdata,CR)--'1K System'
           WRITE('2.',dtyp19gmdata,CR)--'2K System'
           WRITE(gdata_ans,'(1-2):')--WRITE('Answer: ')
           READ(ans)
         UNTIL(Verify_Answr(ans,1,2))
         dispapp[disp_ctrl].ispare1 = ans                
       
         REPEAT
           CLR_STND_SCR(gm_status)
           WRITE(CR,dtype9gmdata,CR) --WRITE(CR,'Dispense Equip 1 Schedule Setup',CR)
           WRITE(CR,dtyp10gmdata,CR)--WRITE(CR,'Load Standard Disp Sched Defaults?',CR)
           WRITE('1.',yes_gmdata,CR)--WRITE('1. YES',CR)
           WRITE('2.',no_gmdata,CR)--WRITE('2. NO',CR)
           WRITE(gdata_ans,'(1-2):')--WRITE('Answer: ')
           READ(ans)
         UNTIL(Verify_Answr(ans,1,2))
         dispapp[disp_ctrl].disp_ldsc = ans

         IF (dispapp[disp_ctrl].disp_ldsc = wizans_yes) THEN --load dispense schedules
           REPEAT
             CLR_STND_SCR(gm_status)
             WRITE(CR,dtype9gmdata,CR)--WRITE(CR,'Dispense Equip 1 Schedule Setup',CR)
             WRITE(CR,dtyp11gmdata,CR)--WRITE(CR,'Type of Dozer used?',CR)
	     WRITE('1.',dtyp12gmdata,CR)--WRITE('1. 80cc',CR)
             WRITE('2.',dtyp13gmdata,CR)--WRITE('2. 160cc',CR)
             WRITE('3.',dtyp14gmdata,CR)--WRITE('3. Neither (no settings)',CR)
             WRITE(gdata_ans,'(1-3):')--WRITE('Answer: ')
             READ(ans)
           UNTIL(Verify_Answr(ans,1,3))
           dispapp[disp_ctrl].disp_dozr = ans
         ENDIF

       CASE(2):   --second dispense controller

         REPEAT
           CLR_STND_SCR(gm_status)
           WRITE(CR,dtyp17gmdata,CR) --'What type of Dispensing System(E2)?'
           WRITE('1.',dtyp18gmdata,CR)--'1K System'
           WRITE('2.',dtyp19gmdata,CR)--'2K System'
           WRITE(gdata_ans,'(1-2):')--WRITE('Answer: ')
           READ(ans)
         UNTIL(Verify_Answr(ans,1,2))
         dispapp[disp_ctrl].ispare1 = ans         

         REPEAT
           CLR_STND_SCR(gm_status)
           WRITE(CR,dtyp15gmdata,CR)--WRITE(CR,'Dispense Equip 2 Schedule Setup',CR)
           WRITE(CR,dtyp10gmdata,CR)--WRITE(CR,'Load Standard Disp Sched Defaults?',CR)
           WRITE('1.',yes_gmdata,CR)--WRITE('1. YES',CR)
           WRITE('2.',no_gmdata,CR)--WRITE('2. NO',CR)
           WRITE(gdata_ans,'(1-2):')--WRITE('Answer: ')
           READ(ans)
         UNTIL(Verify_Answr(ans,1,2))
         dispapp[disp_ctrl].disp_ldsc = ans

         IF (dispapp[disp_ctrl].disp_ldsc = wizans_yes) THEN --load dispense schedules
           REPEAT
             CLR_STND_SCR(gm_status)
             WRITE(CR,dtyp15gmdata,CR)
             WRITE(CR,dtyp11gmdata,CR)--WRITE(CR,'Dispense Equip 2 Schedule Setup',CR)
             WRITE('1.',dtyp12gmdata,CR) --WRITE(CR,'Type of Dozer used?',CR)
             WRITE('2.',dtyp13gmdata,CR)--WRITE('1. 80cc',CR)
             WRITE('3.',dtyp14gmdata,CR)--WRITE('2. 160cc',CR)
             WRITE(gdata_ans,'(1-3):') --WRITE('3. Neither (no settings)',CR)
             READ(ans)
           UNTIL(Verify_Answr(ans,1,3))
           dispapp[disp_ctrl].disp_dozr	= ans
         ENDIF
       ELSE:
     ENDSELECT
  ENDFOR

  IF ($sleqnum <> numdispctrl) THEN
    chk_repwr = TRUE
  ENDIF

--display text to mention ghost strokes at end of wizard
--    CLR_STND_SCR(gm_status)                -- Dispense setup will toggle',CR)
--    WRITE(CR,dtype5gmdata,CR)              -- screens when exiting WIZARD',CR)
--    WRITE(CR,dtype6gmdata,CR)              -- After hitting enter wait 30sec',CR)
--    WRITE(CR,dtype7gmdata,CR)              -- ***Press ENTER to continue***')
--   WRITE TPPROMPT (CR, enter_gmdata,'.')
--    READ TPPROMPT (CR)

END disp_app_wiz
-------------------------------------------------------------------
BEGIN

set_english
initdpwizvar
disp_app_wiz

END gmwizdp












