
-- -----------------------------------------------------------------------
--
--   MODULE:         GMCOLBIO.KL
--   TITLE:          GMCOLBIO PROGRAM
--
--
--   WRITTEN BY:     FANUC
--   REVISION DATE:  2019/08/23
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Collaborative Robot Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--              4.0   2019/08/23 marchaka         Iniital release                             
--
--
--
--
--------------------------------------------------------------------------
PROGRAM GMCOLBIO

%COMMENT = 'GM COLB I/O V4.0'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.

%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gm_var    -- GM variables

CONST

Version = '2019-08-23'
%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  ColbIO_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup collaborative I/O at least first time

  gm_status: INTEGER

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE klrdutil
%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables
-----------------------------------------------------------------------------
ROUTINE initCOLB_IO
-- PURPOSE: to initialize Programs associated with I/O setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(ColbIO_Setup) THEN
    ColbIO_Setup = FALSE
  ENDIF

END initColb_IO
-----------------------------------------------------------------------------
ROUTINE colb_rbt_io
-- PURPOSE: Setup collaborative I/O comments
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --Inputs
  SET_PORT_CMT(IO_DIN, 481, 'Confirm Payload', gm_status)
  SET_PORT_CMT(IO_DIN, 482, 'High Speed Mode', gm_status)

  --Outputs
  SET_PORT_CMT(IO_DOUT, 481, 'Contact Safe', gm_status)
  SET_PORT_CMT(IO_DOUT, 482, 'Contact Stop', gm_status)
  SET_PORT_CMT(IO_DOUT, 483, 'ContactStop Disb', gm_status)
  SET_PORT_CMT(IO_DOUT, 484, 'PushToEscapeAct', gm_status)
  SET_PORT_CMT(IO_DOUT, 485, 'Payload Changing', gm_status)
  SET_PORT_CMT(IO_DOUT, 486, 'AutoStatChkTMOUT', gm_status)
  SET_PORT_CMT(IO_DOUT, 487, 'Program Running', gm_status)
  SET_PORT_CMT(IO_DOUT, 488, 'Program Paused', gm_status)
  SET_PORT_CMT(IO_DOUT, 489, 'Dble Tap Output', gm_status)

  --Group Outputs
  SET_PORT_ASG(IO_GPOUT, 37, CellCommType, CellSlotNmbr,IO_DOUT,641,-8,gm_status)
  SET_PORT_ASG(IO_GPOUT, 38, CellCommType, CellSlotNmbr,IO_DOUT,649,-8,gm_status)
  SET_PORT_ASG(IO_GPOUT, 39, CellCommType, CellSlotNmbr,IO_DOUT,657,-8,gm_status)
  SET_PORT_ASG(IO_GPOUT, 40, CellCommType, CellSlotNmbr,IO_DOUT,665,-8,gm_status)

  SET_PORT_CMT(IO_GPOUT,37, 'Payload', gm_status)
  SET_PORT_CMT(IO_GPOUT,38, 'Force Monitor', gm_status)
  SET_PORT_CMT(IO_GPOUT,39, 'Payload Force', gm_status)
  SET_PORT_CMT(IO_GPOUT,40, 'Payload Moment', gm_status)

END colb_rbt_io
-----------------------------------------------------------------------------
ROUTINE colb_dcs_io
-- PURPOSE: Setup collaborative DCS I/O
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY: gmsafeio
--
--
-----------------------------------------------------------------------------
BEGIN

  di_cr_cfmpay = 481  -- Confirm Payload DI
  di_cr_hspdmd = 482 -- High Speed Mode DI

  do_cr_cntsaf = 481 -- Contact Safe DO
  do_cr_cntstp = 482 -- Contact Stop DO
  do_cr_cnstds = 483 -- Contact Stop Disabled DO
  do_cr_pshesc = 484 -- Push to Escape Active DO
  do_cr_paychg = 485 -- Payload Changing DO
  do_cr_autmot = 486 -- Auto Stauts Check Timeout DO
  do_cr_prgrun = 487 -- Program Running DO
  do_cr_prgpau = 488 -- Program Paused DO
  do_cr_dbltap = 489 -- Double Tap DO

  go_cr_payld  = 37 -- Payload GO
  go_cr_frcrsl = 38 -- Force Monitor Resultant GO
  go_cr_pfrcrl = 39 -- Payload Force Resultant GO
  go_cr_pmmtrl = 40 -- Payload Moment Resultant GO

  cso_cr_cntsf = 42 -- Contact Safe CSO
  cso_cr_cntst = 43 -- Contact Stop CSO
  cso_cr_pshes = 44 -- Push to Escape Mode CSO

  --Digital Inputs
  Set_I_sVar('$dcss_cllb[1].$dityp_pldcf', 1) --Confirm Payload Type
  Set_I_sVar('$dcss_cllb[1].$diidx_pldcf', di_cr_cfmpay)  --Confirm Payload Index
  Set_I_sVar('$dcss_cllb[1].$dityp_hispd', 1)  --High Speed Mode Type
  Set_I_sVar('$dcss_cllb[1].$diidx_hispd', di_cr_hspdmd)  --High Speed Mode Input

  --Digital Outputs
  Set_I_sVar('$dcss_cllb[1].$dotyp_safe', 2) --Contact Safe Type
  Set_I_sVar('$dcss_cllb[1].$doidx_safe', do_cr_cntsaf) --Contact Safe Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_stop', 2) --Contact Stop Type
  Set_I_sVar('$dcss_cllb[1].$doidx_stop', do_cr_cntstp) --Contact Stop Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_dsbl', 2) --Contact Stop Disabled Type
  Set_I_sVar('$dcss_cllb[1].$doidx_dsbl',do_cr_cnstds) --Contact Stop Disabled Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_escp', 2)  --Push to Escape Active Type
  Set_I_sVar('$dcss_cllb[1].$doidx_escp', do_cr_pshesc) --Push to Escpe Active Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_plchg', 2) --Payload Changing Type
  Set_I_sVar('$dcss_cllb[1].$doidx_plchg', do_cr_paychg) --Payload Changing Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_tmout', 2) --Auto Status Check Timeout Type
  Set_I_sVar('$dcss_cllb[1].$doidx_tmout', do_cr_autmot) --Auto Status Check Timeout Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_run', 2) --Program Running Type
  Set_I_sVar('$dcss_cllb[1].$doidx_run', do_cr_prgrun) --Program Running Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_pause', 2) --Program Paused Type
  Set_I_sVar('$dcss_cllb[1].$doidx_pause', do_cr_prgpau) --Program Paused Index
  Set_I_sVar('$dcss_cllb[1].$dotyp_tap', 2) --Double Tap Type
  Set_I_sVar('$dcss_cllb[1].$doidx_tap', do_cr_dbltap) --Double Tap Index

  --Group Outputs
  Set_I_sVar('$dcss_cllb[1].$gotyp_pldnm', 19) --Payload Type
  Set_I_sVar('$dcss_cllb[1].$goidx_pldnm', go_cr_payld) --Payload Index
  Set_I_sVar('$dcss_cllb[1].$gotyp_extf', 19)  --Force Monitor Resultant Type
  Set_I_sVar('$dcss_cllb[1].$goidx_extf', go_cr_frcrsl) --Force Monitor Resultant Index
  Set_I_sVar('$dcss_cllb[1].$gotyp_fpt', 19)  --Payload Force Resultant Type
  Set_I_sVar('$dcss_cllb[1].$goidx_fpt', go_cr_pfrcrl) --Payload Force Resultant Index
  Set_I_sVar('$dcss_cllb[1].$gotyp_mpt', 19)  --Payload Moment Resultant Type
  Set_I_sVar('$dcss_cllb[1].$goidx_mpt', go_cr_pmmtrl) --Payload Moment Resultant Index

  --CSO Outputs
  Set_I_sVar('$dcss_cllb[1].$s_out_typ[2]', 11) --Contact Safe Type
  Set_I_sVar('$dcss_cllb[1].$s_out_idx[2]', cso_cr_cntsf) --Contact Safe Index
  Set_I_sVar('$dcss_cllb[1].$s_out_typ[3]', 11)  --Contact Stop Type
  Set_I_sVar('$dcss_cllb[1].$s_out_idx[3]', cso_cr_cntst)  --Contact Stop Index
  Set_I_sVar('$dcss_cllb[1].$s_out_typ[4]', 11)  --Push to Escape Mode Type
  Set_I_sVar('$dcss_cllb[1].$s_out_idx[4]', cso_cr_pshes) --Push to Escape Index

END colb_dcs_io
-----------------------------------------------------------------------------
ROUTINE set_colb_io
-- PURPOSE: setup collaborative robot I/O
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF (collab_rbt = TRUE) THEN --robot arm is a collaborative

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsIOCom) THEN
    ErrsInShop.ErrorsIOCom = 0
  ENDIF
  IF UNINIT(ColbIO_Setup) OR (Reset_Cell) THEN
    ColbIO_Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsIOCom -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('  Starting the Collaborative I/O Program GMCOLBIO', FALSE)

  IF (ColbIO_Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  Collaborative I/O Already Setup', FALSE)
    IF ExecSetupAgn('Collaborative I/O') THEN -- ask user if they want to setup again
      ColbIO_Setup = FALSE
    ELSE
      WriteLog('  Collaborative I/O already Complete', FALSE)
      WriteLog('  GMCOLBIO Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  --setup routines
  initCOLB_IO
  colb_rbt_io


  ErrsInShop.ErrorsIOCom =  ErrsInShop.ErrorsIOCom + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsIOCom -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('  Collaborative I/O setup Program GMCOLBIO had ' + int2str((ErrsInShop.ErrorsIOCom- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('  Collaborative I/O setup Program completed', FALSE)
    ColbIO_Setup = TRUE
  ENDIF

  WriteLog('', FALSE)

ENDIF --collaborative robot

END set_colb_io
-----------------------------------------------------------------------------
BEGIN

END GMCOLBIO
