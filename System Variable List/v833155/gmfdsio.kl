-- -----------------------------------------------------------------------
--
--   MODULE:         GMFDSIO.KL
--   TITLE:          GMFDSIO PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Application Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the I/O file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--         2016/10/27 marchaka Add gmwizlog logging functionality
--              4.1   2017/02/05 marchaka         Modify prompts for wizard rerun
--         	4.2   2018-04-04 schoensm 	  V8.33P05 updates 
--
--
--------------------------------------------------------------------------
PROGRAM GMFDSIO

%COMMENT = 'GM FDSI/O V4.2'
%PRIORITY = 50
%ALPHABETIZE

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%ENVIRONMENT iosetup -- Need for teh SET_PORT builtins
--%ENVIRONMENT SLDEF
%ENVIRONMENT swgdef
%ENVIRONMENT sgdef1
%ENVIRONMENT sysdef

%INCLUDE KLIOTYPS  -- need for the constant declared for IO_DIN/IO_DOUT
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

%INCLUDE gm_var    -- GM variables
%INCLUDE gmcfgbdy  -- GM wizard variables for body shop applications
%INCLUDE gmcfgfds  -- GM wizard variables for FDS Applications

%INCLUDE gmcfgcel  -- has the workcell variable setting for configuration   -- Reset_Cell = FALSE
%INCLUDE gmcfgtlc  -- GM tool change variables for configuration
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

%INCLUDE gmevrs4io -- GM custo variables

CONST
Version = '2018-04-04'
%INCLUDE gmcnstnt  -- Constant file for GM


VAR
Num, i,gm_status  :INTEGER -- Used for Temp vars
Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine

--StudnsrSetup IN SHADOW : ARRAY[Max_Stud_Eq] OF BOOLEAN -- indicates if the application has been setup before

fds_1_slot,
fds_2_Slot    IN CMOS: INTEGER -- used for which Node or Slot the Equiptment will use Def.=Ethernet

  psve               : INTEGER
 
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  FDSIO_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup FDS I/O at least first time

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE klrdutil
%INCLUDE gmrdutil -- has all GM common wizard routine in it

ROUTINE WeberFDS_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING;P_host_ip:STRING) FROM gmenetsu

-----------------------------------------------------------------------------
ROUTINE ChkFDSInit
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
  l_equip: INTEGER
  l_gun  : INTEGER


BEGIN

  IF UNINIT(FDSIO_Setup) THEN
    FDSIO_Setup = FALSE
  ENDIF

  -- Check Common application variable used in the program to be setup
  IF UNINIT(FDSCommType) THEN --set hook for multiple communications
    FDSCommType = Ethernet -- set it to 89
  ENDIF
  IF UNINIT(numfdsctrl) THEN
    numfdsctrl = 0
  ENDIF
  IF UNINIT(Reset_Cell) THEN
    Reset_Cell = FALSE
  ENDIF
  IF UNINIT(UseToolChngr) THEN
    UseToolChngr = FALSE
  ENDIF

  -- Check variable associated with FDS #1
  IF UNINIT(FDSSetup[1]) THEN
    FDSSetup[1] = FALSE
  ENDIF
  IF UNINIT(bshop_proc1) THEN
    bshop_proc1 = 0
  ENDIF
  IF UNINIT(fds_1_slot) THEN
    fds_1_slot = 11
  ENDIF

  -- Check variable associated with fds #2
  IF UNINIT(FDSSetup[2]) THEN
    FDSSetup[2] = FALSE
  ENDIF
  IF UNINIT(bshop_proc2) THEN
    bshop_proc2 = 0
  ENDIF
  IF UNINIT(fds_2_slot) THEN
    fds_2_slot = 11
  ENDIF

END ChkFDSInit


-----------------------------------------------------------------------------
ROUTINE FDSSetup_IO
-- PURPOSE: to setup and configure application equipemnt #1
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  ChkFDSInit

  -- Controller#1 INPUTS set the rack lenght so TP display is all inclusive of the 64 bits
  SET_PORT_ASG(io_din,1025,FDSCommType, fds_1_Slot,io_din,1,  -64, gm_status)
  IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
    POST_ERR(38000, 'Rack '+int2Str(FDSCommType)+' Slot ' +Int2str(fds_1_slot)+' Setup FAILED', gm_status, 0) --
    RETURN  -- Return, cant set this  leave so user will know not correct, probably wont work anyway
  ENDIF

  -- Controller#1 OUTPUTS set the rack lenght so TP display is all inclusive of the 64 bits
  SET_PORT_ASG(io_dout,1025,FDSCommType, fds_1_Slot,io_dout,1,  -24, gm_status)
  IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
    POST_ERR(38000, 'Rack '+int2Str(FDSCommType)+' Slot ' +Int2str(fds_1_slot)+' Setup FAILED', gm_status, 0) --
    RETURN  -- Return, cant set this  leave so user will know not correct, probably wont work anyway
  ENDIF



  --***********************************************************
  -- PLC INPUTS System#1
  --***********************************************************
  SET_PORT_CMT(IO_DIN,73,'diAutoRetryActive',gm_status)
  SET_PORT_CMT(IO_DIN,74,'diFDS1AutoSkpReq',gm_status)
  SET_PORT_CMT(IO_DIN,75,'diOutofTolAck',gm_status)

  --  Input Controller 1 Node 11
  SET_PORT_ASG(io_gpin,5,89,fds_1_Slot,io_din,9,-15,gm_status) 
  SET_PORT_CMT(io_gpin,5,'FDS1ErrCode',gm_status)

  SET_PORT_ASG(io_gpin,6,89,fds_1_Slot,io_din,49,-8,gm_status) 
  SET_PORT_CMT(io_gpin,6,'FDS1StepNumber',gm_status)


  --***********************************************************
  -- PLC OUTPUTS System#1
  --***********************************************************
  --  Outputs Controller 1 Node 11
  SET_PORT_CMT(IO_DOUT,73,'doP1ScrewsLow',gm_status)
  SET_PORT_CMT(IO_DOUT,74,'doFDSAutoSkip',gm_status)
  SET_PORT_CMT(IO_DOUT,75,'doAutoRetryActive',gm_status)
  SET_PORT_CMT(IO_DOUT,137,'doP2ScrewsLow',gm_status)

  SET_PORT_ASG(io_gpout,5,89,fds_1_Slot,io_dout,9,-16,gm_status) 
  SET_PORT_CMT(io_gpout,5,'FDS1ScrewID',gm_status)

  SET_PORT_ASG(io_gpout,6,89,1,io_dout,81,-8,gm_status) 
  SET_PORT_CMT(io_gpout,6,'FDS1NumSkpScrews',gm_status)

  SET_PORT_CMT(IO_DOUT,81,'doP1NumSkipsB1',gm_status)  
  SET_PORT_CMT(IO_DOUT,82,'doP1NumSkipsB2',gm_status)  
  SET_PORT_CMT(IO_DOUT,83,'doP1NumSkipsB3',gm_status)  
  SET_PORT_CMT(IO_DOUT,84,'doP1NumSkipsB4',gm_status)  
  SET_PORT_CMT(IO_DOUT,85,'doP1NumSkipsB5',gm_status)  
  SET_PORT_CMT(IO_DOUT,86,'doP1NumSkipsB6',gm_status)  
  SET_PORT_CMT(IO_DOUT,87,'doP1NumSkipsB7',gm_status) 
  SET_PORT_CMT(IO_DOUT,88,'doP1NumSkipsB8',gm_status) 


  --------------------------
  -- application controller #1 I/O
  --------------------------
  -- Welding INPUTS - Weld Controller 1    
  SET_PORT_CMT(IO_DIN,1025,'diFDS1SpindHome',gm_status) --  BA
  SET_PORT_CMT(IO_DIN,1026,'diFDS1SysOK',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1027,'diFDS1Ready',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1028,'diFDS1OK',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1029,'diFDS1NOK',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1030,'diFDS1LevelCntrl',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1031,'diFDS1PartEjectd',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1032,'diFDS1MaintReq',gm_status)  --  BA

  SET_PORT_CMT(IO_DIN,1033,'diFDS1ErrCodeB1',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1034,'diFDS1ErrCodeB2',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1035,'diFDS1ErrCodeB3',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1036,'diFDS1ErrCodeB4',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1037,'diFDS1ErrCodeB5',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1038,'diFDS1ErrCodeB6',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1039,'diFDS1ErrCodeB7',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1040,'diFDS1ErrCodeB8',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1041,'diFDS1ErrCodeB9',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1042,'diFDS1ErrCodeB10',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1043,'diFDS1ErrCodeB11',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1044,'diFDS1ErrCodeB12',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1045,'diFDS1ErrCodeB13',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1046,'diFDS1ErrCodeB14',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1047,'diFDS1ErrCodeB15',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1048,'diFDS1ErrCodeB16',gm_status)  --  BA

  FOR i = 1049 TO 1073 DO
     SET_PORT_CMT(IO_DIN,i,'(Reserved)',gm_status)  --  BA
  ENDFOR

  SET_PORT_CMT(IO_DIN,1074,'diFDS1LastStepB1',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1075,'diFDS1LastStepB2',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1076,'diFDS1LastStepB3',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1077,'diFDS1LastStepB4',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1078,'diFDS1LastStepB5',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1079,'diFDS1LastStepB6',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1080,'diFDS1LastStepB7',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1081,'diFDS1LastStepB8',gm_status)  --  BA

  FOR i = 1082 TO 1088 DO
     SET_PORT_CMT(IO_DIN,i,'(Reserved)',gm_status)  --  BA
  ENDFOR

  -- Welding OUTPUTS - Weld Controller 1    
  SET_PORT_CMT(IO_DOUT,1025,'doFDS1Auto',gm_status) --  BA
  SET_PORT_CMT(IO_DOUT,1026,'doFDS1ErrorAck',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1027,'doFDS1StartSignal',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1028,'doFDS1StartNull',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1029,'doFDS1DryCycle',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1030,'doFDS1HoldingAirOn',gm_status)  -- 3-26-18 sms V833P05
  SET_PORT_CMT(IO_DOUT,1031,'doFDS1PartEject',gm_status)
  SET_PORT_CMT(IO_DOUT,1032,'doFDS1ChngMtrRot',gm_status)  -- 3-26-18 sms V833P05

  SET_PORT_CMT(IO_DOUT,1033,'doFDS1CodeBitB1',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1034,'doFDS1CodeBitB2',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1035,'doFDS1CodeBitB3',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1036,'doFDS1CodeBitB4',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1037,'doFDS1CodeBitB5',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1038,'doFDS1CodeBitB6',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1039,'doFDS1CodeBitB7',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1040,'doFDS1CodeBitB8',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1041,'(Reserved)',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1042,'(Reserved)',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1043,'(Reserved)',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1044,'(Reserved)',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1045,'(Reserved)',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1046,'(Reserved)',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1047,'(Reserved)',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1048,'(Reserved)',gm_status)  --  BA

  FOR i = 1041 TO 1088 DO
     SET_PORT_CMT(IO_DOUT,i,'(Reserved)',gm_status)  --  BA
  ENDFOR

  --------------------------
  -- application controller #2 I/O
  --------------------------
    
  SET_PORT_CMT(IO_DIN,1153,'diFDS2SpindHome',gm_status) --  BA
  SET_PORT_CMT(IO_DIN,1154,'diFDS2SysOK',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1155,'diFDS2Ready',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1156,'diFDS2OK',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1157,'diFDS2NOK',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1158,'diFDS2LevelCntrl',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1159,'diFDS2PartEjectd',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1160,'diFDS2MaintReq',gm_status)  --  BA2

  SET_PORT_CMT(IO_DIN,1161,'diFDS2Ok/NoCdB1',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1162,'diFDS2Ok/NoCdB2',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1163,'diFDS2Ok/NoCdB3',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1164,'diFDS2Ok/NoCdB4',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1165,'diFDS2Ok/NoCdB5',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1166,'diFDS2Ok/NoCdB6',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1167,'diFDS2Ok/NoCdB7',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1168,'diFDS2Ok/NoCdB8',gm_status)  --  BA
-- Enet block was changed to smaller io size. Rest of IO not set -pgs
  SET_PORT_CMT(IO_DIN,1169,'diFDS2Ok/NoCdB9',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1170,'diFDS2Ok/NoCdB10',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1171,'diFDS2Ok/NoCdB11',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1172,'diFDS2Ok/NoCdB12',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1173,'diFDS2Ok/NoCdB13',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1174,'diFDS2Ok/NoCdB14',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1175,'diFDS2Ok/NoCdB15',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1176,'diFDS2Ok/NoCdB16',gm_status)  --  BA

  FOR i = 1177 TO 1184 DO
     SET_PORT_CMT(IO_DIN,i,'(Reserved)',gm_status)  --  BA
  ENDFOR

  SET_PORT_CMT(IO_DIN,1185,'diFDS2ErrCodeB1',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1186,'diFDS2ErrCodeB2',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1187,'diFDS2ErrCodeB3',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1188,'diFDS2ErrCodeB4',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1189,'diFDS2ErrCodeB5',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1190,'diFDS2ErrCodeB6',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1191,'diFDS2ErrCodeB7',gm_status)  --  BA
  SET_PORT_CMT(IO_DIN,1192,'diFDS2ErrCodeB8',gm_status)  --  BA

  FOR i = 1193 TO 1216 DO
     SET_PORT_CMT(IO_DIN,i,'(Reserved)',gm_status)  --  BA
  ENDFOR

  -- Controller 2 Outputs
  SET_PORT_CMT(IO_DOUT,1153,'doFDS2Auto',gm_status) --  BA
  SET_PORT_CMT(IO_DOUT,1154,'doFDS2ErrorAck',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1155,'doFDS2StartSignal',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1156,'doFDS2StartNull',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1157,'doFDS2DryCycle',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1158,'doFDS2ChngMtrRot',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1159,'doFDS2PartEject',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1160,'doFDS2MvWorkPos',gm_status)  --  BA

  SET_PORT_CMT(IO_DOUT,1161,'doFDS2CodeBitB1',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1162,'doFDS2CodeBitB2',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1163,'doFDS2CodeBitB3',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1164,'doFDS2CodeBitB4',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1165,'doFDS2CodeBitB5',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1166,'doFDS2CodeBitB6',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1167,'doFDS2CodeBitB7',gm_status)  --  BA
  SET_PORT_CMT(IO_DOUT,1168,'doFDS2CodeBBit8',gm_status)  --  BA

  FOR i = 1169 TO 1 DO
     SET_PORT_CMT(IO_DOUT,i,'(Reserved)',gm_status)  --  BA
  ENDFOR

  IF (FDSCommType = Ethernet) THEN
    WeberFDS_EIP(fds_1_slot,'FDS1','')
  ENDIF

END FDSSetup_IO


-----------------------------------------------------------------------------
ROUTINE setfdsiovr
-- PURPOSE: setup application I/O variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
x: INTEGER
a: STRING[4]

BEGIN

--FOR x = 1 TO numfdsctrl DO
--  CNV_INT_STR(x, 1, 0, a)
--  a = SUB_STR(a, 2, 3)
--  Set_I_sVar('$SLIOMAP[' + a + '].DI_DISP_RDYT',1)


END setfdsiovr

-----------------------------------------------------------------------------
ROUTINE setfds_inct
-- PURPOSE: set FDS interconnects
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (bshop_proc1 = fdsappl) THEN    
    Set_B_sVar('$thrsditable[40].$thr_enb', TRUE)                        
    Set_I_sVar('$thrsditable[40].$di_no', 1030) 		     
    Set_I_sVar('$thrsditable[40].$do_no', 73)  
  
    Set_B_sVar('$thrsditable[42].$thr_enb', TRUE)                         
    Set_I_sVar('$thrsditable[42].$di_no', 74)		     
    Set_I_sVar('$thrsditable[42].$do_no', 74)
  ENDIF

END setfds_inct



-----------------------------------------------------------------------------
ROUTINE set_fds_IO
-- PURPOSE: sets application IO
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF (numfdsctrl <> 0) THEN -- application has FDS

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsIOCom) THEN
    ErrsInShop.ErrorsIOCom = 0
  ENDIF
  IF UNINIT(FDSIO_Setup) OR (Reset_Cell) THEN
    FDSIO_Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsIOCom -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('  Starting the FDS I/O Program GMFDSIO', FALSE)

  IF (FDSIO_Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  FDS I/O Already Setup', FALSE)
    IF ExecSetupAgn('FDS I/O') THEN -- ask user if they want to setup again
      FDSIO_Setup = FALSE
    ELSE
      WriteLog('  FDS I/O already Complete', FALSE)
      WriteLog('  GMFDSIO Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF
					
  ChkFDSInit
  FDSSetup_IO  --set controller 1 I/O
  setfds_inct  --set fds interconnects

  ErrsInShop.ErrorsIOCom =  ErrsInShop.ErrorsIOCom + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsIOCom -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('  FDS I/O setup Program GMFDSIO had ' + int2str((ErrsInShop.ErrorsIOCom- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('  FDS I/O setup Program completed', FALSE)
    FDSIO_Setup = TRUE
  ENDIF

  WriteLog('', FALSE)

ENDIF

END set_fds_IO


-----------------------------------------------------------------------------
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN

set_fds_IO

END GMFDSIO

















