-- -----------------------------------------------------------------------
--
--   MODULE:         GMMHPRGS.KL
--   TITLE:          GMMHPRGS PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Material Handling variable setup files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZMH,GMWIZVIS are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--                    5/15/16    R.Kosaski        clean up and fixes
--                    6/6/16     R.Kosaski        removed DMSTAT from load because not on FRS
--                                                and already laoded on controller
--                    6/14/16    R.Kosaski        Added code for decentralized vacuum
--                    6/15/16    R.Kosaski        Changed macro names to be TP name not customization name
--                    7/06/16    R.Kosaski        Edited so VACPUMPTYPE could be zero in Press world
--                    9/01/16    marchaka         Replaced define_macro with Setup_Macro from gmutility
--                                                because it fails in FRVRC sometimes
--                    5/12/16    marchaka         Load chkpart.pt.  Setup chkpart in macro table slot 132.
--         4.1        1/11/17    marchaka         All loading of MH programs that are required for all
--                                                MH applications.
--         4.1        2017/03/28 marchaka         Only load templa05 and templa50 for bodyshop and powertrain.
--         4.2        2018/07/17 baker            Changed some macro instruction names and assignemnts
--         4.3        2018/09/25 schoensm         V8.33P06 updates MOV_RCVY and SET_RCVY. Remove 3rd valve pack msg.
--         4.3        2019/01/13 KosaskiRR        Added GRPCYCLCNFRM.TP loading when MH.
--         4.4        2019/08/25 marchaka         Load double blank sensor TP programs for body shop
--------------------------------------------------------------------------
PROGRAM GMMHPRGS

%COMMENT = 'MH PRGS V4.4'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%ENVIRONMENT IOSETUP -- Required for the I/O Builtin support
%ENVIRONMENT SYSDEF  -- required for the $group[1]. variable
%ENVIRONMENT MNMCDEF -- needed for the Macro Table vars
%ENVIRONMENT TPE -- required for the program attribute settings

%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
%INCLUDE gmevrlng  -- Required for the "gmlang1" routine and its variables
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

CONST

Version = '2019-08-25'

%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR

  l_i,i,        -- Used in FOR looping
  gm_status    : INTEGER
  prog_nam    : STRING[16] -- used for place holder for prgram name

  StrtinErs   : INTEGER   -- How many errors Programs error counter had when the program started
  SmrtP1McroDn IN SHADOW  : BOOLEAN -- indicate the Smart Pump#1 macro Programs have already beeen setup once
  SmrtP2McroDn IN SHADOW  : BOOLEAN -- indicate the Smart Pump#2 macro Programs have already beeen setup once
  DcntrlMcroDn IN SHADOW  : BOOLEAN -- indicate the Decentralized macro Programs have already beeen setup once
  Prg_MH_Setup IN SHADOW  :BOOLEAN -- tracks if the programs have already been loaded
  MH_McrosDone IN SHADOW  : BOOLEAN -- indicate the Material Handling macro Programs have already beeen setup once
  OutMacSetup  IN SHADOW : ARRAY[Max_OutBlks] OF BOOLEAN -- indicates if the Valve Pack Macros setup before

 -- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

-- variables declares for Shop specifics
%INCLUDE gmcfgprs  -- GM wizard variables for press Applications

-- Variables declared for Applications
%INCLUDE gmcfgmh   -- GM wizard variables for MH Applications

%INCLUDE GMRDUTIL -- has copy_file routine,
ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
-----------------------------------------------------------------------------
ROUTINE ld_sp1_macs
-- This routine's load all smart pump #1 macros for the manual functions menu
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(Use_Press) THEN
  Use_Press = FALSE
ENDIF
IF UNINIT(SmrtP1McroDn) THEN
  SmrtP1McroDn = FALSE
ENDIF
  IF Use_Press THEN -- press will load their own Unique programs
    RETURN
  ENDIF

    WriteLog('  Smart Pump#1 Routine ld_sp1_macs in GMMHPRGS Started',FALSE)

-- If Already executed you must ask user if they want to do again
  IF (SmrtP1McroDn = TRUE) THEN -- setup has already been setup
    WriteLog('  Smart Pump#1 Macros Already Setup',FALSE)
    WRITE TPERROR(CHR(cc_clear_win),'Smart Pump#1 Macros Already Setup')
    IF ExecSetupAgn('Smart Pump#1') THEN -- ask user if they want to setup again
      SmrtP1McroDn = FALSE
    ELSE
      WriteLog('  Smart Pump#1 Routine ld_sp1_macs in GMMHPRGS Cancelled',FALSE)
      RETURN
    ENDIF
  ENDIF

--  Load_File('FRS:','DCD_DROP.TP',0)
--  Load_File('FRS:','DCD_PICK.TP',0)
--  Load_File('FRS:','DCD_TMPL.TP',1)

  -- Karel Gripper Custom Files
  --Load_File('FRS:','DMSTAT.PC',1)
  WriteLog('  Macros for Smart Pump#1 Loading',FALSE)

  prog_nam = 'blowoff'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('BLOWOFF')
  Set_I_sVar('$MACROTABLE[138].$SYS_LEV_MSK', 0)
  Load_File('FRS:','BLOWOFF.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(138, 'Turn OFF Blowoff'   ,   'BLOWOFF', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[138].$SYS_LEV_MSK',3)

  prog_nam = 'vacuumon'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('VACUUMON')
  Set_I_sVar('$MACROTABLE[136].$SYS_LEV_MSK',0)
  Load_File('FRS:','VACUUMON.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(136, 'Turn ON Vacuum'   ,   'VACUUMON', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[136].$SYS_LEV_MSK', 3)

  prog_nam = 'vacuumof'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('VACUUMOF')
  Set_I_sVar('$MACROTABLE[137].$SYS_LEV_MSK',0)
  Load_File('FRS:','VACUUMOF.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(137, 'Turn OFF Vacuum'   ,   'VACUUMOF', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[137].$SYS_LEV_MSK',3)

  prog_nam = 'droppart'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('droppart')
  Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK',0)
  Load_File('FRS:','DROPPART.TP',1) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(131, 'Release Part'   ,   'DROPPART', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK',3)

  -- Vacuum macros for manual functions page
  Load_File('FRS:','VAC_ON1.TP',0)
  Load_File('FRS:','VAC_ON2.TP',0)
  Setup_Macro(151, 'VACxxxCH1ON',  'VAC_ON1', 4,50,FALSE)
  Setup_Macro(152, 'VACxxxCH2ON',  'VAC_ON2', 1,51,FALSE)
  Load_File('FRS:','VAC_OFF1.TP',0)
  Load_File('FRS:','VAC_OFF2.TP',0)
  Setup_Macro(155, 'VACxxxCH1OFF',  'VAC_OFF1', 4,54,FALSE)
  Setup_Macro(156, 'VACxxxCH2OFF',  'VAC_OFF2', 1,55,FALSE)
  Load_File('FRS:','BLOW_OF1.TP',0)
  Load_File('FRS:','BLOW_OF2.TP',0)
  Setup_Macro(159, 'BLOWOFF1OFF',  'BLOW_OF1', 4,58,FALSE)
  Setup_Macro(160, 'BLOWOFF2OFF',  'BLOW_OF2', 1,59,FALSE)

   SmrtP1McroDn = TRUE

  WriteLog('  Smart Pump#1 Routine ld_sp1_macs in GMMHPRGS Completed',FALSE)

END ld_sp1_macs
-----------------------------------------------------------------------------
ROUTINE ld_sp2_macs
-- This routine's load all smart pump #2 macros for the manual functions menu
-----------------------------------------------------------------------------
BEGIN
IF UNINIT(Use_Press) THEN
  Use_Press = FALSE
ENDIF
IF UNINIT(SmrtP2McroDn) THEN
  SmrtP2McroDn = FALSE
ENDIF
  IF Use_Press THEN -- press will load their own Unique programs
    RETURN
  ENDIF

  WriteLog('  Smart Pump#2 Routine ld_sp2_macs in GMMHPRGS Started',FALSE)

-- If Already executed you must ask user if they want to do again
  IF (SmrtP2McroDn = TRUE) THEN -- setup has already been setup
    WriteLog('  Smart Pump#2 Macros Already Setup',FALSE)
    WRITE TPERROR(CHR(cc_clear_win),'Smart Pump#2 Macros Already Setup')
    IF ExecSetupAgn('Smart Pump#2') THEN -- ask user if they want to setup again
      SmrtP2McroDn = FALSE
    ELSE
      WriteLog('  Smart Pump#2 Routine ld_sp2_macs in GMMHPRGS Cancelled',FALSE)
      RETURN
    ENDIF
  ENDIF

  WriteLog('  Macros for Smart Pump#2 Loading',FALSE)

 -- Vacuum macros for manual functions page
  Load_File('FRS:','VAC_ON3.TP',0)
  Load_File('FRS:','VAC_ON4.TP',0)
  Setup_Macro(153, 'VACxxxCH3ON',  'VAC_ON3', 1,52,FALSE)
  Setup_Macro(154, 'VACxxxCH4ON',  'VAC_ON4', 1,53,FALSE)

  Load_File('FRS:','VAC_OFF3.TP',0)
  Load_File('FRS:','VAC_OFF4.TP',0)
  Setup_Macro(157, 'VACxxxCH3OFF',  'VAC_OFF3', 1,56,FALSE)
  Setup_Macro(158, 'VACxxxCH4OFF',  'VAC_OFF4', 1,57,FALSE)

  Load_File('FRS:','BLOW_OF3.TP',0)
  Load_File('FRS:','BLOW_OF4.TP',0)
  Setup_Macro(161, 'BLOWOFF3OFF',  'BLOW_OF3', 1,60,FALSE)
  Setup_Macro(162, 'BLOWOFF4OFF',  'BLOW_OF4', 1,61,FALSE)

  SmrtP2McroDn = TRUE

  WriteLog('  Smart Pump#2 Routine ld_sp2_macs in GMMHPRGS Completed',FALSE)

END ld_sp2_macs
-----------------------------------------------------------------------------
ROUTINE LoadMH_Macro
-- PURPOSE: to load macros for gripper functions
--
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-----------------------------------------------------------------------------

BEGIN
IF UNINIT(NumEOATOtMan) THEN
  NumEOATOtMan = 0
ENDIF

IF NumEOATOtMan = 0 THEN
  RETURN
ENDIF

IF UNINIT(Use_Press) THEN
  Use_Press = FALSE
ENDIF
FOR i = 1 TO (ARRAY_LEN (OutMacSetup)) DO
  IF UNINIT(OutMacSetup[i]) THEN
    OutMacSetup[i] = FALSE
  ENDIF
ENDFOR --
-- 130-140 macros to be add

--Grip Part GRIPPART
--Release Part  DROPPART
--Part Present  CHKPART
--Check No Part CHKNOPRT
--Prepare to Pick OKTOPICK
--Clear to Proceed  CLR2PRCD
--Turn ON Vacuum  VACUUMON
--Turn OFF Vacuum VACUUMOF
--Turn OFF Blowoff  BLOWOFF
--Set CurrentValve  SETVALVE
--Set MH Tool SET_TOOL

 FOR i = 1 TO NumEOATOtMan DO
  IF (OutMacSetup[i] = TRUE) THEN -- setup has already been setup
    WriteLog('  Macros for Valve#' +int2str(i)+ ' Already Setup',FALSE)
    WRITE TPERROR(CHR(cc_clear_win),'Macros for Valve Manifold',i,' Already Setup')
    IF ExecSetupAgn('Macros for Valve#'+int2Str(i)) THEN -- ask user if they want to setup again
      OutMacSetup[i]=FALSE
    ENDIF
  ENDIF

  SELECT (i) OF --
    CASE (1):  -- Valve Pack #1
      IF NOT (OutMacSetup[1]) THEN -- if not setup previously or user said set again.
        WriteLog('  Macros for Valve Pack#' +int2str(i)+ ' Loading',FALSE)

        Load_File('FRS:','CLSV1T1.TP',1)
        Load_File('FRS:','CLSV2T1.TP',1)
        Load_File('FRS:','CLSV3T1.TP',1)
        Load_File('FRS:','CLSV4T1.TP',1)
        Load_File('FRS:','CLSV5T1.TP',1)
        Setup_Macro(141, 'CLSxxxxxxV1',  'CLSV1T1', 4,30,FALSE)
        Setup_Macro(142, 'CLSxxxxxxV2',  'CLSV2T1', 1,31,FALSE)
        Setup_Macro(143, 'CLSxxxxxxV3',  'CLSV3T1', 1,32,FALSE)
        Setup_Macro(144, 'CLSxxxxxxV4',  'CLSV4T1', 1,33,FALSE)
        Setup_Macro(145, 'CLSxxxxxxV5',  'CLSV5T1', 1,34,FALSE)
        Load_File('FRS:','OPNV1T1.TP',1)
        Load_File('FRS:','OPNV2T1.TP',1)
        Load_File('FRS:','OPNV3T1.TP',1)
        Load_File('FRS:','OPNV4T1.TP',1)
        Load_File('FRS:','OPNV5T1.TP',1)
        Setup_Macro(146, 'OPNxxxxxxV1',  'OPNV1T1', 4,40,FALSE)
        Setup_Macro(147, 'OPNxxxxxxV2',  'OPNV2T1', 1,41,FALSE)
        Setup_Macro(148, 'OPNxxxxxxV3',  'OPNV3T1', 1,42,FALSE)
        Setup_Macro(149, 'OPNxxxxxxV4',  'OPNV4T1', 1,43,FALSE)
        Setup_Macro(150, 'OPNxxxxxxV5',  'OPNV5T1', 1,44,FALSE)
        WriteLog('  Valve Pack#' +int2str(i)+ ' Macros Complete',FALSE)
      ENDIF

    CASE (2):  -- the Second Valve Pack

      IF NOT (OutMacSetup[2]) THEN -- if not setup previously or user said set again.
        WriteLog('  Macros for Valve Pack#' +int2str(i)+ ' Loading',FALSE)
        Load_File('FRS:','CLSV6T1.TP',1)
        Load_File('FRS:','CLSV7T1.TP',1)
        Load_File('FRS:','CLSV8T1.TP',1)
        Load_File('FRS:','CLSV9T1.TP',1)
        Load_File('FRS:','CLSV10T1.TP',1)
        Setup_Macro(171, 'CLSxxxxxxV6',  'CLSV6T1', 4,35,FALSE)
        Setup_Macro(172, 'CLSxxxxxxV7',  'CLSV7T1', 1,36,FALSE)
        Setup_Macro(173, 'CLSxxxxxxV8',  'CLSV8T1', 1,37,FALSE)
        Setup_Macro(174, 'CLSxxxxxxV9',  'CLSV9T1', 1,38,FALSE)
        Setup_Macro(175, 'CLSxxxxxxV10',  'CLSV10T1', 1,39,FALSE)

        Load_File('FRS:','OPNV6T1.TP',1)
        Load_File('FRS:','OPNV7T1.TP',1)
        Load_File('FRS:','OPNV8T1.TP',1)
        Load_File('FRS:','OPNV9T1.TP',1)
        Load_File('FRS:','OPNV10T1.TP',1)
        Setup_Macro(176, 'OPNxxxxxxV6',  'OPNV6T1', 4,45,FALSE)
        Setup_Macro(177, 'OPNxxxxxxV7',  'OPNV7T1', 1,46,FALSE)
        Setup_Macro(178, 'OPNxxxxxxV8',  'OPNV8T1', 1,47,FALSE)
        Setup_Macro(179, 'OPNxxxxxxV9',  'OPNV9T1', 1,48,FALSE)
        Setup_Macro(180, 'OPNxxxxxxV10',  'OPNV10T1', 1,49,FALSE)
        WriteLog('  Valve Pack#' +int2str(i)+ ' Macros Complete',FALSE)
      ENDIF
    CASE (3):  --
        WriteLog('  Macros for Valve Pack#' +int2str(i)+ ' Loading',FALSE)
        WriteLog('  Valve Pack#' +int2str(i)+ ' Macros Complete',FALSE)
    ELSE: --
      POST_ERR(38000, 'Unknown Valve#'+int2str(i)+' ininit_MH_PRGS' , 0, 0) --
   ENDSELECT --

ENDFOR --

END LoadMH_Macro
-----------------------------------------------------------------------------
ROUTINE ld_DeVacMacs
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-----------------------------------------------------------------------------
BEGIN
   IF UNINIT(Use_Press) THEN
  Use_Press = FALSE
ENDIF
IF UNINIT(DcntrlMcroDn) THEN
  DcntrlMcroDn = FALSE
ENDIF
  IF Use_Press THEN -- press will load their own Unique programs
    RETURN
  ENDIF

    WriteLog('  Decentralized Routine ld_DeVacMacs in GMMHPRGS Started',FALSE)

-- If Already executed you must ask user if they want to do again
  IF (DcntrlMcroDn = TRUE) THEN -- setup has already been setup
    WriteLog('  DeCentral Vac Macros Already Setup',FALSE)
    WRITE TPERROR(CHR(cc_clear_win),'DeCentral Vac Macros Already Setup')
    IF ExecSetupAgn('DeCentral Vac') THEN -- ask user if they want to setup again
      DcntrlMcroDn = FALSE
    ELSE
      WriteLog('  DeCentral Vac Routine ld_DeVacMacs in GMMHPRGS Cancelled',FALSE)
      RETURN
    ENDIF
  ENDIF

--  Load_File('FRS:','DCD_DROP.TP',0)
--  Load_File('FRS:','DCD_PICK.TP',0)
--  Load_File('FRS:','DCD_TMPL.TP',1)

  -- Karel Gripper Custom Files
  WriteLog('  Macros for Decentralized Vacuum Loading',FALSE)

  prog_nam = 'vacuumon'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('VACUUMON')
  Set_I_sVar('$MACROTABLE[136].$SYS_LEV_MSK',0)
  Load_File('FRS:','VACUUMON.TP',1) -- Must reload standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(136, 'Turn ON Vacuum'   ,   'VACUUMON', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[136].$SYS_LEV_MSK', 3)

  prog_nam = 'vacuumof'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('VACUUMOF')
  Set_I_sVar('$MACROTABLE[137].$SYS_LEV_MSK',0)
  Load_File('FRS:','VACUUMOF.TP',1) -- Must reload standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(137, 'Turn OFF Vacuum'   ,   'VACUUMOF', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[137].$SYS_LEV_MSK',3)

  prog_nam = 'blowoff'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('BLOWOFF')
  Set_I_sVar('$MACROTABLE[138].$SYS_LEV_MSK', 0)
  Load_File('FRS:','BLOWOFF.TP',1) -- Must reload standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(138, 'Turn OFF Blowoff'   ,   'BLOWOFF', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[138].$SYS_LEV_MSK',3)

  prog_nam = 'droppart'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('droppart')
  Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK',0)
  Load_File('FRS:','DROPPART.TP',1) -- Must reload standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(131, 'Release Part'   ,   'DROPPART', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK',3)

  -- Vacuum macros for manual functions page
  Load_File('FRS:','VAC1T1ON.TP',0)
  Load_File('FRS:','VAC2T1ON.TP',0)
  Load_File('FRS:','VAC3T1ON.TP',0)
  Load_File('FRS:','VAC4T1ON.TP',0)
  Setup_Macro(151, 'VACxxxCH1ON',  'VAC1T1ON', 4,50,FALSE)
  Setup_Macro(152, 'VACxxxCH2ON',  'VAC2T1ON', 1,51,FALSE)
  Setup_Macro(153, 'VACxxxCH3ON',  'VAC3T1ON', 1,52,FALSE)
  Setup_Macro(154, 'VACxxxCH4ON',  'VAC4T1ON', 1,53,FALSE)

  Load_File('FRS:','VAC1T1OF.TP',0)
  Load_File('FRS:','VAC2T1OF.TP',0)
  Load_File('FRS:','VAC3T1OF.TP',0)
  Load_File('FRS:','VAC4T1OF.TP',0)
  Setup_Macro(155, 'VACxxxCH1OFF',  'VAC1T1OF', 4,54,FALSE)
  Setup_Macro(156, 'VACxxxCH2OFF',  'VAC2T1OF', 1,55,FALSE)
  Setup_Macro(157, 'VACxxxCH3OFF',  'VAC3T1OF', 1,56,FALSE)
  Setup_Macro(158, 'VACxxxCH4OFF',  'VAC4T1OF', 1,57,FALSE)

  Load_File('FRS:','BLWOF1T1.TP',0)
  Load_File('FRS:','BLWOF2T1.TP',0)
  Load_File('FRS:','BLWOF3T1.TP',0)
  Load_File('FRS:','BLWOF4T1.TP',0)
  Setup_Macro(159, 'BLOWOFF1OFF',  'BLWOF1T1', 4,58,FALSE)
  Setup_Macro(160, 'BLOWOFF2OFF',  'BLWOF2T1', 1,59,FALSE)
  Setup_Macro(161, 'BLOWOFF3OFF',  'BLWOF3T1', 1,60,FALSE)
  Setup_Macro(162, 'BLOWOFF4OFF',  'BLWOF4T1', 1,61,FALSE)
   DcntrlMcroDn = TRUE

  WriteLog('  Routine ld_DeVacMacs in GMMHPRGS Completed',FALSE)

  RETURN
END ld_DeVacMacs
-----------------------------------------------------------------------------
ROUTINE init_BS_Prg
-- PURPOSE: Load MH Programs that are unique to Body Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
IF UNINIT(Use_Vacuum) THEN
  Use_Vacuum = FALSE
ENDIF
  writeLog('  Loading MH Programs for Body Shop', FALSE)

 -- Bodyshop Only
IF Use_Vacuum THEN
   SELECT (VacPumpType) OF --
     CASE (1):  -- 1 pump
             ld_sp1_macs
     CASE (2):  -- 2 pumps
             ld_sp1_macs
             ld_sp2_macs
     CASE (3):  -- Decentralized
             ld_DeVacMacs
     ELSE: --
       POST_ERR(38000, 'VACPUMPTYPE=' +int2str(VacPumpType) +' in init_BS_prg Routine INVALID', 0, 0) --
   ENDSELECT --
ENDIF

  LoadMH_Macro

  --double blank sensor
  Load_File('FRS:','phd_chk.tp',1)
  Load_File('FRS:','phdrcvry.tp',1)
  Load_File('FRS:','quickclose.tp',1)
  Load_File('FRS:','set_phd_di.tp',1)
  Load_File('FRS:','sxxpk_to_clr.tp',1)
  Load_File('FRS:','tm2prtchkpick.tp',1)
  Load_File('FRS:','qclose.pc',1)
  Setup_Macro(191,'PHD CHECK','PHD_CHK',1,0,FALSE)

  --load for all Body Shop MH applications...V8.33P08 sms
  Load_File('FRS:','bypsinpt.tp',1)
  Load_File('FRS:','chkdisbl.tp',1)
  Load_File('FRS:','pingrip_temp.tp',1)
  Load_File('FRS:','pinrel_temp.tp',1)

  writeLog('  Body Shop MH Programs loaded', FALSE)

END init_BS_Prg
-----------------------------------------------------------------------------
ROUTINE init_Prs_Prg
-- PURPOSE: Load MH Programs that are unique to Press Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

writeLog('  Loading MH Programs for Press Shop', FALSE)

  LoadMH_Macro

IF Use_Vacuum THEN
  SELECT (VacPumpType) OF --
    CASE (1):  -- 1 pump
            ld_sp1_macs
    CASE (2):  -- 2 pumps
            ld_sp1_macs
            ld_sp2_macs
    CASE (3):  -- Decentralized
            ld_DeVacMacs
    ELSE: --
    --  POST_ERR(38000, 'VACPUMPTYPE=' +int2str(VacPumpType) +' in init_PRS_prg Routine INVALID', 0, 0) --
  ENDSELECT --
ENDIF

writeLog('  Press Shop MH Programs loaded', FALSE)

END init_Prs_Prg
-----------------------------------------------------------------------------
ROUTINE init_Pwr_Prg
-- PURPOSE: Load vMH Programs that are unique to Powertrain Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(Use_Vacuum) THEN
  Use_Vacuum = FALSE
ENDIF

writeLog('  Loading MH Programs for Powertrain', FALSE)

  LoadMH_Macro

IF Use_Vacuum THEN
  SELECT (VacPumpType) OF --
    CASE (1):  -- 1 pump
            ld_sp1_macs
    CASE (2):  -- 2 pumps
            ld_sp1_macs
            ld_sp2_macs
    CASE (3):  -- Decentralized
            ld_DeVacMacs
    ELSE: --
      POST_ERR(38000, 'VACPUMPTYPE=' +int2str(VacPumpType) +' in init_PWR_prg Routine INVALID', 0, 0) --
  ENDSELECT --
ENDIF

writeLog('  Powertrain MH Programs loaded', FALSE)

END init_Pwr_Prg
-----------------------------------------------------------------------------
ROUTINE init_Pnt_Prg
-- PURPOSE: Load MH Programs that are unique to Paint Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
       writeLog('  Loading MH Programs for Paint Shop', FALSE)

       writeLog('  Paint Shop MH Programs loaded', FALSE)

END init_Pnt_Prg
-----------------------------------------------------------------------------
ROUTINE init_MH_PRGS
-- PURPOSE: to initialize Material Handling Programs associated with Material Handling setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

FOR i = 1 TO ARRAY_LEN(OutMacSetup) DO
  IF UNINIT(OutMacSetup[i]) THEN
    OutMacSetup[i] = FALSE
  ENDIF
ENDFOR --
IF UNINIT(Prg_MH_Setup) THEN
  Prg_MH_Setup = FALSE
ENDIF
IF UNINIT(Use_Press) THEN
  Use_Press = FALSE
ENDIF
IF UNINIT(Use_Vacuum) THEN
  Use_Vacuum = FALSE
ENDIF

IF Prg_MH_Setup THEN
  IF NOT ExecSetupAgn('MH Programs') THEN -- ask user if they want to setup again
    RETURN
  ELSE
    Prg_MH_Setup = FALSE
  ENDIF
ENDIF

writeLog('  Loading Common MH Programs for ALL Shops', FALSE)

  -- Define these macros bacause the MH hard keys are disabled
  -- For general motors because of safety
  -- Valve macros for manual functions page
  Clear_Prog('DCD_DROP')
  SET_ATTR_PRG('DCD_DROP', AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','DCD_DROP.TP',1)
  SET_ATTR_PRG('DCD_PICK', AT_PROTECT, 1, prog_nam, gm_status)
  Load_File('FRS:','DCD_PICK.TP',1)

  -- Karel Gripper Custom Files
 -- Load_File('FRS:','DMSTAT.PC',1) -- 6-7-16 no need to load is part of ASI and invisable

  prog_nam = 'droppart'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('droppart')
  Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK',0)
  Load_File('FRS:','DROPPART.TP',1) -- Must reload standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(131, 'Release Part'   ,   'DROPPART', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[131].$SYS_LEV_MSK', 3)

  prog_nam = 'chkpart'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('chkpart')
  Set_I_sVar('$MACROTABLE[132].$SYS_LEV_MSK',0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Load_File('FRS:','CHKPART.TP',1) -- Must reload standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(132, 'Part Present'   ,   'CHKPART', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[132].$SYS_LEV_MSK',3)

  prog_nam = 'chknopart'
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  Clear_Prog('chknopart')
  Set_I_sVar('$MACROTABLE[133].$SYS_LEV_MSK',0)
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Load_File('FRS:','CHKNOPRT.TP',1) -- Must reload standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  Setup_Macro(133, 'Check No Part'   ,   'CHKNOPRT', 1, 0,TRUE)
  Set_I_sVar('$MACROTABLE[133].$SYS_LEV_MSK',3)

  --load for all MH applications...V8.33P06 sms
  Load_File('FRS:','mov_rcvy.tp',1)
  Load_File('FRS:','set_rcvy.tp',1)

  IF (mfg_area <> mfg_area_ps) THEN
    Load_File('FRS:','tmadcddr.tp',1)
    Load_File('FRS:','tmadcdpk.tp',1)
    Load_File('FRS:','tmdrop.tp',1)
    Load_File('FRS:','tmadrop.tp',1)
    Load_File('FRS:','tmdroppp.tp',1)
    Load_File('FRS:','tmpick.tp',1)
    Load_File('FRS:','tmapick.tp',1)
    Load_File('FRS:','tmpickpp.tp',1)
  ENDIF

  Load_File('FRS:','grpcyclcnfrm.tp',1) -- added by RK for manual cycle of valves 1-13-19

  SELECT mfg_area OF
    CASE(mfg_area_bs, mfg_area_pt):  --body shop and power train
      Load_File('FRS:','templa05.tp',1)
      Load_File('FRS:','templa50.tp',1)
    ELSE:
  ENDSELECT

writeLog('  ALL Shops Common MH Programs Loaded', FALSE)

SELECT mfg_area OF -- launch the Display Setup set by wizard or load feature
    CASE(mfg_area_bs):  --Body Shop
        init_BS_Prg
    CASE(mfg_area_ps):  --Press Shop
        init_Prs_Prg
    CASE(mfg_area_pt):  --Powertrain
        init_Pwr_Prg
    CASE(mfg_area_pn):  --Paint Shop
        init_Pnt_Prg
  ELSE:
    POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in init_MH_PRGS routine in GMMHPRGS', 0, 0) --
    shop_str = 'Unknown'
ENDSELECT

Prg_MH_Setup = TRUE

END init_MH_PRGS
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN
-- Check these here instead of a routine so can return to calling routine
IF UNINIT(mfg_area) THEN
  POST_ERR(38000, 'MFG_AREA not setup in GMMHPRGS program', 0, 0) --
  RETURN
ENDIF
IF UNINIT(Use_Press) THEN
  Use_Press = FALSE
ENDIF
IF UNINIT(Use_MH_Tool) THEN
  POST_ERR(38000, 'Use_MH_Tool not setup in GMMHPRGS program', 0, 0) --
  RETURN
ENDIF
IF UNINIT(ErrsInShop.ErrorsPrgrms) THEN
  ErrsInShop.ErrorsPrgrms = 0
ENDIF
IF UNINIT(Prg_MH_Setup) THEN
  Prg_MH_Setup = FALSE
ENDIF

 StrtinErs = ErrsInShop.ErrorsPrgrms -- grab current eror count
 ClrUtltyErrs -- Clear all error in utility program to be used when done

 WriteLog('  Starting the MH Program setup Program', FALSE)

  IF (Prg_MH_Setup = TRUE) THEN -- setup has already been setup
      WriteLog('  MH Programs Already Setup', FALSE)
    IF ExecSetupAgn('MH Programs') THEN -- ask user if they want to setup again
      Prg_MH_Setup = FALSE
    ELSE
      WriteLog('  MH Program already Complete', FALSE)
      WriteLog('  GMMHPRGS Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  IF (USE_MH_TOOL) THEN
    init_MH_PRGS -- Initialize program data
  ELSE
    POST_ERR(38000, 'USE_MH_TOOL is FALSE in GMMHPRGS', 0, 0) --
    WriteLog('  USE_MH_TOOL is FALSE in GMMHPRGS Program', FALSE)
  ENDIF

 ErrsInShop.ErrorsPrgrms =  ErrsInShop.ErrorsPrgrms + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInShop.ErrorsPrgrms -StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('  MH Program setup, Program GMMHPRGS had ' + int2str((ErrsInShop.ErrorsPrgrms- StrtinErs))+' Errors executing', TRUE)
 ELSE
   WriteLog('  Material Handling Program setup Program completed', FALSE)
   Prg_MH_Setup = TRUE
 ENDIF

END GMMHPRGS
