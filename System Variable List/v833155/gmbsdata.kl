-- -----------------------------------------------------------------------
--
--   MODULE: GMBS Data.kl
--   TITLE:  BodyShop Display Setup Menu
--
--   WRITTEN BY:     Schoenberg 
--   REVISION DATE:  03/26/2018
--
--   LANGUAGE:       KAREL 8.33
--   CONTROL GROUP:  General Motor Global Center
--
--   ORDER NUMBER:   GM Global Center
--   PROJECT NAME:
--
--
--   COPYRIGHT:     Fanuc Robotics America, Inc. retains rights in any
--                  and all Software contained in the material attached
--                  hereto and said Software may not be copied
--                  reproduced without the written permission Fanuc
--                  Robotics America, Inc..
--
--                  All Software, (C) Copyright Fanuc Robotics
--                  America, Inc., 2016
--
--         DESCRIPTION: This program will display current robot configuration
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  -------------  --------------------
--         V4         20MAR18    Schoenberg 
--         V4.01      05MAY18    Schoenberg     bug fixes
--         V4.02      06SEP18    Schoenberg     V8.33P06 update to support 1K/2K dispenser
--         v4.1       2018/09/17 marchaka       Add new cap_chngtype variable for cap changer type
--         v4.2       2019/08/01 marchaka	Added logic to set dual_proc at the beginning of the program.  This will
--                                              allow the display to work properly for combo processes that come from a
--                                              version before this variable was created.  Added logic to initialize
--                                              dispapp[x].spare1 for units that came from before this variable was used.
--         V4.3       19AUG19    Schoenberg     V8.33P08, added tool changer question that was missed.
--         V4.4       2020/02/21 marchaka       Repaired display for single pedestal dual stud configuration.  Added display 
--                                              for stud backup head 2.
--         V4.5       2020/09/30 schoensm       V8.33P10, added aluminum weld question, fixed 
--------------------------------------------------------------------------
PROGRAM GMBSDATA

%SYSTEM
%INVISIBLE
%NOABORT = ERROR + COMMAND
%NOPAUSE = ERROR + COMMAND + TPENABLE
%NOBUSYLAMP
%NOLOCKGROUP
%PRIORITY=100
%NOPAUSESHFT
%ALPHABETIZE
%COMMENT = 'GMBS Display V4.5'
%INCLUDE gmevrlng -- Required for the language constants

--Other applications
%INCLUDE GMCFGMH
%INCLUDE GMCFGCEL
%INCLUDE GMCFGTLC
%INCLUDE GMCFGDSP
%INCLUDE GMCFGBDY
%INCLUDE GMCFGPJW
%INCLUDE GMCFGSTD
%INCLUDE GMCFGSPR
%INCLUDE GMCFGDMP
%INCLUDE GMCFGSPT
%INCLUDE GMCFGVIS

CONST
  ver  = '2020-09-30'
  star_fill = '****************************************'
  star_p2   = '**************Process-2*****************'
  star_mh   = '****MH-Tool/Vacuum/Tool-Stand/Vision****'

%INCLUDE GMCNSTNT -- must be declared under CONST

VAR
  i         :INTEGER
  ans       :INTEGER
  inc_arry  :INTEGER
  v         :INTEGER -- used in the FOR loop
  w         :INTEGER -- used in the FOR loop
  str_var   : ARRAY[150] of STRING[MAX_FILE_NAM]
  clr_var   : ARRAY[150] of STRING[MAX_FILE_NAM]
  srvo_td_opt  IN SHADOW FROM GMCUSTO: BOOLEAN --servo tip dress option loaded
  alternate:INTEGER

%INCLUDE gmrdutil 

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
-----------------------------------------------------------------------------
ROUTINE inc
-- PURPOSE: increment the array
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --This should log dat to wizlog, in Q and A format.
  IF alternate = 1 THEN
    IF (str_var[inc_arry] <> '') AND (str_var[inc_arry] <> star_mh) &
   	AND (str_var[inc_arry] <> star_p2) AND (str_var[inc_arry] <> star_fill) THEN  --mask out garbage, only log real Q and A
      writeLog('Q- ' + str_var[inc_arry], FALSE)
      alternate = 0
    ENDIF
  ELSE
    IF (str_var[inc_arry] <> '') AND (str_var[inc_arry] <> star_mh) &
        AND (str_var[inc_arry] <> star_p2) AND (str_var[inc_arry] <> star_fill) THEN  --mask out garbage, only log real Q and A
      writeLog('  Ans:' + str_var[inc_arry], FALSE)
      alternate = 1
    ENDIF
  ENDIF

  inc_arry = inc_arry + 1

END inc
-----------------------------------------------------------------------------
ROUTINE display_all
-- PURPOSE: 
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  v = 1 
  w = 1
  loopit::
  REPEAT -- Repeat until answered and Verified      
    --Display to the Screen...   
    WRITE TPDISPLAY('    **  Body-Shop Current Config  ** ',cr)
    FOR w = 1 TO 4 Do  --Only going up to max of 4, can only get 10 lines to display on the teach-pendant
      --Question Field 
      IF (str_var[v] = '') OR (str_var[v] = star_fill) THEN
        IF (str_var[v] = '') THEN
          WRITE TPDISPLAY('',cr)
          v = v + 1
        ELSE
          WRITE TPDISPLAY(star_fill,cr)
          v = v + 1	    	
        ENDIF
      ELSE  		
        WRITE TPDISPLAY('Q-' + str_var[v] + ':',cr)
        v = v + 1
      ENDIF
    
      --Answer Field 
      IF (str_var[v] = '') OR (str_var[v] = star_mh) &
          OR (str_var[v] = star_p2) OR (str_var[v] = star_fill) THEN
        IF (str_var[v] = '') THEN
          WRITE TPDISPLAY('',cr)
          v = v + 1 
        ENDIF
        IF (str_var[v] = star_mh) THEN
          WRITE TPDISPLAY(star_mh,cr)
          v = v + 1 
        ENDIF
        IF (str_var[v] = star_p2) THEN
          WRITE TPDISPLAY(star_p2,cr)
          v = v + 1 
        ENDIF
        IF (str_var[v] = star_fill) THEN
          WRITE TPDISPLAY(star_fill,cr)
          v = v + 1 
        ENDIF 	 	
      ELSE  		
        WRITE TPDISPLAY('  Ans:', + str_var[v],cr)
        v = v + 1      
      ENDIF    
    ENDFOR
    WRITE TPDISPLAY('0=Back, 1=Next, 2=Exit')
    READ TPPROMPT (ans)
  UNTIL (Verify_Answr(Ans,0,2))-- Verify Answer

  --decrement case statement added for Bill K
  SELECT (ans) OF
    CASE(0):
      IF V > 16 THEN 
	v = (v - 16)
	GOTO loopit
      ELSE
	v = (v - 8)
	GOTO loopit	  	
      ENDIF
    CASE(1):
      --check to see if there is anything else to display...
      IF V >= inc_arry THEN 
	GOTO getout
      ELSE
	GOTO loopit		  	
      ENDIF
    CASE(2):
      GOTO getout
  ENDSELECT 

  getout::
    
END display_all
-----------------------------------------------------------------------------
ROUTINE star_dsp
-- PURPOSE: Build display for Process, Header Change
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: 
--
--
-----------------------------------------------------------------------------
BEGIN
  --used to define a break in the display page between processes/MH/Vision/and Tool Changer
  str_var[inc_arry] =  star_fill
  inc
  str_var[inc_arry] =  star_fill
  inc	
  
END star_dsp
-----------------------------------------------------------------------------
ROUTINE tlc_dsp
-- PURPOSE: Build display for Process, Material Handling Only
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

   --Is a Tool Changer(s) Present 
  str_var[inc_arry] =    mhq5_gmdata    -- 'Is a Tool Changer(s) Present '
  inc
  IF UseToolChngr THEN
    --Yes
    str_var[inc_arry] = yes_gmdata
    inc
    --Number of Tool Stands
    str_var[inc_arry] = mfq16_gmdata  --Select Number of Tool Stands
    inc
    str_var[inc_arry] = int2str(Num_ToolStnd)
    inc
	 	
    --Number of Tool Stands for Stand X
    FOR v = 1 TO Num_ToolStnd DO               --Used for the tool stand(s) type 1 is single, 2 double
      str_var[inc_arry] = mfq11_gmdata + ' Stand #' + int2str(v)
      inc
      str_var[inc_arry] = int2str(ToolStndType[v])
      inc
    ENDFOR
  ELSE
    --No
    str_var[inc_arry] = no_gmdata
    inc
  ENDIF  --UseToolChngr  

END tlc_dsp
-----------------------------------------------------------------------------
ROUTINE vis_dsp
-- PURPOSE: Build display for Process, Vision
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN
			
  --Do you have a vision system?
  str_var[inc_arry] = visq1_gmdata
  inc
  IF USE_VISION THEN
    --Yes
    str_var[inc_arry] = yes_gmdata
  ELSE
    --No
    str_var[inc_arry] = no_gmdata
  ENDIF
  inc

  IF use_vision THEN		--use vision
    --Select vision system?
    str_var[inc_arry] = visq2_gmdata
    inc
    SELECT (VisSys_Type) OF
      CASE(vis_fss):
	--Flexible Scanning FSS
	str_var[inc_arry] = fss_gmdata
      CASE(vis_fms):
        --Flexible Measuring FMS
	str_var[inc_arry] = fms_gmdata
      CASE(vis_guid):
	--Robot Guidance
	str_var[inc_arry] = guid_gmdata
      CASE(vis_irvis):
	--FANUC iRVision
	str_var[inc_arry] = in_gmdata
      ELSE:
	writeLog('Var Failed to read - VisSys_Type', FALSE)
    ENDSELECT 
    inc
		
    IF VisSys_Type = vis_irvis THEN  --Only display next 2 Questions if it is IRVision
      --Select vision system, FANUC?
      str_var[inc_arry] = visq2_gmdata
      inc
      SELECT (iRType) OF
	CASE(fan_2d):
	  --iRVision 2D System
	  str_var[inc_arry] = ir2dgmdata
	CASE(fan_3dl):
	  --iRVision 3D System
	  str_var[inc_arry] = ir3dgmdata
	CASE(fan_2d_3dl):
	  --iRVision 2D/3D System
	  str_var[inc_arry] = irbthgdata
	ELSE:
	  writeLog('Var Failed to read - iRType', FALSE)
      ENDSELECT
      inc	 
		   
      --iRVision Lighting System
      str_var[inc_arry] = irlight
      inc
      SELECT (VisLghtType) OF
        CASE(vis_remmount):
	  --Remote Mounted
	  str_var[inc_arry] = irlight2
	CASE(vis_robmount):
	  --Robot Mounted
	  str_var[inc_arry] = irlight3
	CASE(vis_rem_rob):
	  --Remote and Robot Mounted
	  str_var[inc_arry] = irlight4
	CASE(4):
	  --No Lighting
	  str_var[inc_arry] = irlight5
	ELSE:
	  writeLog('Var Failed to read - VisLghtType', FALSE)
      ENDSELECT   
    ENDIF   --iRVision    
  ENDIF  --use vision
	  
END vis_dsp
-----------------------------------------------------------------------------
ROUTINE mhapp_dsp
-- PURPOSE: Build display for Process, Material Handling Only
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN
			
  IF (bshop_proc1 = 0)  AND (bshop_proc2 = 0) THEN
    str_var[inc_arry] =  appl_gmdata
    inc
    --Material Handling Only
    str_var[inc_arry] = mh_gmdata
    inc
  ENDIF --bshop_proc1 and bshop_proc2 = 0
		    
  --Number of MH Valve Packs
  str_var[inc_arry] = mhq1_gmdata
  inc
  SELECT (NumEOATOtMan) OF
    CASE(0):
      --None
      str_var[inc_arry] = nonegmdata
    CASE(1):
      --One Valve Pack
      str_var[inc_arry] = m1vp_gmdata
    CASE(2):
      --Two Valve Packs
      str_var[inc_arry] = m2vp_gmdata
    CASE(3):
      --Three Valve Packs
      str_var[inc_arry] = m3vp_gmdata
    CASE(4):
      --None
      str_var[inc_arry] = nonegmdata
    ELSE:
      writeLog('Var Failed to read - NumEOATOtMan', FALSE)
  ENDSELECT 
  inc

  --Number of MH Input Blocks
  str_var[inc_arry] = mhq2_gmdata
  inc
  SELECT (NumEOATInBlk) OF
    CASE(0):
      --None
      str_var[inc_arry] = mnoibgmdata
    CASE(1):
      --One Input Block
      str_var[inc_arry] = m1ib_gmdata
    CASE(2):
      --Two Input Blocks
      str_var[inc_arry] = m2ib_gmdata
    CASE(3):
      --Three Input Blocks
      str_var[inc_arry] = m3ib_gmdata
    CASE(4):
      --Four Input Blocks
      str_var[inc_arry] = m4ib_gmdata
    CASE(5):
      --None
      str_var[inc_arry] = mnoibgmdata
    ELSE:
      writeLog('Var Failed to read - NumEOATInBlk', FALSE)
  ENDSELECT  
  inc  	  

  --Vacuum System
  str_var[inc_arry] = mhq3_gmdata
  inc
  IF USE_VACUUM THEN
    --Yes
    str_var[inc_arry] = yes_gmdata
  ELSE
    --No
    str_var[inc_arry] = no_gmdata
  ENDIF
  inc
  
  IF USE_VACUUM THEN
    --Number of Vacuum pumps or type  --not sure if we should use NUMVACPUMPS
    str_var[inc_arry] = mhq4_gmdata
    inc
    SELECT (vacpumptype) OF
      CASE(1):
	--One Vacuum Pump
	str_var[inc_arry] = m1vac_gmdata
      CASE(2):
	--Two Vacuum Pumps
	str_var[inc_arry] = m2vac_gmdata
      CASE(3):
	--Decentralized Vacuum Pump
	str_var[inc_arry] = m3vac_gmdata
      CASE(4):
	--None
	str_var[inc_arry] = nonegmdata
      ELSE:
	writeLog('Var Failed to read - vacpumptype', FALSE)
    ENDSELECT
    inc 
  ENDIF  

END mhapp_dsp
-----------------------------------------------------------------------------
ROUTINE spotapp_dsp
-- PURPOSE: Build display for Process, Spot-Weld
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (num_proc = 1) THEN 
    str_var[inc_arry] =  proc1_title
    inc
    --SpotWeld 
    str_var[inc_arry] = spt_gmdata
    inc
  ELSE
    IF (num_proc = 2) AND (dual_proc = spot_spot) THEN
      str_var[inc_arry] =  combo_title
      inc
      --SpotWeld 
      str_var[inc_arry] = menu_gmdata[1]
      inc
    ENDIF
  ENDIF	
		                  
  FOR wld_ctrl = 1 TO numwldctrl DO
    str_var[inc_arry] = wfac3_gmdata + '#' + int2str(wld_ctrl) + ' ' + m47_gmdata	--Watersaver #X Load Global 4 Standard:
    inc
    SELECT (wldapp[wld_ctrl].wld_wtreip) OF
      CASE(wizans_yes):
        --Yes
        str_var[inc_arry] = yes_gmdata
      CASE(wizans_no):
        --No
        str_var[inc_arry] = no_gmdata
      ELSE:
        writeLog('Var Failed to read - WLDAPP[1].WLD_WTREIP', FALSE)
    ENDSELECT
    inc 
  ENDFOR	

  IF (dual_proc <> spot_projw) AND (dual_proc <> spot_stud) AND (dual_proc <> spot_disp) AND (dual_proc <> spot_spr) THEN
    IF (numwldctrl = 1) THEN --application has one weld controller   
      str_var[inc_arry] = w1wc_gmdata
      inc
      SELECT (wld1_app) OF
        CASE(wld1app_cg):
          --Carried spot gun
          str_var[inc_arry] = rhg_gmdata
        CASE(wld1app_pg):
          --Single pedestal gun
          str_var[inc_arry] = spg_gmdata
        CASE(wld1app_spdg):
          --Single pedestal dual gun
          str_var[inc_arry] = spdg_gmdata
        CASE(wld1app_dpsg):
          --Dual pedestal single gun each
          str_var[inc_arry] = dpse_gmdata
        CASE(wld1app_cgmh):
          --Robot held gun with material handler
          str_var[inc_arry] = rhmh_gmdata
        CASE(wld1app_snut):
          --Robot Held Servo Nut Welder
          str_var[inc_arry] = snut_gmdata
        ELSE:
          writeLog('Var Failed to read - wld1_app', FALSE)
      ENDSELECT 	
      inc
    ENDIF --application has one weld controller 

    IF (numwldctrl = 2) THEN --application has 2 weld controllers   
      str_var[inc_arry] = w2wc_gmdata
      inc
      SELECT (wld2_app) OF
        CASE(wld2app_spdg):
          --Single pedestal dual gun
          str_var[inc_arry] = spdg_gmdata
        CASE(wld2app_dpsg):
          --Dual pedestal single gun each
          str_var[inc_arry] = dpse_gmdata
        CASE(wld2app_cgpg):
          --Robot held gun with pedestal gun
          str_var[inc_arry] = rgpg_gmdata
        ELSE:
          writeLog('Var Failed to read - wld2app_cg', FALSE)
      ENDSELECT 	
      inc
    ENDIF --application has 2 weld controller2
  ENDIF --dual_proc <> XXX
      
  IF (srvo_td_opt = TRUE) THEN --servo tip dresser option    
    --Tip Dresser
    str_var[inc_arry] = tipyn_srvgm
    inc
    SELECT (servotipdrs) OF
      CASE(wizans_yes):
        --Yes
        str_var[inc_arry] = yes_gmdata
      CASE(wizans_no):
	--No
	str_var[inc_arry] = no_gmdata
      ELSE:
       str_var[inc_arry] = no_gmdata
       writeLog('Var Failed to read - SERVOTIPDRS', FALSE)
    ENDSELECT
    inc
  ENDIF --servo tip dresser option 

  --Cap Changer
  str_var[inc_arry] = gm_capcgr
  inc
  SELECT (cap_chnger) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
      inc
      str_var[inc_arry] = gm_capcgr1 --What type of cap changer'
      inc
      SELECT cap_chngtype OF
        CASE(cap_rbtmov):  --robot moving
          str_var[inc_arry] = gm_capcgr2 --Robot Moving
        CASE(cap_rbtstatn):  --robot stationary
          str_var[inc_arry] = gm_capcgr3 --Robot Stationary
        CASE(cap_srvcombo):  --combo servo cap changer and dresser
          str_var[inc_arry] = gm_capcgr4 --Servo Combo Cap Changer/Dresser
        ELSE:
          str_var[inc_arry] = ''
          writeLog('Var Failed to read - cap_chngtype', FALSE)
      ENDSELECT  
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      str_var[inc_arry] = no_gmdata
      writeLog('Var Failed to read - cap_chnger', FALSE)
  ENDSELECT
  inc
	
  FOR sp_eqnum = 1 TO sp_ttl_eq DO
    FOR sp_gnnum = 1 TO sp_eqgn_num DO
    	 			
      --GUN # X Spot:Setup Is Gun # X a Servo Gun?
      str_var[inc_arry] = isgun_gmdata + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + ' a Servo Gun?'
      inc
      SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn) OF
        CASE(wizans_yes):
          --Yes
          str_var[inc_arry] = yes_gmdata
        CASE(wizans_no):
          --No
          str_var[inc_arry] = no_gmdata
        ELSE:
          writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn', FALSE)
      ENDSELECT
      inc
      
      IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_no) THEN  --air gun
        --GUN # X Spot:Setup Is Gun # X a Servo Gun?
        str_var[inc_arry] = 'Air Gun# ' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
        inc
        SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv) OF
          CASE(ag_eurovlv):
            --Yes
            str_var[inc_arry] = vlv_type
          CASE(ag_NA_vlv):
            --No
            str_var[inc_arry] = NA_gmdata
          ELSE:
            writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn', FALSE)
        ENDSELECT
        inc

        IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv = ag_NA_vlv) THEN  --North American Valve
          --Is the gun Dense Pack Integrated or on gun X eq X
          str_var[inc_arry] = 'Is Dense Pack Int On G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_denspk) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_denspk', FALSE)
          ENDSELECT
          inc
				 
          --Do you want a Retract Stroke for gun',sp_gnnum,' on equipment',sp_eqnum,'?
          str_var[inc_arry] = 'Retrct Strk G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_retstrk) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_retstrk', FALSE)
          ENDSELECT
          inc
				 
          --Do you want Gun Open Detect for gun',sp_gnnum,' on equipment',sp_eqnum,'?
          str_var[inc_arry] = 'Open Det G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_opn) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_opn', FALSE)
          ENDSELECT
          inc

          --Do you want Retract Open Detect
          str_var[inc_arry] = 'Ret Open Det G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_rtrc) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_rtrc', FALSE)
          ENDSELECT
          inc

          IF ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh)) THEN --carried app 1
            --Do you want Equalization Pressure for gun',sp_gnnum,' on equipment',sp_eqnum,'?
            str_var[inc_arry] = 'Equ Det G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
            inc
            SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss) OF
              CASE(wizans_yes):
                --Yes
                str_var[inc_arry] = yes_gmdata
              CASE(wizans_no):
                --No
                str_var[inc_arry] = no_gmdata
              ELSE:
                writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss', FALSE)
            ENDSELECT
            inc
          ENDIF --carried app 1
	       
          IF ((wld2_app = wld2app_cgpg) AND (sp_eqnum = 1)) THEN --carried app 2
            --Do you want Equalization Pressure for gun',sp_gnnum,' on equipment',sp_eqnum,'?
            str_var[inc_arry] = 'Equ Det G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
            inc
            SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss) OF
              CASE(wizans_yes):
                --Yes
                str_var[inc_arry] = yes_gmdata
              CASE(wizans_no):
                --No
                str_var[inc_arry] = no_gmdata
              ELSE:
                writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss', FALSE)
            ENDSELECT
            inc
          ENDIF --carried app 2			
		       
          --Do you want Soft Touch Gun or gun',sp_gnnum,' on equipment',sp_eqnum,'?
          str_var[inc_arry] = 'Sft Tch G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_soft_tch) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_soft_tch', FALSE)
          ENDSELECT
          inc				  
        ENDIF --North American valve
      ENDIF --Air gun
			 
      IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_yes) THEN  --servo gun
     	
        --Would you like to setup Axis data
        str_var[inc_arry] = 'Servo Gun Auto-Tune setup GUN#' + int2str(sp_gnnum)
        inc
        SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup) OF
          CASE(wizans_yes):
            --Yes
            str_var[inc_arry] = yes_gmdata
          CASE(wizans_no):
            --No
            str_var[inc_arry] = no_gmdata
          ELSE:
            writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup', FALSE)
        ENDSELECT
        inc				  

        IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup = wizans_yes) THEN --setup axis data
          --Select Motor Type from List Motor list: For Gun # On Equipment #
          str_var[inc_arry] = 'Motor Type G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum)
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr) OF
            CASE(tol_sw44):
              --1 = Tol SW44
              str_var[inc_arry] = 'Tol SW44'
            CASE(tol_HT23):
              --2 = Tol HT23
              str_var[inc_arry] = 'Tol HT23'
            CASE(gswa_201_202):
              --3 = GSWA 201/202-ARO3G
              str_var[inc_arry] = 'GSWA 201/202-ARO3G'
            CASE(gswa_101):
              --4 = GSWA 101-Tol
              str_var[inc_arry] = 'GSWA 101-Tol'
            CASE(gswa_ima44):
              --5 = GSWA 102/103/202/203/IMA44-Tol
              str_var[inc_arry] = 'GSWA 102/103/202/203/IMA44-Tol'
            CASE(gswa_ima33):
              --6 = GSWA 201/301/302/IMA33-Tol
              str_var[inc_arry] = 'GSWA 201/301/302/IMA33-Tol'
            CASE(fac_4000):
              --7 = FANUC ACa8/4000iS-40A/80A
              str_var[inc_arry] = 'FANUC ACa8/4000iS-40A/80A'
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr', FALSE)
          ENDSELECT
          inc				  

          IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr = fac_4000) THEN  --FANUC ACa8/4000iS-40/80A
            --Motor list: For Gun # On Equipment #
            str_var[inc_arry] = 'Motor List G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
            inc
            SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_mot2) OF
              CASE(fac_4000_40):
                --Yes
                str_var[inc_arry] = '1 = FANUC ACa8/4000iS-40A'
              CASE(fac_4000_80):
                --No
                str_var[inc_arry] = '2 = FANUC ACa8/4000iS-80A'
              ELSE:
                writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_mot2', FALSE)
            ENDSELECT
            inc   
          ENDIF  --FANUC ACa8/4000iS-40/80A

          --Enter Max Pressure from GUN Tag For gun#',p_gun,' on equipment#',p_equip
          str_var[inc_arry] = 'Max Press G#' + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          str_var[inc_arry] = real2str(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr)
          inc				  

          --What type of Servo gun is use For gun#',sp_gnnum,' on equipment#',sp_eqnum
          str_var[inc_arry] = 'Gun Type G#' + int2str(sp_gnnum) + onEq_gmdata + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_guntyp) OF
            CASE(srvo_cgun):
              --Yes
              str_var[inc_arry] = '1. C - Gun '
            CASE(srvo_xgun):
              --No
              str_var[inc_arry] = '2. X - Gun '
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_guntyp', FALSE)
          ENDSELECT
          inc

          --GUN # X Spot:Setup Is Gun # X is Aluminum-Welding?
          str_var[inc_arry] = isgun_gmdata + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + alum_gmdata +'?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ispare3) OF
            CASE(wizans_yes):
            --Yes
            str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
            --No
            str_var[inc_arry] = no_gmdata
            ELSE:
            writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ispare3', FALSE)
          ENDSELECT
          inc
   			 
        ENDIF --setup axis data	 

        --PRESS/BKUP/DISTANCE DATA SETUP
        str_var[inc_arry] = 'Press/bkup/dist Def. GUN#'  + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum)
        inc
        SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_prs_set) OF
          CASE(wizans_yes):
            --Yes
            str_var[inc_arry] = yes_gmdata
          CASE(wizans_no):
            --No
            str_var[inc_arry] = no_gmdata
          ELSE:
            writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_prs_set', FALSE)
        ENDSELECT
        inc				  
      ENDIF  --Servo gun setup
		 
      --Is Tip Dresser Used? for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?
      str_var[inc_arry] = 'Tip-Dresser Used GUN#'  + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
      inc
      SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td) OF
        CASE(wizans_yes):
          --Yes
          str_var[inc_arry] = yes_gmdata
        CASE(wizans_no):
          --No
          str_var[inc_arry] = no_gmdata
        ELSE:
          str_var[inc_arry] = no_gmdata
          writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td', FALSE)
      ENDSELECT
      inc				  		 
		
      IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td = wizans_yes) THEN --tip dress is being used 
        IF ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh)) THEN --carried gun 1
          --Is Dress Verification Used for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?
          str_var[inc_arry] = 'Dress Verify GUN#'  + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg', FALSE)
          ENDSELECT
          inc				  		        	
        ENDIF --carried gun 1
       
        IF ((sp_gnnum = 1) AND (wld2_app = wld2app_cgpg)) THEN --gun 1 is a carried gun 2
          --Is Dress Verification Used for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?
          str_var[inc_arry] = 'Dress Verify GUN#'  + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg', FALSE)
          ENDSELECT
          inc				  		        	
        ENDIF --carried gun 2
       
        IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_yes) THEN --can select a servo dresser
          IF (srvo_td_opt = TRUE) THEN --servo tip dresser option
            IF (servotipdrs = wizans_yes) THEN --servo tip dresser is used
              spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td = wizans_yes
            ENDIF --servo tip dresser is used
          ENDIF --servo tip dresser option				
        ENDIF  --can select servo dresser
     
        IF ((wld1_app = wld1app_pg) OR (wld1_app = wld1app_spdg) OR (wld1_app = wld1app_dpsg)) THEN --robot has pedestal application 1
          --Do Tip Dresser dump(s) have Safety Locking pins
          str_var[inc_arry] = 'Lock Pins GUN#'  + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp', FALSE)
          ENDSELECT
            inc
        ENDIF --robot is pedestal application 1
       
        IF ((wld2_app = wld2app_spdg) OR (wld2_app = wld2app_dpsg) OR ((wld2_app = wld2app_cgpg) AND (sp_gnnum = 2))) THEN --robot has pedestal application 2
          --Do Tip Dresser dump(s) have Safety Locking pins
          str_var[inc_arry] = 'Lock Pins GUN#'  + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
          inc
          SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp) OF
            CASE(wizans_yes):
              --Yes
              str_var[inc_arry] = yes_gmdata
            CASE(wizans_no):
              --No
              str_var[inc_arry] = no_gmdata
            ELSE:
              writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp', FALSE)
          ENDSELECT
          inc
        ENDIF --robot is pedestal application 2      
     ENDIF  --tip dresser is being used
     
     --Do you want Transformer Over Temp checking used for gun# ',sp_gnnum,' on equipment# ',sp_eqnum,'?
     str_var[inc_arry] = 'Trans Over Temp GUN#'  + int2str(sp_gnnum) + ' Eq#' + int2str(sp_eqnum) + '?'
     inc
     SELECT (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_xfot) OF
       CASE(wizans_yes):
          --Yes
          str_var[inc_arry] = yes_gmdata
       CASE(wizans_no):
         --No
         str_var[inc_arry] = no_gmdata
       ELSE:
         writeLog('Var Failed to read - spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_xfot', FALSE)
     ENDSELECT
     inc
   ENDFOR  --Gun configuration for equipment complete
 ENDFOR  --Equipment and gun configuration for one weld controller complete  

END spotapp_dsp
-----------------------------------------------------------------------------
ROUTINE projapp_dsp
-- PURPOSE: Build Display for, Projection Weld
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  proc1_title
  inc
  --Projection Weld
  str_var[inc_arry] = pjwd_gmdata
  inc
      
  --One Projection Weld Controller
  str_var[inc_arry] = p1pc_gmdata
  inc
  SELECT (PROJ1_APP) OF
    CASE(pjw1app_cg):
      --Robot Held Controller
      str_var[inc_arry] = rh_gmdata
    CASE(pjw1app_pg):
      --Single Pedestal Controller
      str_var[inc_arry] = sp_gmdata 
  ENDSELECT    	
  inc
  
  --Select Weld Controller	  
  str_var[inc_arry] = wldct_gmdata
  inc
  SELECT (PROJWLDAPP[1].PROJ_CTRL) OF
    CASE(pjw_wtc):
      --WTC Controller
      str_var[inc_arry] = wtc_gmdata
    CASE(pjw_none):
      --None Selected
      str_var[inc_arry] = none_gmdata
    ELSE:
      writeLog('Var Failed to read - PROJWLDAPP[1].PROJ_CTRL', FALSE)
  ENDSELECT
  inc

END projapp_dsp
-----------------------------------------------------------------------------
ROUTINE studapp_dsp
-- PURPOSE: Build display for Process, Stud Weld
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  IF dual_proc <> spot_stud THEN
    str_var[inc_arry] =  proc1_title
    inc
    --Stud Weld
    str_var[inc_arry] = std_gmdata
    inc
	  
    --One Stud Controller
    str_var[inc_arry] = s1sd_gmdata
    inc
    SELECT (STUD1_APP) OF
      CASE(stud_rhg):
        --Robot Held Gun
        str_var[inc_arry] = rhg_gmdata
      CASE(stud_phg):
        --Pedestal Held Gun
        str_var[inc_arry] = pd_gmdata
      CASE(stud_spdg):
        --Single Ped Dual Gun
        str_var[inc_arry] = spdg_gmdata
      CASE(stud_3pg):
        --3 Ped Dual Gun
        str_var[inc_arry] = s3pst_gmdata
      CASE(stud_4pg):
        --4 Ped Dual Gun
        str_var[inc_arry] = s4pst_gmdata
      ELSE:
        writeLog('Var Failed to read - STUD1_APP', FALSE)
    ENDSELECT 
    inc  
  ENDIF -- Dual_proc <> spot_stud 	
  
  --Do you want stud gun backup for studwelding equip 1?
  IF ((stud1_app = stud_rhg) OR (stud1_app = stud_phg) OR (stud1_app = stud_spdg)) THEN --is there a backup head?  	  
    str_var[inc_arry] = bkstd_gdata3 + ' 1'
    inc
    SELECT (STUD1_BACKUP) OF
      CASE(wizans_yes):
        --Yes
         str_var[inc_arry] = yes_gmdata
      CASE(wizans_no):
        --No
        str_var[inc_arry] = no_gmdata
      ELSE:
        writeLog('Var Failed to read - STUD1_BACKUP', FALSE)
    ENDSELECT 		 
    inc

    IF (stud1_app = stud_spdg) THEN --studwelding backup head on equipment 2?  	  
      str_var[inc_arry] = bkstd_gdata3 + ' 2'
      inc
      SELECT (STUD2_BACKUP) OF
        CASE(wizans_yes):
          --Yes
           str_var[inc_arry] = yes_gmdata
        CASE(wizans_no):
          --No
          str_var[inc_arry] = no_gmdata
        ELSE:
          writeLog('Var Failed to read - STUD2_BACKUP', FALSE)
      ENDSELECT 		 
      inc
    ENDIF --studwelding backup head on equipment 2?
	  
    IF ((stud1_app = stud_rhg) AND (stud1_backup = wizans_yes)) THEN --'Tool Nests Single/Dual Slide' 
      --Tool Nest Dual/Single Slide?  
      str_var[inc_arry] = sl1_gmdata
      inc   	
      SELECT (STUD1_SLIDE) OF
        CASE(0):
          --No Slide
          str_var[inc_arry] = none_gmdata
        CASE(stud_1gunsld):
          --Single Gun on Slide
          str_var[inc_arry] = slid1_gmdata
        CASE(stud_2gunsld):
          --2 Guns on same slide
          str_var[inc_arry] = slid2_gmdata
        ELSE:
          writeLog('Var Failed to read - STUD1_SLIDE', FALSE)
      ENDSELECT  		 
      inc
    ENDIF  --'Tool Nests Single/Dual Slide'
  ENDIF  --is there a backup head?  
  
END studapp_dsp
-----------------------------------------------------------------------------
ROUTINE dispapp_dsp
-- PURPOSE: Build display for Process, Dispense
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  proc1_title
  inc
  --Dispense
  str_var[inc_arry] = dis_gmdata
  inc
  
  --One Dispense Controller
  str_var[inc_arry] = d1dc_gmdata
  inc
  SELECT (DISP1_APP) OF
    CASE(disp1_rhn):
      --Robot Held Nozzle
      str_var[inc_arry] = rhn_gmdata
    CASE(disp1_phn):
      --Pedestal Held Nozzle
      str_var[inc_arry] = r2p1e_gmdata
     CASE(disp1_rhnmh):
       --Robot Held Nozzle w/Material Hand
       str_var[inc_arry] = rnmh_gmdata
     ELSE:
       writeLog('Var Failed to read - DISP1_APP', FALSE)
  ENDSELECT
  inc
 
  --What type of Dispensing System?
  str_var[inc_arry] = dtyp16gmdata
  inc
  SELECT (DISPAPP[1].ispare1) OF
    CASE(disp_1K):
      --1K System
      str_var[inc_arry] = dtyp18gmdata
    CASE(disp_2K):
      --2K System
      str_var[inc_arry] = dtyp19gmdata
    CASE(disp_0K):
      --Neither (no settings)
      str_var[inc_arry] = dtyp14gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].ispare1', FALSE)
  ENDSELECT
  inc 
 
  --Load Standard Dispense Schedule Defaults  
  str_var[inc_arry] = dtyp10gmdata
  inc
  SELECT (DISPAPP[1].DISP_LDSC) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
     ELSE:
       writeLog('Var Failed to read - DISPAPP[1].DISP_LDSC', FALSE)
  ENDSELECT
  inc
        
  IF (dispapp[1].disp_ldsc = wizans_yes) THEN --Only display if schedules loaded.      
    --Type of Dozer Used  
    str_var[inc_arry] = dtyp11gmdata
    inc
    SELECT (DISPAPP[1].DISP_DOZR) OF
      CASE(disp_dzr80):
        --80cc
        str_var[inc_arry] = dtyp12gmdata
      CASE(disp_dzr160):
        --160cc
        str_var[inc_arry] = dtyp13gmdata
      CASE(disp_dzrnon):
        --Neither (no settings)
        str_var[inc_arry] = dtyp14gmdata
      ELSE:
        writeLog('Var Failed to read - DISPAPP[1].DISP_DOZR', FALSE)
    ENDSELECT
    inc 
  ENDIF --Only display if schedules loaded.
  
END dispapp_dsp
-----------------------------------------------------------------------------
ROUTINE sprapp_dsp
-- PURPOSE: Build display for Process, Self-Pierce Rivet
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  proc1_title
  inc
  --Self-Pierce Rivet
  str_var[inc_arry] = spr_gmdata
  inc
  
  --One SPR Controller
  str_var[inc_arry] = sprctr_data
  inc
  SELECT (SPR1_APP) OF
    CASE(spr_rhg):
      --Robot Held Gun
      str_var[inc_arry] = rhg_gmdata
    CASE(spr_phg):
      --Pedestal Held Gun
      str_var[inc_arry] = pd_gmdata
    ELSE:
      writeLog('Var Failed to read - SPR1_APP', FALSE)
  ENDSELECT
  inc
  
END sprapp_dsp
-----------------------------------------------------------------------------
ROUTINE dimpapp_dsp
-- PURPOSE: Build display for Process, Dimpler
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  proc1_title
  inc
  --Dimpler
  str_var[inc_arry] = dmp_gmdata
  inc
  
  --One Dimpler Controller
  str_var[inc_arry] = dmp1_gmdata
  inc
  SELECT (DIMP1_APP) OF
    CASE(dimp1app_rh):
      --Robot Held
      str_var[inc_arry] = rh_gmdata
    CASE(dimp1app_sp):
      --Single Pedestal
      str_var[inc_arry] = sp_gmdata
    ELSE:
      writeLog('Var Failed to read - DIMP1_APP', FALSE)
  ENDSELECT
  inc 
	     
END dimpapp_dsp
-----------------------------------------------------------------------------
ROUTINE fdsapp_dsp
-- PURPOSE: Build display for Process, Flow Drill Screw
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  proc1_title
  inc
  --Flow Drill Screw
  str_var[inc_arry] = fds_gmdata
  inc 
       
END fdsapp_dsp
-----------------------------------------------------------------------------
ROUTINE spotpjw_dsp
-- PURPOSE: Build display for Process, Spot/Projection Weld
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] = app_gmdata
  inc
  SELECT (wld1_app) OF
    CASE(wld1app_cg):--Carried Spot + Carried Proj + TC
      str_var[inc_arry] = cspotcprojtc
    CASE(wld1app_pg):--ped spot + ped projection
      str_var[inc_arry] = pspot_pproj
    ELSE:
      writeLog('Var Failed to read - Spot/PJW wld1_app', FALSE)
  ENDSELECT 
  inc 

  --keeping questions in order
  spotapp_dsp
	
  --Insert Break Point for user	  
  str_var[inc_arry] = star_fill
  inc
  str_var[inc_arry] = star_p2
  inc

  --Select Weld Controller	  
  str_var[inc_arry] = wldct_gmdata
  inc
  SELECT (PROJWLDAPP[1].PROJ_CTRL) OF
    CASE(pjw_wtc):
      --WTC Controller
      str_var[inc_arry] = wtc_gmdata
    CASE(pjw_none):
      --None Selected
      str_var[inc_arry] = none_gmdata
    ELSE:
      writeLog('Var Failed to read - PROJWLDAPP[1].PROJ_CTRL', FALSE)
  ENDSELECT
  inc 
    
END spotpjw_dsp
-----------------------------------------------------------------------------
ROUTINE spotstud_dsp
-- PURPOSE: Build display for Process, Spot/Stud
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] = menu_gmdata[3] + appl_gmdata
  inc
  SELECT (wld1_app) OF
    CASE(wld1app_cg):--carried spot + ped stud
      str_var[inc_arry] = cspot_pstud
    CASE(wld1app_pg):--ped spot + ped stud
      str_var[inc_arry] = pspot_pstud
    ELSE:
      writeLog('Var Failed to read - Spot/Stud wld1_app', FALSE)
  ENDSELECT 
  inc 

END spotstud_dsp
-----------------------------------------------------------------------------
ROUTINE spotdisp_dsp
-- PURPOSE: Build display for Process, Spot/Dispense
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] = menu_gmdata[4] + appl_gmdata
  inc
  SELECT (wld1_app) OF
    CASE(wld1app_cg):--carried spot + ped dispense
      str_var[inc_arry] = cspot_pdisp
    CASE(wld1app_pg):--ped spot + ped dispense
      str_var[inc_arry] = pspot_pdisp
    ELSE:
      writeLog('Var Failed to read - Spot/Dispense wld1_app', FALSE)
  ENDSELECT 
  inc 
  
  --keeping questions in order
  spotapp_dsp

  --Insert Break Point for user	  
  str_var[inc_arry] = star_fill
  inc
  str_var[inc_arry] = star_p2
  inc
 
  --What type of Dispensing System?
  str_var[inc_arry] = dtyp16gmdata
  inc
  SELECT (DISPAPP[1].ispare1) OF
    CASE(disp_1K):
      --1K System
      str_var[inc_arry] = dtyp18gmdata
    CASE(disp_2K):
      --2K System
      str_var[inc_arry] = dtyp19gmdata
    CASE(disp_0K):
      --Neither (no settings)
      str_var[inc_arry] = dtyp14gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].ispare1', FALSE)
  ENDSELECT
  inc 
   
  --Load Standard Dispense Schedule Defaults  
  str_var[inc_arry] = dtyp10gmdata
  inc
  SELECT (DISPAPP[1].DISP_LDSC) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].DISP_LDSC', FALSE)
  ENDSELECT
  inc

  IF  DISPAPP[1].DISP_LDSC <> 2 THEN   
    --Type of Dozer Used  
    str_var[inc_arry] = dtyp11gmdata
    inc
    SELECT (DISPAPP[1].DISP_DOZR) OF
      CASE(disp_dzr80):
        --80cc
        str_var[inc_arry] = dtyp12gmdata
      CASE(disp_dzr160):
        --160cc
	str_var[inc_arry] = dtyp13gmdata
      CASE(disp_dzrnon):
        --Neither (no settings)
        str_var[inc_arry] = dtyp14gmdata
      ELSE:
        writeLog('Var Failed to read - DISPAPP[1].DISP_DOZR', FALSE)
    ENDSELECT 
    inc 
  ENDIF
     
END spotdisp_dsp
-----------------------------------------------------------------------------
ROUTINE spotspr_dsp
-- PURPOSE: Build display for Process, Spot/Self-Pierce Rivet
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] = menu_gmdata[5] + appl_gmdata
  inc
  SELECT (wld1_app) OF
    CASE(wld1app_cg):--carried spot + carried spr + TC
      str_var[inc_arry] = cspotcspr_tc
    CASE(wld1app_pg):--ped spot + ped spr
      str_var[inc_arry] = pspot_pspr
    ELSE:
      writeLog('Var Failed to read - wld1_app', FALSE)
  ENDSELECT 
  inc 
      
END spotspr_dsp
-----------------------------------------------------------------------------
ROUTINE studdisp_dsp
-- PURPOSE: Build display for Process, Stud/Dispense
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  menu_gmdata[6] + appl_gmdata
  inc
  --Dispense
  str_var[inc_arry] = pstud_pdisp
  inc
  
  --Do you want stud gun backup for studwelding equip 1?	  
  str_var[inc_arry] = bkstd_gdata3 + ' 1'
  inc
  SELECT (STUD1_BACKUP) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - STUD1_BACKUP', FALSE)
  ENDSELECT 		 
  inc

  --Insert Break Point for user	  
  str_var[inc_arry] = star_fill
  inc
  str_var[inc_arry] = star_p2
  inc

  --What type of Dispensing System?
  str_var[inc_arry] = dtyp16gmdata
  inc
  SELECT (DISPAPP[1].ispare1) OF
    CASE(disp_1K):
      --1K System
      str_var[inc_arry] = dtyp18gmdata
    CASE(disp_2K):
      --2K System
      str_var[inc_arry] = dtyp19gmdata
    CASE(disp_0K):
      --Neither (no settings)
      str_var[inc_arry] = dtyp14gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].ispare1', FALSE)
  ENDSELECT
  inc 
  
  --Load Standard Dispense Schedule Defaults  
  str_var[inc_arry] = dtyp10gmdata
  inc
  SELECT (DISPAPP[1].DISP_LDSC) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
       --No
       str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].DISP_LDSC', FALSE)
  ENDSELECT
  inc

  IF  DISPAPP[1].DISP_LDSC <> 2 THEN   
    --Type of Dozer Used  
    str_var[inc_arry] = dtyp11gmdata
    inc
    SELECT (DISPAPP[1].DISP_DOZR) OF
      CASE(disp_dzr80):
        --80cc
	str_var[inc_arry] = dtyp12gmdata
      CASE(disp_dzr160):
        --160cc
	str_var[inc_arry] = dtyp13gmdata
      CASE(disp_dzrnon):
        --Neither (no settings)
	str_var[inc_arry] = dtyp14gmdata
      ELSE:
        writeLog('Var Failed to read - DISPAPP[1].DISP_DOZR', FALSE)
    ENDSELECT 
  inc 
  ENDIF
     
END studdisp_dsp
-----------------------------------------------------------------------------
ROUTINE studspr_dsp
-- PURPOSE: Build display for Process, Stud/SPR
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  menu_gmdata[7] + appl_gmdata
  inc
  --Dispense
  str_var[inc_arry] = pstud_pspr
  inc
  
  --Do you want stud gun backup for studwelding equip 1?	  
  str_var[inc_arry] = bkstd_gdata3 + ' 1'
  inc
  SELECT (STUD1_BACKUP) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - STUD1_BACKUP', FALSE)
  ENDSELECT 		 
  inc
     
END studspr_dsp
-----------------------------------------------------------------------------
ROUTINE pwstud_dsp
-- PURPOSE: Build display for Process, Projection Weld/Stud Weld
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  menu_gmdata[10] + appl_gmdata
  inc
  --Dispense
  str_var[inc_arry] = pproj_pstud
  inc

  --One Projection Weld Controller
  str_var[inc_arry] = wldct_gmdata  --Select Weld Controller:
  inc
  SELECT (projwldapp[1].proj_ctrl) OF
    CASE(pjw_none):
      --None
      str_var[inc_arry] = none_gmdata 
    CASE(pjw_wtc):
      --One Projection Weld Controller
      str_var[inc_arry] = wtc_gmdata
  ENDSELECT    	
  inc
  
  --Do you want stud gun backup for studwelding equip 1?	  
  str_var[inc_arry] = bkstd_gdata3 + ' 1'
  inc
  SELECT (STUD1_BACKUP) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - STUD1_BACKUP', FALSE)
  ENDSELECT 		 
  inc
     
END pwstud_dsp
-----------------------------------------------------------------------------
ROUTINE pwdisp_dsp
-- PURPOSE: Build display for Process, Projection Weld/Dispense
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  menu_gmdata[11] + appl_gmdata
  inc
  --Dispense
  str_var[inc_arry] = pproj_pdisp
  inc

  --One Projection Weld Controller
  str_var[inc_arry] = wldct_gmdata  --Select Weld Controller:
  inc
  SELECT (projwldapp[1].proj_ctrl) OF
    CASE(pjw_none):
      --None
      str_var[inc_arry] = none_gmdata 
    CASE(pjw_wtc):
      --One Projection Weld Controller
      str_var[inc_arry] = wtc_gmdata
  ENDSELECT    	
  inc

  --Insert Break Point for user	  
  str_var[inc_arry] = star_fill
  inc
  str_var[inc_arry] = star_p2
  inc

  --What type of Dispensing System?
  str_var[inc_arry] = dtyp16gmdata
  inc
  SELECT (DISPAPP[1].ispare1) OF
    CASE(disp_1K):
      --1K System
      str_var[inc_arry] = dtyp18gmdata
    CASE(disp_2K):
      --2K System
      str_var[inc_arry] = dtyp19gmdata
    CASE(disp_0K):
      --Neither (no settings)
      str_var[inc_arry] = dtyp14gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].ispare1', FALSE)
  ENDSELECT
  inc 
    
  --Load Standard Dispense Schedule Defaults  
  str_var[inc_arry] = dtyp10gmdata
  inc
  SELECT (DISPAPP[1].DISP_LDSC) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].DISP_LDSC', FALSE)
  ENDSELECT
  inc

  IF  DISPAPP[1].DISP_LDSC <> 2 THEN   
    --Type of Dozer Used  
    str_var[inc_arry] = dtyp11gmdata
    inc
    SELECT (DISPAPP[1].DISP_DOZR) OF
      CASE(disp_dzr80):
        --80cc
        str_var[inc_arry] = dtyp12gmdata
      CASE(disp_dzr160):
	--160cc
	str_var[inc_arry] = dtyp13gmdata
      CASE(disp_dzrnon):
	--Neither (no settings)
	str_var[inc_arry] = dtyp14gmdata
      ELSE:
	writeLog('Var Failed to read - DISPAPP[1].DISP_DOZR', FALSE)
    ENDSELECT 
  inc 
  ENDIF
     
END pwdisp_dsp
-----------------------------------------------------------------------------
ROUTINE pwdimp_dsp
-- PURPOSE: Build display for Process, Projection Weld/Dimpler
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  menu_gmdata[12] + appl_gmdata
  inc
  --Dispense
  str_var[inc_arry] = cprojcdimptc
  inc

  --One Projection Weld Controller
  str_var[inc_arry] = wldct_gmdata  --Select Weld Controller:
  inc
  SELECT (projwldapp[1].proj_ctrl) OF
    CASE(pjw_none):
      --None
      str_var[inc_arry] = none_gmdata 
    CASE(pjw_wtc):
      --One Projection Weld Controller
      str_var[inc_arry] = wtc_gmdata
  ENDSELECT    	
  inc
       
END pwdimp_dsp
-----------------------------------------------------------------------------
ROUTINE disp2_dsp
-- PURPOSE: Build display for Process, Dispense--Dispense
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  --Dispense/Dispense identified as Process
----------------------------------------
  str_var[inc_arry] =  combo_title
  inc
  --Dispense
  str_var[inc_arry] = menu_gmdata[13]
  inc

  --Two Dispense Controller
  str_var[inc_arry] = d2dc_gmdata
  inc
  SELECT (DISP2_APP) OF
    CASE(disp2_rhdn):
      --Robot Held Nozzle
      str_var[inc_arry] = r2n_gmdata
    CASE(disp2_dptsn):
      --Pedestal Held Nozzle
      str_var[inc_arry] = d2p1e_gmdata
    CASE(disp2_rhphn):
      --Robot Held Nozzle w/Material Hand
      str_var[inc_arry] = rnpn_gmdat
    ELSE:
      writeLog('Var Failed to read - DISP2_APP', FALSE)
  ENDSELECT
  inc

  --What type of Dispensing System?
  str_var[inc_arry] = dtyp16gmdata
  inc
  SELECT (DISPAPP[1].ispare1) OF
    CASE(disp_1K):
      --1K System
      str_var[inc_arry] = dtyp18gmdata
    CASE(disp_2K):
      --2K System
      str_var[inc_arry] = dtyp19gmdata
    CASE(disp_0K):
      --Neither (no settings)
      str_var[inc_arry] = dtyp14gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].ispare1', FALSE)
  ENDSELECT
  inc 
  
  --Load Standard Dispense Schedule Defaults  
  str_var[inc_arry] = dtyp10gmdata + 'Eq1'
  inc
  SELECT (DISPAPP[1].DISP_LDSC) OF 
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].DISP_LDSC', FALSE)
  ENDSELECT
  inc

  IF DISPAPP[1].DISP_LDSC <> 2 THEN        
    --Type of Dozer Used  
    str_var[inc_arry] = dtyp11gmdata + 'Eq1'
    inc
    SELECT (DISPAPP[1].DISP_DOZR) OF
      CASE(disp_dzr80):
        --80cc
        str_var[inc_arry] = dtyp12gmdata
      CASE(disp_dzr160):
        --160cc
        str_var[inc_arry] = dtyp13gmdata
      CASE(disp_dzrnon):
        --Neither (no settings)
	str_var[inc_arry] = dtyp14gmdata
      ELSE:
        writeLog('Var Failed to read - DISPAPP[1].DISP_DOZR', FALSE)
    ENDSELECT
    inc
  ENDIF

  --Insert Break Point for user	  
  str_var[inc_arry] = star_fill
  inc
  str_var[inc_arry] = star_p2
  inc

  --What type of Dispensing System?
  str_var[inc_arry] = dtyp17gmdata
  inc
  SELECT (DISPAPP[2].ispare1) OF
    CASE(disp_1K):
      --1K System
      str_var[inc_arry] = dtyp18gmdata
    CASE(disp_2K):
      --2K System
      str_var[inc_arry] = dtyp19gmdata
    CASE(disp_0K):
      --Neither (no settings)
      str_var[inc_arry] = dtyp14gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[2].ispare1', FALSE)
  ENDSELECT
  inc 
  
  --Load Standard Dispense Schedule Defaults  
  str_var[inc_arry] = dtyp10gmdata + 'Eq2'
  inc
  SELECT (DISPAPP[2].DISP_LDSC) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[2].DISP_LDSC', FALSE)
  ENDSELECT
  inc
  
  IF DISPAPP[2].DISP_LDSC <> 2 THEN
    --Type of Dozer Used  
    str_var[inc_arry] = dtyp11gmdata + 'Eq2'
    inc
    SELECT (DISPAPP[2].DISP_DOZR) OF
      CASE(disp_dzr80):
        --80cc
        str_var[inc_arry] = dtyp12gmdata
      CASE(disp_dzr160):
        --160cc
        str_var[inc_arry] = dtyp13gmdata
      CASE(disp_dzrnon):
        --Neither (no settings)
        str_var[inc_arry] = dtyp14gmdata
      ELSE:
        writeLog('Var Failed to read - DISPAPP[2].DISP_DOZR', FALSE)
    ENDSELECT
    inc
  ENDIF
   
END disp2_dsp
-----------------------------------------------------------------------------
ROUTINE dispspr_dsp
-- PURPOSE: Build display for Process, Dispense--SPR
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  combo_title
  inc
  --Dispense
  str_var[inc_arry] = pdisp_pspr  --'Ped Disp + Ped SPR'
  inc

  --Load Standard Dispense Schedule Defaults  
  str_var[inc_arry] = dtyp10gmdata + 'Eq1'
  inc
  SELECT (DISPAPP[1].DISP_LDSC) OF
    CASE(wizans_yes):
      --Yes
      str_var[inc_arry] = yes_gmdata
    CASE(wizans_no):
      --No
      str_var[inc_arry] = no_gmdata
    ELSE:
      writeLog('Var Failed to read - DISPAPP[1].DISP_LDSC', FALSE)
  ENDSELECT
  inc

  IF DISPAPP[1].DISP_LDSC <> 2 THEN					--don't show dozer question if standard schedule defaults not loaded.
    --Type of Dozer Used  
    str_var[inc_arry] = dtyp11gmdata + 'Eq1'
    inc
    SELECT (DISPAPP[1].DISP_DOZR) OF
      CASE(disp_dzr80):
        --80cc
	str_var[inc_arry] = dtyp12gmdata
      CASE(disp_dzr160):
	--160cc
	str_var[inc_arry] = dtyp13gmdata
      CASE(disp_dzrnon):
	--Neither (no settings)
	str_var[inc_arry] = dtyp14gmdata
      ELSE:
        writeLog('Var Failed to read - DISPAPP[1].DISP_DOZR', FALSE)
    ENDSELECT
    inc
  ENDIF

END dispspr_dsp
-----------------------------------------------------------------------------
ROUTINE sprspr_dsp
-- PURPOSE: Build display for Process, SPR--SPR
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: bshop_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  str_var[inc_arry] =  combo_title
  inc
  --Dispense
  str_var[inc_arry] = menu_gmdata[15]
  inc

END sprspr_dsp
-----------------------------------------------------------------------------
ROUTINE bshop_dsply
-- PURPOSE: this program is called to display the current configuration
--          this is used as a display only and changes are made using the
--          wizard. this program will be called from a case select in GMWIZARD
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --New variables used, need to initialize incase of coming from versions where they weren't
  IF UNINIT(dispapp[1].ispare1) THEN  --1K or 2K
    dispapp[1].ispare1 = 0
  ENDIF
  IF UNINIT(dispapp[2].ispare1) THEN  --1K or 2K
    dispapp[2].ispare1 = 0
  ENDIF
  --init aluminum weld var
  FOR v = 1 to 2 DO 
    FOR w = 1 to 5 DO
      IF UNINIT(spotapp_eq[v].spotgun[w].ispare3) THEN  --Aluminum Welding
        spotapp_eq[v].spotgun[w].ispare3 = 0
      ENDIF  
    ENDFOR
  ENDFOR

  --set dual_proc variable to the numerical value from the combo
  --process in the body shop wizard
  --setting it here as well as in gmwizbsh allows robots that are updated
  --from an earlier version where the dispaly feature did not exist
  --to be able to not get UNINIT data error on dual_proc
  IF (num_proc = 2) THEN --combo
    IF (bshop_proc1 = spotappl) THEN
      SELECT (bshop_proc2) OF
        CASE(spotappl):
          dual_proc = spot_spot
        CASE(projappl):
          dual_proc = spot_projw
        CASE(studappl):
          dual_proc = spot_stud
        CASE(dispappl):
          dual_proc = spot_disp 
        CASE(sprappl):
          dual_proc = spot_spr
        ELSE:
          dual_proc = 0
      ENDSELECT
    ENDIF --process 1 is spot
    IF (bshop_proc1 = studappl) THEN
      SELECT (bshop_proc2) OF
        CASE(dispappl):
          dual_proc = stud_disp
        CASE(sprappl):
          dual_proc = stud_spr
        ELSE:
          dual_proc = 0
       ENDSELECT
    ENDIF --process 1 is stud
    IF (bshop_proc1 = projappl) THEN
      SELECT (bshop_proc2) OF
        CASE(studappl):
          dual_proc = projw_stud
        CASE(dispappl):
          dual_proc = projw_disp
        CASE(dimpappl):
          dual_proc = projw_dimp
        ELSE:
          dual_proc = 0
      ENDSELECT
    ENDIF --process 1 is projection welder
    IF (bshop_proc1 = dispappl) THEN
      SELECT (bshop_proc2) OF
        CASE(dispappl):
          dual_proc = disp_disp
        CASE(sprappl):
          dual_proc = disp_spr
        ELSE:
          dual_proc = 0
      ENDSELECT
    ENDIF --process 1 is a dispenser
    IF (bshop_proc1 = sprappl) THEN
      SELECT (bshop_proc2) OF
        CASE(sprappl):
          dual_proc = spr_spr
        ELSE:
          dual_proc = 0
      ENDSELECT
    ENDIF --process 1 is spr
  ELSE
    dual_proc = 0
  ENDIF --num_proc = 2

  --Clear the string vars
  FOR w = 1 to 149 DO
    clr_var[w] = ''
  ENDFOR
  str_var = clr_var  
  inc_arry = 1
  alternate = 1

  IF num_proc = 2 THEN
	
    SELECT (dual_proc) OF	--bshop_proc1 and bshop_proc2 get stomped on and cannot be used for dual process
  
      CASE(spot_spot): 
        spotapp_dsp
        star_dsp
        mhapp_dsp 
        star_dsp
        tlc_dsp
        star_dsp
        vis_dsp
			   
      CASE(spot_projw):  
        spotpjw_dsp 	
        IF (wld1_app = wld1app_cg) AND (proj1_app = pjw1app_cg) THEN
          star_dsp
       	  tlc_dsp
       	ELSE
       	  star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp 	       	
        ENDIF
		   
      CASE(spot_stud): 
        spotstud_dsp 
        star_dsp
        spotapp_dsp	
        star_dsp	
        studapp_dsp
        star_dsp 
        mhapp_dsp
        star_dsp 
        tlc_dsp
        star_dsp
        vis_dsp  	
 			    
      CASE(spot_disp):
        spotdisp_dsp
        star_dsp 		 
        mhapp_dsp
        star_dsp 
        tlc_dsp
        star_dsp
        vis_dsp  		
  		 			
      CASE(spot_spr): 
        spotspr_dsp
        spotapp_dsp
        IF (wld1_app = wld1app_cg) AND (spr1_app = spr_rhg) THEN
          star_dsp
          tlc_dsp
        ELSE
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp 
        ENDIF         		
			 
      CASE(stud_disp):  
        studdisp_dsp
        star_dsp
        mhapp_dsp
        star_dsp 
        tlc_dsp
        star_dsp
        vis_dsp
      
      CASE(stud_spr):  
        studspr_dsp
        star_dsp
        mhapp_dsp
        star_dsp 
        tlc_dsp
        star_dsp
        vis_dsp
      
      CASE(projw_stud): 
        pwstud_dsp
        star_dsp
        mhapp_dsp
        star_dsp 
        tlc_dsp
        star_dsp
        vis_dsp
			
      CASE(projw_disp): 
        pwdisp_dsp
        star_dsp
        mhapp_dsp
        star_dsp 
        tlc_dsp
        star_dsp
        vis_dsp
             			
      CASE(projw_dimp):	
        pwdimp_dsp
        star_dsp
        tlc_dsp
     			
      CASE(disp_disp):  
        disp2_dsp
        IF ((disp1_app = disp1_phn) OR (disp1_app = disp1_rhnmh) OR (disp2_app = disp2_dptsn) OR (disp2_app = disp2_rhphn)) THEN --run MH setup
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp
        ENDIF
  				
      CASE(disp_spr):  
        dispspr_dsp
        star_dsp
        mhapp_dsp
        star_dsp 
        tlc_dsp
        star_dsp
        vis_dsp
			
      CASE(spr_spr):  
        sprspr_dsp
        IF (numsprctrl = 2) AND (spr2_app = spr_2phg) THEN -- 2 processes both setup as phg
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp
        ENDIF  
  					
      ELSE:
    ENDSELECT
  
  display_all
  
  ENDIF	
	
  IF num_proc = 1 THEN	
	
    SELECT bshop_proc1 OF
      CASE(spotappl):  --1(SpotWeld)*
        spotapp_dsp
        IF (((numwldctrl = 1) AND (wld1_app <> wld1app_cg) AND (wld1_app <> wld1app_snut)) OR (numwldctrl = 2)) THEN --pedestal application
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp
        ENDIF --pedestal application

        IF (wld1_app = wld1app_cg) THEN --ask if carried gun tool changer
          star_dsp
          tlc_dsp
        ENDIF  --carried tool changer?
  		      
      CASE(projappl):  --2(Projection Weld)*
        projapp_dsp
        IF (proj1_app = pjw1app_pg) THEN --pedestal application
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp 
        ENDIF

      CASE(studappl):  --3(Stud Weld)*
        studapp_dsp
        IF ((stud1_app = stud_phg) OR (stud1_app = stud_spdg) OR (stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN --run MH setup
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp
        ENDIF
					      
      CASE(dispappl):  --4(Dispense)*
        dispapp_dsp
        IF ((disp1_app = disp1_phn) OR (disp1_app = disp1_rhnmh) OR (disp2_app = disp2_dptsn) OR (disp2_app = disp2_rhphn)) THEN --run MH setup
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp
        ENDIF
  		    
      CASE(sprappl):   --5(Self-Pierce Rivet)*
        sprapp_dsp
        IF ((spr1_app = spr_rhg) AND (num_proc = 1)) THEN -- SPR is only 1 process with rhg ask only TC questions
          star_dsp
          tlc_dsp
        ENDIF

        IF ((spr1_app = spr_phg) AND (num_proc = 1)) THEN -- SPR is process 1 and pedestal gun ask MH questions
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp
        ENDIF     
			     
      CASE(dimpappl):  --6(Dimpler)
        dimpapp_dsp
        IF (dimp1_app = dimp1app_sp) THEN --pedestal application
          star_dsp
          mhapp_dsp
          star_dsp 
          tlc_dsp
          star_dsp
          vis_dsp 
  			ENDIF

      CASE(fdsappl):  --7(Flow Drill Screw)
        fdsapp_dsp 
             
      ELSE:
        --No Process 1, Return to Main Form
    ENDSELECT
   
    display_all

  ENDIF

  --Material Handling Application Only	
  IF num_proc = 0 THEN	
    mhapp_dsp
    star_dsp
    tlc_dsp
    star_dsp
    vis_dsp
    display_all
  ENDIF	

END bshop_dsply
--------------------------------------------------------------------------------
--------------------        MAIN BODY OF PROGRAM     ---------------------------
--------------------------------------------------------------------------------
BEGIN

  bshop_dsply

END GMBSDATA
