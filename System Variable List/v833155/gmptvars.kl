-- -----------------------------------------------------------------------
--
--   MODULE:         GMPTVARS.KL
--   TITLE:          GMPTVARS PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Powertrain variable setup files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZMH,GMWIZVIS are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--                    4-24-17    R.Kosaski        added code for the WE robot setup
--          4.1       2-17-18    R.Kosaski        Added previolation and Menu SETUP for FXGMPTEG display
--
--
--------------------------------------------------------------------------
PROGRAM GMPTVARS

%COMMENT = 'GMPT Vars V4.1'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%ENVIRONMENT IOSETUP -- Required for the I/O Builtin support
%ENVIRONMENT SYSDEF  -- required for the $group[1]. variable

%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
--%INCLUDE GMCUSVRS  -- GM CUST VARS from the wizard -- Better to use individual declare from GMWIZCFG

CONST

Version = '2018-17-2'
%INCLUDE gmcnstnt -- all gm Wizard constants

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs  : INTEGER  -- How many errors I/O error counter had when the program started

  l_i,i,        -- Used in FOR looping
  gm_status    : INTEGER

  GMPTVarsDone   IN SHADOW : BOOLEAN -- Keeps track if routine completed at least first time

  Grp_Is_Setup IN SHADOW : BOOLEAN -- Keeps track if routine setup Mhgrip at least first time
  Grp_Is_GRS4  IN SHADOW : BOOLEAN -- Identifies if MHGRIP is configured to GRS4 Spec

  InBlockSetup IN SHADOW : ARRAY[Max_In_Blks] OF BOOLEAN -- indicates if the input block has been setup before
  AnalgInSetup IN SHADOW : ARRAY[Max_In_Blks] OF BOOLEAN -- indicates if the Analog Inputs has been setup before
  OutVlvSetup  IN SHADOW : ARRAY[Max_OutBlks] OF BOOLEAN -- indicates if the Valve Pack has been setup before

  -- Set to the LAST Number of Valve Packs when the Wizard Requested and update
  LastVlvePcks,
  LastDigInBlk  IN SHADOW : INTEGER -- last number input blocks

%INCLUDE gmcfgcel  -- used for all the workcell variables
%INCLUDE gmcfgerr  -- used for all the error counting and status while executing the wizard
%INCLUDE gmcfgmh   -- used for all the configuration og the material handling setup
%INCLUDE gmcfgvis  -- has the vision vars
%INCLUDE gmcfgtlc  -- Used for tool changer config files
%INCLUDE gmcfgpwr  -- GMPT Configuration variables

%INCLUDE gmrdutil

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
ROUTINE InitGMPTVars
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN
Current_Ver = Version -- Set the version for reference

  IF UNINIT(wiz_lang) THEN
    wiz_lang = 1 -- set Default as English
  ENDIF
  IF UNINIT(Use_GMPT_Log) THEN -- Set to create a log file of wizard
    Use_GMPT_Log = TRUE
  ENDIF
  IF UNINIT(EnblIgnrFlts) THEN -- Dont Allow the Ignore Fault in Clamp recovery
    EnblIgnrFlts = FALSE
  ENDIF
  IF UNINIT(Use_Prog_Mon) THEN -- Use Program monitor for Washer Process
    Use_Prog_Mon = FALSE
  ENDIF
  IF UNINIT(Use_RZIC) THEN     --Use Rail Zone Interference
    Use_RZIC = FALSE
  ENDIF
  IF UNINIT(RZIC_Type) THEN
    RZIC_Type = 1 --- set to Left Hand default
  ENDIF
  IF UNINIT(DisplayStat) THEN  -- If display status in TPerror Window as setup runs
    DisplayStat = TRUE
  ENDIF
  IF UNINIT(DisplayDely) THEN  -- The Delay to allow a user to see status printed to error Window
    DisplayDely = 1000
  ENDIF
  IF UNINIT(Use_Dispense) THEN  -- If a dispense system is used
    Use_Dispense = FALSE
  ENDIF

  USING WizardStatus DO -- set start using WIZARDSTATUS structure vars
    IF UNINIT(Cnfg_Is_Done) OR (Reset_Cell) THEN
      Cnfg_Is_Done = FALSE
    ENDIF
    IF UNINIT(Cnfg_Status) OR (Reset_Cell) THEN
      Cnfg_Status = 0
    ENDIF
    IF UNINIT(DsplyIs_Done) OR (Reset_Cell) THEN
      DsplyIs_Done = FALSE
    ENDIF
    IF UNINIT(Dsply_Status) OR (Reset_Cell) THEN
      Dsply_Status = 0
    ENDIF
    IF UNINIT(SetupIs_Done) OR (Reset_Cell) THEN
      SetupIs_Done = FALSE
    ENDIF
    IF UNINIT(Setup_Status) OR (Reset_Cell) THEN
      Setup_Status = 0
    ENDIF
  ENDUSING -- set end the WIZARDSTATUS structure vars

   IF Chk_Feature('H731') THEN -- If WE robot, ensure monitoring is enabled added 4-24-17
     Set_B_sVar('$RI_AIRPURGE[1]',TRUE)-- if WE robot, unconditionally enable the Purge
                                       -- monitoring for Group#1 on RI 7 & RI 8
     WriteLog('Verified Purge settings for Group#1 WE Robot Enabled',FALSE)

--  Set WE Interconnect purge monitoring
    Set_B_sVar('$THRRDITABLE[1].$THR_ENB',TRUE)
    Set_I_sVar('$THRRDITABLE[1].$DI_NO',7)
    Set_I_sVar('$THRRDITABLE[1].$DO_NO',132)
--  Set WE Interconnect purge monitoring
    Set_B_sVar('$THRRDITABLE[2].$THR_ENB',TRUE)
    Set_I_sVar('$THRRDITABLE[2].$DI_NO',8)
    Set_I_sVar('$THRRDITABLE[2].$DO_NO',133)

   ENDIF

-- Setup so the GMPT data is viewable in the setup menu

 Set_S_sVar('$custommenu[19].$prog_name','GMPTDATA')
 Set_S_sVar('$custommenu[19].$title','GMPT Setup')
 Set_I_sVar('$custommenu[19].$option',31)

-- Enable DCS previolation Mode, allows robot to have ability to tell
-- user the path is about to go outside DCS zone
 WriteLog('Setting $DCS_PRE_CHK.$MODE equal to 1 for Previolation checking',FALSE)
 Set_I_sVar('$DCS_PRE_CHK.$MODE',1)

  RETURN

END InitGMPTVars
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN
IF UNINIT(ErrsInShop.ErrorsVarbls) THEN
  ErrsInShop.ErrorsVarbls = 0
ENDIF
IF UNINIT(GMPTVarsDone) THEN
  GMPTVarsDone = FALSE
ENDIF

StrtinErs = ErrsInShop.ErrorsVarbls

ClrUtltyErrs -- Clear all errors in utility program to be used when done

   WriteLog('GMPT Program GMPTVARS has been Started', FALSE)

  IF (GMPTVarsDone = TRUE) THEN -- setup has already been setup
      WriteLog('GMPT Variables Already Setup', FALSE)
    IF ExecSetupAgn('GMPT Variables') THEN -- ask user if they want to setup again
     GMPTVarsDone = FALSE
    ELSE
      WriteLog('GMPT Variables already Complete', FALSE)
      WriteLog('GMPTVARS Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

InitGMPTVars

 -- Get all errors in utility program that was used to any program errors
 ErrsInShop.ErrorsVarbls = ErrsInShop.ErrorsVarbls +  (AddUtltyErrs)

 IF (ErrsInShop.ErrorsVarbls - StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('GMPT Variable setup,GMPTVARS had ' + int2str((ErrsInShop.ErrorsVarbls-StrtinErs))+' while executing', TRUE)
 ELSE
   WriteLog('GMPT Variable setup Program completed', FALSE)
   GMPTVarsDone = TRUE
 ENDIF

  WriteLog('',FALSE)

END GMPTVARS
