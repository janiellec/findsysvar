-- -----------------------------------------------------------------------
--
--   MODULE:         GMSWGTC.KL
--   TITLE:          GMSWGTC PROGRAM
--
--
--   WRITTEN BY:     FANUC
--   REVISION DATE:  2018/10/01
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and sai
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Servo gun tool change addtional setup for gun and tip dressers.
--                      It is called from the Gun Change Setup menu in the Additional Servo
--                      Gun Setup menu which can be found under Miscellaneous Tools.
--                      
--                     
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--             V4.0   2018/10/01 marchaka         Initial release.  Based off of content in srvo_tc (G4 version).
--             V4.0   2018/11/02 marchaka         Fix an issue where the pressure calibration table has entries
--                                                that are higher than the maximum pressure of the gun.
--             V4.1   2019/08/10 marchaka         Add maximum pressure setup for guns 2-4.
--             V4.1   2019/10/02 marchaka	  Add gun type settings (C or X)
--             V4.1   2019/10/30 marchaka         Modify servogun pressure calibration table to meet GM standards
--             v4.2   2020/04/20 schoensm         Added reschke2.tp for V8.333P09  
--             v4.3   2020/10/16 schoensm         Added changes for pressure cal table for Aluminum Welding
--             v4.3   2020/11/09 marchaka         Add servo gun thickness check settings                               
--
--
--
--
--------------------------------------------------------------------------
PROGRAM GMSWGTC

%COMMENT = 'GM SWG TC V4.3'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE gm_var  --GM variables
%INCLUDE gmcfgspt  --GM Spot App variables

CONST
Version = '2020-11-09'
%INCLUDE gmcnstnt

TYPE
  prs_sched_t FROM GMCUSTO = STRUCTURE
    press_val    : INTEGER
    Thick_min    : REAL
    Thick_max    : REAL
    push_depth   : REAL
    comment1     : STRING[20]
    comment2     : STRING[20]
  ENDSTRUCTURE

  std_pres_t FROM GMCUSTO = STRUCTURE
    min_press    : INTEGER
    td_press     : INTEGER
    tot_num_pres : INTEGER
    std_prs_val  : ARRAY[32] OF prs_sched_t
  ENDSTRUCTURE

VAR
  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  l_i          : INTEGER
  x            : INTEGER
  gm_status    : INTEGER   
  l_psve       : INTEGER
  prss_kgf     : REAL
  ls_cal_idx   : STRING[1]
  l_prs_val    : REAL
  l_gun        : INTEGER
  gun_num      : STRING[2]
  sched_num    : STRING[2]
  l_sched_idx  : INTEGER
  l_std_prs    : INTEGER
  l_sched      : INTEGER
  l_sec_sched  : BOOLEAN
  l_prs_idx    : INTEGER
  l_weld_press : REAL
  a            : STRING[4]
  exit         : BOOLEAN
  prog_nam     : STRING[12]
  total_guns   : INTEGER --total number of guns configured
  default_prs  IN SHADOW FROM GMCUSTO : ARRAY[5, 2] OF std_pres_t 
  pcal_value   IN SHADOW FROM GMCUSTO : ARRAY[10] OF INTEGER
  l_td_press   : REAL  
  num_tipdrs   IN SHADOW FROM GMCUSTO: INTEGER
  srvo_dress   IN SHADOW FROM GMCUSTO: INTEGER
  pshdep_float : REAL --used to indirectly move push_depth values into pressure shedules
  pshdep_mem   : REAL --used for debug

%INCLUDE klrdutil
%INCLUDE gmrdutil  --GM utilities

ROUTINE srvotc_reg FROM gmspotrg --setup tip dresser register
ROUTINE tipdress_io FROM gmspotio2 --setup tip dresser I/O
ROUTINE td_pg_mc_1 FROM gmspotpg --load tip dress 1 programs
ROUTINE td_pg_mc_2 FROM gmspotpg --load tip dress 2 programs
ROUTINE td_pg_mc_3 FROM gmspotpg --load tip dress 3 programs
ROUTINE td_pg_mc_4 FROM gmspotpg --load tip dress 4 programs
ROUTINE srvo_td FROM gmspotvr4 --servo tip dresser settings
ROUTINE swg_reg FROM gmspotrg --setup tip wear registesrs
ROUTINE spot_posreg FROM gmspotrg --setup position registers
-----------------------------------------------------------------------------
ROUTINE initswgtc
-- PURPOSE: Initialize all required items
--
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  do_kcl_Cmnd('CHDIR FRS:\') --reset FRS to root directory
  do_kcl_Cmnd('CHDIR FR:\') --reset FR to root directory

  IF UNINIT(spotctrl[1].spot_gun[1].ispot16) THEN
    spotctrl[1].spot_gun[1].ispot16   = 425   -- Servo Gun Thickness Out of Tolerance
  ENDIF

END initswgtc
-----------------------------------------------------------------------------
ROUTINE setup_guns
-- PURPOSE: setup gun settings adn presssure and distance schedules
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
swgequip:  INTEGER
cal_max:  INTEGER

BEGIN

  swgequip = 1 --set equipment number used to 1
  pshdep_float = 6.0

  --Check to see if the additional gun axes are configured before setting them        
  GET_VAR(l_psve, '*system*', '$scr_grp[2].$num_axes', total_guns,  gm_status)
    IF (gm_status <> 0) THEN --couldn't read variable
      POST_ERR(38000, 'Failed to read number of servo gun axes on G2', 0,0)
      POST_ERR(38000, 'Gun Settings not Completed', 0,0)  
    ELSE  --could read how many guns installd on group 2

      IF (swgtcnumguns <> total_guns) THEN --requested gun config doesn't have enough axes installed
        POST_ERR(38000, 'Total guns to config does not match total guns avail', 0,0)
        POST_ERR(38000, 'Gun Settings not Completed', 0,0)
        goto gun_end
      ELSE --correct amount of guns installed

        FOR l_gun = 1 to swgtcnumguns DO -- Total Number of Guns
          gun_num = int_to_strg(l_gun)

          -- Tip wear down and gun sag variables
          prss_kgf =  spotctrl[swgequip].spot_gun[l_gun].sg_maxpr  * n_to_kgf
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$PRESS_LIM',prss_kgf) 

	  --V8.33P10 9-30-2020 schoensm added check for aluminum welding, modify pressure cal table
	  IF (spotapp_eq[swgequip].spotgun[l_gun].ispare3 <> 1) THEN
            IF (spotctrl[swgequip].spot_gun[l_gun].sg_maxpr <= 3600) THEN
              pcal_value[1] = 1600	
              pcal_value[2] = 2000
              pcal_value[3] = 2200	
              pcal_value[4] = 2400
              pcal_value[5] = 2600	
              pcal_value[6] = 2800
              pcal_value[7] = 3000
              pcal_value[8] = 3200
              pcal_value[9] = 3400
              pcal_value[10]= 3600
	    ELSE --maximum pressure is greater than 3600N
              pcal_value[1] = 1600	
              pcal_value[2] = 2000
              pcal_value[3] = 2400	
              pcal_value[4] = 2800
              pcal_value[5] = 3200	
              pcal_value[6] = 3600
              pcal_value[7] = 4000
              pcal_value[8] = 4400
              pcal_value[9] = 4800
              pcal_value[10]= 5000
            ENDIF
	  ELSE   --aluminum weld pressure cal table, V8.33P10 9-30-2020 schoensm
	    pcal_value[1] = 1600	
	    pcal_value[2] = 3600
	    pcal_value[3] = 4000	
	    pcal_value[4] = 4400
	    pcal_value[5] = 5000	
	    pcal_value[6] = 6000
	    pcal_value[7] = 0
	    pcal_value[8] = 0
	    pcal_value[9] = 0
	    pcal_value[10]= 0   	
	  ENDIF  --aluminum weld check
		  
	  IF (l_gun = 4) THEN  --for some reason this isn't defaulted for gun 4
            Set_R_sVar('$sggun4.$setup.$cal_scale1', 10.000)
	    Set_R_sVar('$sggun4.$setup.$cal_scale2', 20.000)
          ENDIF	
		  
          IF (spotapp_eq[swgequip].spotgun[l_gun].ispare3 <> 1) THEN  --aluminum check
            cal_max = 0 --record array item where max pressure should go
            FOR l_i = 1 TO 10 DO
              IF (pcal_value[l_i] < spotctrl[swgequip].spot_gun[l_gun].sg_maxpr) THEN
                ls_cal_idx = int_to_strg(l_i)
                l_prs_val = (pcal_value[l_i] * n_to_kgf)
                Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS' + ls_cal_idx, l_prs_val)
                cal_max = l_i + 1
              ELSE
	        IF (cal_max <> 0) THEN
                  IF (cal_max = l_i) THEN
                    ls_cal_idx = int_to_strg(cal_max)
                    l_prs_val = prss_kgf --set earlier in the larger FOR loop
                    Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS' + ls_cal_idx, l_prs_val)	
                  ENDIF            
                ENDIF			  
              ENDIF
            ENDFOR

            --for some reason item 1 sometimes gets incorrectly, I don't see how
            Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS1' , (pcal_value[1] * N_TO_KGF))
		  
            IF (spotctrl[swgequip].spot_gun[l_gun].sg_maxpr > 3600) THEN
              IF (spotctrl[swgequip].spot_gun[l_gun].sg_maxpr = (5000)) THEN 
                l_prs_val = (pcal_value[10] * N_TO_KGF)
                Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS10', l_prs_val)
              ELSE
                IF (spotctrl[swgequip].spot_gun[l_gun].sg_maxpr > pcal_value[9]) THEN
                  l_prs_val = prss_kgf --set earlier in the larger FOR loop
                  Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS10', l_prs_val)	
                ENDIF
              ENDIF
            ELSE
              IF (spotctrl[swgequip].spot_gun[l_gun].sg_maxpr = 3600) THEN
                l_prs_val = (pcal_value[10] * N_TO_KGF)
                Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS10', l_prs_val)
              ELSE
                IF (spotctrl[swgequip].spot_gun[l_gun].sg_maxpr > pcal_value[9]) THEN
                  l_prs_val = prss_kgf --set earlier in the larger FOR loop
                  Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS10', l_prs_val)	
                ENDIF
              ENDIF
            ENDIF
          ELSE   --aluminum check
            cal_max = 0 --record array item where max pressure should go
            FOR l_i = 1 TO 10 DO
              IF (pcal_value[l_i] < spotctrl[swgequip].spot_gun[l_gun].sg_maxpr) THEN
                ls_cal_idx = int_to_strg(l_i)
                l_prs_val = (pcal_value[l_i] * n_to_kgf)
                Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS' + ls_cal_idx, l_prs_val)
                cal_max = l_i + 1
              ELSE
	        IF (cal_max <> 0) THEN
                  IF (cal_max = l_i) THEN
                    ls_cal_idx = int_to_strg(cal_max)
                    l_prs_val = 0
                    Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS' + ls_cal_idx, l_prs_val)	
                  ENDIF            
                ENDIF			  
              ENDIF
            ENDFOR
            --for some reason item 1 sometimes gets incorrectly, I don't see how
            Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESS1' , (pcal_value[1] * N_TO_KGF))
          ENDIF  --aluminum check

 
        ENDFOR --guns 1 to total number of guns

        FOR l_gun = 1 to swgtcnumguns DO -- Total Number of Guns

          gun_num = int_to_strg(l_gun)
          SELECT spotapp_eq[swgequip].spotgun[l_gun].sg_guntyp OF
            CASE(srvo_cgun):
              Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$SAGFIXRATIO', 100)
            CASE(srvo_xgun):
              Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$SAGFIXRATIO', 50)
            ELSE:
          ENDSELECT

          --V8.33P10 ZDT Pressure Check Enable 10-19-2020 schoensm
	  Set_I_sVar('$sgprsmsgcfg[' + gun_num + ',1]', 1)  --enable pressure checking Gun X

        ENDFOR --guns 1 --> total number of guns setup

        FOR l_gun = 2 to swgtcnumguns DO -- Total Number of Guns
          gun_num = int_to_strg(l_gun)

          -- Tip wear down and gun sag variables
          IF (l_gun = 2) THEN    
            Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$TIPINFIOIDX', spotctrl[1].spot_gun[2].do_tipchgreq)  
            Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$RBTINFIOIDX', spotctrl[1].spot_gun[2].do_tipchgreq)  
          ENDIF
          IF (l_gun = 3) THEN    
            Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$TIPINFIOIDX', spotctrl[1].spot_gun[3].do_tipchgreq)  
            Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$RBTINFIOIDX', spotctrl[1].spot_gun[3].do_tipchgreq)  
          ENDIF
          IF (l_gun = 4) THEN   
            Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$TIPINFIOIDX', spotctrl[1].spot_gun[4].do_tipchgreq)  
            Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$RBTINFIOIDX', spotctrl[1].spot_gun[4].do_tipchgreq)  
          ENDIF

          Set_B_sVar('$SGGUN' + gun_num + '.$SETUP.$WRDWN_COMP', TRUE)
          Set_B_sVar('$SGGUN' + gun_num + '.$SETUP.$GUNSAG_COMP', TRUE)
          Set_B_sVar('$SGGUN' + gun_num + '.$SETUP.$TIPCLOSDIR', TRUE)
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_OPENPOS', 20.000)
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$MAXWDNTIP', 6.0)  
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$MAXWDNTIPER', 2.0)
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$MAXWDNRBT', 6.0)  
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$MAXWDNRBTER', 2.0)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED1', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED2', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED3', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED4', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED5', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED6', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED7', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED8', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED9', 50)
          Set_I_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_SPEED10', 50)
          Set_R_sVar('$SGGUN' + gun_num + '.$MANUAL.$PRESS_TIME', 2.000)
          Set_I_sVar('$SGGUN' + gun_num + '.$SGTWD.$TIP_SPD', 100)

          Set_I_sVar('$SGGUN' + gun_num + '.$ATUN.$K6_FOUTDLY', 200)  -- Autotuning a small Tolomatic
          Set_I_sVar('$SGGUN' + gun_num + '.$ATUN.$K6_OVSLIMIT', 50)  

          Set_I_sVar('$SGGUN' + gun_num + '.$ATUN.$STD_CLSTH', 38)  
          Set_I_sVar('$SGGUN' + gun_num + '.$ATUN.$MIN_CLSTH', 38) 
          Set_R_sVar('$SGGUN' + gun_num + '.$ATUN.$MGN_CLSTH', 2.6)   

          Set_R_sVar('$SGTHKSET' + gun_num + '.$OPN_DIST', 10.0)   

          --Filtering
          Set_I_sVar('$SGGUN' + gun_num + '.$ATUN.$INIT_FILTER', 30)

          Set_I_sVar('$SGGUN' + gun_num + '.$FC_PARAM.$SEV_MISCLS', 2) 
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CREEP_DST', 1.3) -- 1mm  
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$PUSH_MARGIN', 1.3)
          Set_R_sVar('$SGGUN' + gun_num + '.$FC_PARAM.$LOW_TRQ', 1.0)

          FOR l_i = 1 to 99 DO  
            sched_num = int_to_strg(l_i)
            -- Pushing Depth 16.0 for X-Gun, 6.0 for all other metal types, v8.33p10
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$push_depth', 6.0)
          ENDFOR 

          -- Pressure calibration setup vars
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_THICK', 13.0)
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PUSH', 8.0)
          Set_R_sVar('$SGGUN' + gun_num + '.$SETUP.$CAL_PRESTIM', 2.0)

          -- Backup Schedules for Extra Guns
          Set_S_sVar('$sgback' + gun_num + '[1].$comment', '10mm open')
          Set_R_sVar('$sgback' + gun_num + '[1].$stroke', 10.0)
          Set_B_sVar('$sgback' + gun_num + '[1].$use_manual', TRUE)
          Set_S_sVar('$sgback' + gun_num + '[2].$comment', '20mm open')
          Set_R_sVar('$sgback' + gun_num + '[2].$stroke', 20.0)
          Set_B_sVar('$sgback' + gun_num + '[2].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[3].$comment', '30mm open')
          Set_R_sVar('$sgback' + gun_num + '[3].$stroke', 30.0)
          Set_B_sVar('$sgback' + gun_num + '[3].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[4].$comment', '40mm open')
          Set_R_sVar('$sgback' + gun_num + '[4].$stroke', 40.0)
          Set_B_sVar('$sgback' + gun_num + '[4].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[5].$comment', '50mm open')
          Set_R_sVar('$sgback' + gun_num + '[5].$stroke', 50.0)
          Set_B_sVar('$sgback' + gun_num + '[5].$use_manual', TRUE)
          Set_S_sVar('$sgback' + gun_num + '[6].$comment', '60mm open')
          Set_R_sVar('$sgback' + gun_num + '[6].$stroke', 60.0)
          Set_B_sVar('$sgback' + gun_num + '[6].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[7].$comment', '70mm open')
          Set_R_sVar('$sgback' + gun_num + '[7].$stroke', 70.0)
          Set_B_sVar('$sgback' + gun_num + '[7].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[8].$comment', '80mm open')
          Set_R_sVar('$sgback' + gun_num + '[8].$stroke', 80.0)
          Set_B_sVar('$sgback' + gun_num + '[8].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[9].$comment', '90mm open')
          Set_R_sVar('$sgback' + gun_num + '[9].$stroke', 90.0)
          Set_B_sVar('$sgback' + gun_num + '[9].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[10].$comment', '100mm open')
          Set_R_sVar('$sgback' + gun_num + '[10].$stroke', 100.0)
          Set_B_sVar('$sgback' + gun_num + '[10].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[11].$comment', '110mm open')
          Set_R_sVar('$sgback' + gun_num + '[11].$stroke', 110.0)
          Set_B_sVar('$sgback' + gun_num + '[11].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[12].$comment', '120mm open')
          Set_R_sVar('$sgback' + gun_num + '[12].$stroke', 120.0)
          Set_B_sVar('$sgback' + gun_num + '[12].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[13].$comment', '130mm open')
          Set_R_sVar('$sgback' + gun_num + '[13].$stroke', 130.0)
          Set_B_sVar('$sgback' + gun_num + '[13].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[14].$comment', '140mm open')
          Set_R_sVar('$sgback' + gun_num + '[14].$stroke', 140.0)
          Set_B_sVar('$sgback' + gun_num + '[14].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[15].$comment', '150mm open')
          Set_R_sVar('$sgback' + gun_num + '[15].$stroke', 150.0)
          Set_B_sVar('$sgback' + gun_num + '[15].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[16].$comment', '160mm open')
          Set_R_sVar('$sgback' + gun_num + '[16].$stroke', 160.0)
          Set_B_sVar('$sgback' + gun_num + '[16].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[17].$comment', '170mm open')
          Set_R_sVar('$sgback' + gun_num + '[17].$stroke', 170.0)
          Set_B_sVar('$sgback' + gun_num + '[17].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[18].$comment', '180mm open')
          Set_R_sVar('$sgback' + gun_num + '[18].$stroke', 180.0)
          Set_B_sVar('$sgback' + gun_num + '[18].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[19].$comment', '190mm open')
          Set_R_sVar('$sgback' + gun_num + '[19].$stroke', 190.0)
          Set_B_sVar('$sgback' + gun_num + '[19].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[20].$comment', '200mm open')
          Set_R_sVar('$sgback' + gun_num + '[20].$stroke', 200.0)
          Set_B_sVar('$sgback' + gun_num + '[20].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[21].$comment', '210mm open')
          Set_R_sVar('$sgback' + gun_num + '[21].$stroke', 210.0)
          Set_B_sVar('$sgback' + gun_num + '[21].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[22].$comment', '220mm open')
          Set_R_sVar('$sgback' + gun_num + '[22].$stroke', 220.0)
          Set_B_sVar('$sgback' + gun_num + '[22].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[23].$comment', '230mm open')
          Set_R_sVar('$sgback' + gun_num + '[23].$stroke', 230.0)
          Set_B_sVar('$sgback' + gun_num + '[23].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[24].$comment', '240mm open')
          Set_R_sVar('$sgback' + gun_num + '[24].$stroke', 240.0)
          Set_B_sVar('$sgback' + gun_num + '[24].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[25].$comment', '250mm open')
          Set_R_sVar('$sgback' + gun_num + '[25].$stroke', 250.0)
          Set_B_sVar('$sgback' + gun_num + '[25].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[26].$comment', '260mm open')
          Set_R_sVar('$sgback' + gun_num + '[26].$stroke', 260.0)
          Set_B_sVar('$sgback' + gun_num + '[26].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[27].$comment', '270mm open')
          Set_R_sVar('$sgback' + gun_num + '[27].$stroke', 270.0)
          Set_B_sVar('$sgback' + gun_num + '[27].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[28].$comment', '280mm open')
          Set_R_sVar('$sgback' + gun_num + '[28].$stroke', 280.0)
          Set_B_sVar('$sgback' + gun_num + '[28].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[29].$comment', '290mm open')
          Set_R_sVar('$sgback' + gun_num + '[29].$stroke', 290.0)
          Set_B_sVar('$sgback' + gun_num + '[29].$use_manual', FALSE)
          Set_S_sVar('$sgback' + gun_num + '[30].$comment', 'Gun Closed')
          Set_R_sVar('$sgback' + gun_num + '[30].$stroke', 0.0)
          Set_B_sVar('$sgback' + gun_num + '[30].$use_manual', TRUE)

          -- Distance Schedules for TC Guns
          Set_S_sVar('$sgdst' + gun_num + '[1].$comment','1mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[1].$dst_gun', 1.0)
          Set_R_sVar('$sgdst' + gun_num + '[1].$dst_rbt', 1.0)
          Set_S_sVar('$sgdst' + gun_num + '[2].$comment','2mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[2].$dst_gun', 2.0)
          Set_R_sVar('$sgdst' + gun_num + '[2].$dst_rbt', 2.0)
          Set_S_sVar('$sgdst' + gun_num + '[3].$comment','3mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[3].$dst_gun', 3.0)
          Set_R_sVar('$sgdst' + gun_num + '[3].$dst_rbt', 3.0)
          Set_S_sVar('$sgdst' + gun_num + '[4].$comment','4mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[4].$dst_gun', 4.0)
          Set_R_sVar('$sgdst' + gun_num + '[4].$dst_rbt', 4.0)
          Set_S_sVar('$sgdst' + gun_num + '[5].$comment','5mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[5].$dst_gun', 5.0)
          Set_R_sVar('$sgdst' + gun_num + '[5].$dst_rbt', 5.0)
          Set_S_sVar('$sgdst' + gun_num + '[6].$comment','6mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[6].$dst_gun', 6.0)
          Set_R_sVar('$sgdst' + gun_num + '[6].$dst_rbt', 6.0)
          Set_S_sVar('$sgdst' + gun_num + '[7].$comment','7mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[7].$dst_gun', 7.0)
          Set_R_sVar('$sgdst' + gun_num + '[7].$dst_rbt', 7.0)
          Set_S_sVar('$sgdst' + gun_num + '[8].$comment','8mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[8].$dst_gun', 8.0)
          Set_R_sVar('$sgdst' + gun_num + '[8].$dst_rbt', 8.0)
          Set_S_sVar('$sgdst' + gun_num + '[9].$comment','9mm RbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[9].$dst_gun', 9.0)
          Set_R_sVar('$sgdst' + gun_num + '[9].$dst_rbt', 9.0)
          Set_S_sVar('$sgdst' + gun_num + '[10].$comment','10mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[10].$dst_gun', 10.0)
          Set_R_sVar('$sgdst' + gun_num + '[10].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[11].$comment','11mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[11].$dst_gun', 11.0)
          Set_R_sVar('$sgdst' + gun_num + '[11].$dst_rbt', 11.0)
          Set_S_sVar('$sgdst' + gun_num + '[12].$comment','12mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[12].$dst_gun', 12.0)
          Set_R_sVar('$sgdst' + gun_num + '[12].$dst_rbt', 12.0)
          Set_S_sVar('$sgdst' + gun_num + '[13].$comment','13mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[13].$dst_gun', 13.0)
          Set_R_sVar('$sgdst' + gun_num + '[13].$dst_rbt', 13.0)
          Set_S_sVar('$sgdst' + gun_num + '[14].$comment','14mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[14].$dst_gun', 14.0)
          Set_R_sVar('$sgdst' + gun_num + '[14].$dst_rbt', 14.0)
          Set_S_sVar('$sgdst' + gun_num + '[15].$comment','15mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[15].$dst_gun', 15.0)
          Set_R_sVar('$sgdst' + gun_num + '[15].$dst_rbt', 15.0)
          Set_S_sVar('$sgdst' + gun_num + '[16].$comment','16mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[16].$dst_gun', 16.0)
          Set_R_sVar('$sgdst' + gun_num + '[16].$dst_rbt', 16.0)
          Set_S_sVar('$sgdst' + gun_num + '[17].$comment','17mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[17].$dst_gun', 17.0)
          Set_R_sVar('$sgdst' + gun_num + '[17].$dst_rbt', 17.0)
          Set_S_sVar('$sgdst' + gun_num + '[18].$comment','18mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[18].$dst_gun', 18.0)
          Set_R_sVar('$sgdst' + gun_num + '[18].$dst_rbt', 18.0)
          Set_S_sVar('$sgdst' + gun_num + '[19].$comment','19mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[19].$dst_gun', 19.0)
          Set_R_sVar('$sgdst' + gun_num + '[19].$dst_rbt', 19.0)
          Set_S_sVar('$sgdst' + gun_num + '[20].$comment','20mmRbtGun')
          Set_R_sVar('$sgdst' + gun_num + '[20].$dst_gun', 20.0)
          Set_R_sVar('$sgdst' + gun_num + '[20].$dst_rbt', 20.0)

          -- Open Distance Gun Customizaiton
          Set_S_sVar('$sgdst' + gun_num + '[21].$comment','40mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[21].$dst_gun', 40.0)
          Set_R_sVar('$sgdst' + gun_num + '[21].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[22].$comment','60mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[22].$dst_gun', 60.0)
          Set_R_sVar('$sgdst' + gun_num + '[22].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[23].$comment','80mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[23].$dst_gun', 80.0)
          Set_R_sVar('$sgdst' + gun_num + '[23].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[24].$comment','100mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[24].$dst_gun', 100.0)
          Set_R_sVar('$sgdst' + gun_num + '[24].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[25].$comment','120mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[25].$dst_gun', 120.0)
          Set_R_sVar('$sgdst' + gun_num + '[25].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[26].$comment','140mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[26].$dst_gun', 140.0)
          Set_R_sVar('$sgdst' + gun_num + '[26].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[27].$comment','160mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[27].$dst_gun', 160.0)
          Set_R_sVar('$sgdst' + gun_num + '[27].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[28].$comment','180mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[28].$dst_gun', 180.0)
          Set_R_sVar('$sgdst' + gun_num + '[28].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[29].$comment','200mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[29].$dst_gun', 200.0)
          Set_R_sVar('$sgdst' + gun_num + '[29].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[30].$comment','220mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[30].$dst_gun', 220.0)
          Set_R_sVar('$sgdst' + gun_num + '[30].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[31].$comment','240mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[31].$dst_gun', 240.0)
          Set_R_sVar('$sgdst' + gun_num + '[31].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[32].$comment','260mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[32].$dst_gun', 260.0)
          Set_R_sVar('$sgdst' + gun_num + '[32].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[33].$comment','280mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[33].$dst_gun', 280.0)
          Set_R_sVar('$sgdst' + gun_num + '[33].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[34].$comment','300mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[34].$dst_gun', 300.0)
          Set_R_sVar('$sgdst' + gun_num + '[34].$dst_rbt', 10.0)
          Set_S_sVar('$sgdst' + gun_num + '[34].$comment','320mmGun')
          Set_R_sVar('$sgdst' + gun_num + '[34].$dst_gun', 320.0)
          Set_R_sVar('$sgdst' + gun_num + '[34].$dst_rbt', 10.0)

          -- Cap Changer
          Set_S_sVar('$sgdst' + gun_num + '[45].$comment','CChng 0mm_FullOp')
          Set_R_sVar('$sgdst' + gun_num + '[45].$dst_gun', 0.0)
          Set_R_sVar('$sgdst' + gun_num + '[45].$dst_rbt', 50.0) -- User to adjust to FULL OPEN

          -- Gun Open on Fault
          Set_I_sVar('$sgcfg[' + gun_num + '].$tryout_msk', 6) 

          -- Servo Gun Thickness Check
          Set_B_sVar('$sggun' + gun_num + '.$setup.$tc_enb', true) --thickness check enable
          Set_B_sVar('$sggun' + gun_num + '.$setup.$tc_alm', false) --thickness check mode ON RQST --default
          Set_B_sVar('$sggun' + gun_num + '.$setup.$tc_f2cmpr', false) --check at minimum pressure --default
          Set_I_sVar('$sggun' + gun_num + '.$setup.$tc_wstpdly', 0) --thickness check settling time delay --default
          Set_B_sVar('$sggun' + gun_num + '.$setup.$tc_sev', false) --thickness check alarm severity fault  WARN --default
          Set_R_sVar('$sggun' + gun_num + '.$setup.$tc_max_undr', 0.500) --thickness check under thickness limit (mm)  --default
          Set_R_sVar('$sggun' + gun_num + '.$setup.$tc_max_over', 0.500) --thickness check over thickness limit (mm)  --default
          Set_I_sVar('$sggun' + gun_num + '.$setup.$tc_almiotyp', 2) --thickness check output type DO --default
          Set_I_sVar('$sggun' + gun_num + '.$setup.$tc_almioidx',spotctrl[1].spot_gun[1].ispot16) --Thickness Out of Tolerance DO

          -- Pressue Schedules and Force Check  
          l_sched_idx = 1  
          FOR l_std_prs = 1 TO 16  DO
        
            l_weld_press = (default_prs[3, 1].std_prs_val[l_std_prs].press_val * N_TO_KGF)
  
            IF (l_weld_press <= 5000) THEN
              l_sec_sched = FALSE

              FOR l_sched = l_sched_idx TO (l_sched_idx + 1) DO
                sched_num = int_to_strg(l_sched)

                IF l_sec_sched THEN          
                ELSE
                  Set_S_sVar('$sgsch' + gun_num + '[' + sched_num +'].$comment',default_prs[3, 1].std_prs_val[l_std_prs].comment1)
                ENDIF

                l_weld_press = (default_prs[3, 1].std_prs_val[l_std_prs].press_val * N_TO_KGF)
                Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$weld_press', l_weld_press)

                IF l_sec_sched THEN
                ELSE
                  Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$Thickness',default_prs[3, 1].std_prs_val[l_std_prs].thick_min)
                ENDIF

	        --V8.33P10 schoensm 9-28-2020 changed pushing depth on pressure scedules to 16mm for X Guns, 6mm ELSE.
	        IF (spotapp_eq[swgequip].spotgun[l_gun].sg_guntyp = 2) THEN
	          pshdep_float = 16.0  -- X-Gun
                  pshdep_mem = pshdep_float
                  Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$push_depth',pshdep_float)
	        ELSE
	          pshdep_float = 6.0	 -- C-Gun and everything else
                  Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$push_depth',default_prs[3, 1].std_prs_val[l_std_prs].push_depth)
	        ENDIF
  
                Set_B_sVar('$sgsch' + gun_num + '[' + sched_num +'].$use_manual', TRUE)
              ENDFOR

              l_sched_idx = l_sched_idx + 1
            ELSE -- GeT OUT
              l_std_prs = default_prs[3,1].tot_num_pres + 1
            ENDIF

            -- Reset Extra ONE to Zero
            Set_S_sVar('$sgsch' + gun_num + '[' + sched_num +'].$comment', '')
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$weld_press', 0.0)
            Set_B_sVar('$sgsch' + gun_num + '[' + sched_num +'].$use_manual', FALSE) 
          ENDFOR
  
          -- Force check approach 
          l_prs_idx = 1
          FOR l_i = 75 to 90 DO
            sched_num = int_to_strg(l_i)
            Set_S_sVar('$sgsch' + gun_num + '[' + sched_num +'].$comment', 'Force Chk')

            -- Weld pressure Kgf
            l_weld_press = (default_prs[3, 1].std_prs_val[l_prs_idx].press_val * N_TO_KGF)
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$weld_press', l_weld_press)
            l_prs_idx = l_prs_idx + 1

            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$weld_press', 0)               
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$thickness', 13.0) -- Part Thickness       
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$push_depth', 8.0)  -- Pushing Depth (DEFAULT)
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$gunsagval', 0.0)  -- Gun Sag Comp value
      
            -- Schedule def.      
            Set_B_sVar('$sgsch' + gun_num + '[' + sched_num +'].$soft_touch', TRUE)  -- Approach Position      
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sftch_ta', 10.0)  -- Approach Position (gun)      
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sftch_tb', 10.0) -- Approach Position (Robot)       
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sync_ta', 2.0)  -- Pressure Start Position (gun)      
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sync_tb', 0.0)  -- Pressure Start Position (robot)       
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sync_term', 50)  -- Pressure start Position term type      
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sync_acc', 100)  -- Pressure start Position Acc      
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$decel_rate', 20.0)  -- Pressure position deceleration rate      
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$prscls_term', 0)  -- Pressure position term type      
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$prscls_acc', 100)  -- Pressure position ACC      
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sftopn_ta', 5.0)  -- Pressure end position (gun)      
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sftopn_tb', 15.0)  -- Pressure end position (robot)      
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sftopn_term', 50)  -- Pressure end term type      
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$sftopn_acc', 100)  -- Pressure end ACC      
            Set_B_sVar('$sgsch' + gun_num + '[' + sched_num +'].$gun_open', TRUE)  -- Open gun      
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$away_term', 100)  -- Open gun term type      
            Set_I_sVar('$sgsch' + gun_num + '[' + sched_num +'].$away_acc', 100)  -- Open gun ADD      
            Set_B_sVar('$sgsch' + gun_num + '[' + sched_num +'].$use_manual', TRUE)  -- Use manual
          ENDFOR

          FOR l_i = 93 to 93 DO  
            sched_num = int_to_strg(l_i)

            -- Resistance Check
            l_td_press = 2800.0 * N_TO_KGF
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$weld_press', l_td_press)        
          ENDFOR

          FOR l_i = 94 to 95 DO  
            sched_num = int_to_strg(l_i)

            -- Cap Changer Pressures 94/95
            l_td_press = 1600.0 * N_TO_KGF
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$weld_press', l_td_press) 
       
            -- Part Thickness and gun sag
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$thickness', 5.0)
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$gunsagval', 0.6)

            -- Pushing Depth (DEFAULT)
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$push_depth', 10.0)
          ENDFOR

          FOR l_i = 96 to 97 DO 
            sched_num = int_to_strg(l_i)

            -- Tip Dress Pressures 96/97
            l_td_press = 1600.0 * N_TO_KGF
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$weld_press', l_td_press)  
      
            -- Part Thickness
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$thickness', 10.5)

            -- Pushing Depth (DEFAULT)
            Set_R_sVar('$sgsch' + gun_num + '[' + sched_num +'].$push_depth', 6.0)
          ENDFOR

        ENDFOR  -- For 2 to numguns_set -- Total Number of Guns to be setup

      ENDIF --correct amount of guns installed on group 2
    ENDIF  --couldn't read how many guns installed on group 2

  gun_end::

END setup_guns
-----------------------------------------------------------------------------
ROUTINE load_prgs
-- PURPOSE: Load gun TP programs
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (swgtcnumguns >= 2) THEN  --setup gun 2

    IF (cap_chnger = wizans_yes) THEN --cap changer
      Load_File('frs:', 'dcd_capchng2.tp',0)
      Load_File('frs:', 'tdfrcapchng2.tp',0)
      Load_File('frs:', 'tdtocapchng2.tp',0)
      Load_File('frs:', 'cc_proc2.tp',1)
      Load_File('frs:', 'cc_frtd2.tp',1)
      IF ((cap_chngtype = cap_rbtmov) OR (cap_chngtype = cap_rbtstatn)) THEN --pneumatic setup, robot moving or robot stationary
        Load_File('frs:', 'capchngr2.tp',0)
        Load_File('frs:', 'autocapchngr2.tp',0)
      ENDIF --pneumatic setup,robot moving or robot stationary
      IF (cap_chngtype = cap_srvcombo) THEN --servo cap changer / dresser used
        Load_File('FRS:','combocapchgr2.tp',0)
      ENDIF --servo cap changer /dresser used
    ENDIF --cap changer

    IF (num_tipdrs <> 0) THEN  --tip dresser
      Load_File('frs:', 'tipdress2.tp', 0)
      Load_File('frs:', 'homefrtd2.tp', 0)
      Load_File('frs:', 'hometotd2.tp', 0)
      SPRUNCfile('FRS:TC_TDPR2.TP','FR:\TD_PROC2.TP')
      prog_nam = 'td_proc2'
      set_attr_prg ( prog_nam , AT_DEF_GROUP , 3 , prog_nam, gm_status)
      Load_File('FR:','TD_PROC2.TP',0)
      Load_File('frs:', 'reschke2.tp', 1)       
    ENDIF  --tip dresser

  ENDIF  -- gun 2

  IF (swgtcnumguns >= 3) THEN --setup gun 3

    IF (cap_chnger = wizans_yes) THEN --cap changer
      Load_File('frs:', 'dcd_capchng3.tp',0)
      Load_File('frs:', 'tdfrcapchng3.tp',0)
      Load_File('frs:', 'tdtocapchng3.tp',0)
      Load_File('frs:', 'cc_proc3.tp',1)
      Load_File('frs:', 'cc_frtd3.tp',1)
      IF ((cap_chngtype = cap_rbtmov) OR (cap_chngtype = cap_rbtstatn)) THEN --pneumatic setup, robot moving or robot stationary
        Load_File('frs:', 'capchngr3.tp',0)
        Load_File('frs:', 'autocapchngr3.tp',0)
      ENDIF --pneumatic setup,robot moving or robot stationary
      IF (cap_chngtype = cap_srvcombo) THEN --servo cap changer / dresser used
        Load_File('FRS:','combocapchgr3.tp',0)
      ENDIF --servo cap changer /dresser used
    ENDIF --cap changer

    IF (num_tipdrs <> 0) THEN  --tip dresser
      Load_File('frs:', 'tipdress3.tp', 0)
      Load_File('frs:', 'homefrtd3.tp', 0)
      Load_File('frs:', 'hometotd3.tp', 0)
      SPRUNCfile('FRS:TC_TDPR3.TP','FR:\TD_PROC3.TP') 
      prog_nam = 'td_proc3'
      set_attr_prg ( prog_nam , AT_DEF_GROUP , 3 , prog_nam, gm_status)
      Load_File('FR:','TD_PROC3.TP',0)
    ENDIF --tip dresser

  ENDIF  -- setup gun 3

  IF (swgtcnumguns >= 4) THEN --setup gun 4

    IF (cap_chnger = wizans_yes) THEN --cap changer
      Load_File('frs:', 'dcd_capchng4.tp',0)
      Load_File('frs:', 'tdfrcapchng4.tp',0)
      Load_File('frs:', 'tdtocapchng4.tp',0)
      Load_File('frs:', 'cc_proc4.tp',1)
      Load_File('frs:', 'cc_frtd4.tp',1)
      IF ((cap_chngtype = cap_rbtmov) OR (cap_chngtype = cap_rbtstatn)) THEN --pneumatic setup, robot moving or robot stationary
        Load_File('frs:', 'capchngr4.tp',0)
        Load_File('frs:', 'autocapchngr4.tp',0)
      ENDIF --pneumatic setup,robot moving or robot stationary
      IF (cap_chngtype = cap_srvcombo) THEN --servo cap changer / dresser used
        Load_File('FRS:','combocapchgr4.tp',0)
      ENDIF --servo cap changer /dresser used
    ENDIF --cap changer

    IF (num_tipdrs <> 0) THEN  --tip dresser
      Load_File('frs:', 'tipdress4.tp', 0)
      Load_File('frs:', 'homefrtd4.tp', 0)
      Load_File('frs:', 'hometotd4.tp', 0)
      SPRUNCfile('FRS:TC_TDPR4.TP','FR:\TD_PROC4.TP')
      prog_nam = 'td_proc4'
      set_attr_prg ( prog_nam , AT_DEF_GROUP , 3 , prog_nam, gm_status)
      Load_File('FR:','TD_PROC4.TP',0)
    ENDIF --tip dresser

  ENDIF  --setup gun 4

END load_prgs
-----------------------------------------------------------------------------
ROUTINE set_tipdrs
-- PURPOSE: Set tip dresser settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --turn off BG logic before running tip dress setup so TPs can load
  FOR x = 1 TO num_tipdrs DO 
    CNV_INT_STR(x, 1, 0, a)
    a = SUB_STR(a, 2, 3)
    Set_I_sVar('$MIX_BG[' + a + '].$STATUS', 1)
  ENDFOR

  SELECT num_tipdrs OF
           
    CASE(1):
      g_tipdress[1,1] = TRUE 
      td_pg_mc_1  --load tip dresser 1 programs

      IF (srvo_dress = wizans_yes) THEN  --servo dress
        Set_I_sVar('$sggun1.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun1.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
      ELSE --electric dress
        -- Set Mixed Logic or BG Logic Program
        Set_S_sVar('$MIX_BG[1].$PROG_NAME', 'TD_1_MTR')
        Set_I_sVar('$MIX_BG[1].$MODE', 2)
        Set_I_sVar('$MIX_BG[1].$STATUS', 2)
      ENDIF  --servo dress

    CASE(2):
      g_tipdress[1,1] = TRUE  
      g_tipdress[1,2] = TRUE 
      td_pg_mc_1  --load tip dresser 1 programs
      td_pg_mc_2  --load tip dresser 2 programs

      IF (srvo_dress = wizans_yes) THEN  --servo dress
        Set_I_sVar('$sggun1.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun1.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
        Set_I_sVar('$sggun2.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun2.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
      ELSE --electric dress
        -- Set Mixed Logic or BG Logic Program
        Set_S_sVar('$MIX_BG[1].$PROG_NAME', 'TD_1_MTR')
        Set_I_sVar('$MIX_BG[1].$MODE', 2)
        Set_I_sVar('$MIX_BG[1].$STATUS', 2)
        Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'TD_2_MTR')      
        Set_I_sVar('$MIX_BG[2].$MODE', 2)
        Set_I_sVar('$MIX_BG[2].$STATUS', 2)
      ENDIF  --servo dress

    CASE(3):
      g_tipdress[1,1] = TRUE
      g_tipdress[1,2] = TRUE 
      g_tipdress[2,1] = TRUE 
      td_pg_mc_1  --load tip dresser 1 programs
      td_pg_mc_2  --load tip dresser 2 programs
      td_pg_mc_3  --load tip dresser 3 programs

      IF (srvo_dress = wizans_yes) THEN  --servo dress
        Set_I_sVar('$sggun1.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun1.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
        Set_I_sVar('$sggun2.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun2.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
        Set_I_sVar('$sggun3.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun3.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
      ELSE --electric dress
        -- Set Mixed Logic or BG Logic Program
        Set_S_sVar('$MIX_BG[1].$PROG_NAME', 'TD_1_MTR')
        Set_I_sVar('$MIX_BG[1].$MODE', 2)
        Set_I_sVar('$MIX_BG[1].$STATUS', 2)
        Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'TD_2_MTR')      
        Set_I_sVar('$MIX_BG[2].$MODE', 2)
        Set_I_sVar('$MIX_BG[2].$STATUS', 2)
        Set_S_sVar('$MIX_BG[3].$PROG_NAME', 'TD_3_MTR')
        Set_I_sVar('$MIX_BG[3].$MODE', 2)
        Set_I_sVar('$MIX_BG[3].$STATUS', 2)
      ENDIF  --servo dress

    CASE(4):
      g_tipdress[1,1] = TRUE 
      g_tipdress[1,2] = TRUE 
      g_tipdress[2,1] = TRUE 
      g_tipdress[2,2] = TRUE
      td_pg_mc_1  --load tip dresser 1 programs
      td_pg_mc_2  --load tip dresser 2 programs
      td_pg_mc_3  --load tip dresser 3 programs
      td_pg_mc_4  --load tip dresser 4 programs

      IF (srvo_dress = wizans_yes) THEN
        Set_I_sVar('$sggun1.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun1.$setup.$dress_sev',FALSE) --severity for $max_dress gun # 
        Set_I_sVar('$sggun2.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun2.$setup.$dress_sev',FALSE) --severity for $max_dress gun # 
        Set_I_sVar('$sggun3.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun3.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
        Set_I_sVar('$sggun4.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
        Set_B_sVar('$sggun4.$setup.$dress_sev',FALSE) --severity for $max_dress gun #
      ELSE --electric tip dress
        -- Set Mixed Logic or BG Logic Program
        Set_S_sVar('$MIX_BG[1].$PROG_NAME', 'TD_1_MTR')
        Set_I_sVar('$MIX_BG[1].$MODE', 2)
        Set_I_sVar('$MIX_BG[1].$STATUS', 2)
        Set_S_sVar('$MIX_BG[2].$PROG_NAME', 'TD_2_MTR')      
        Set_I_sVar('$MIX_BG[2].$MODE', 2)
        Set_I_sVar('$MIX_BG[2].$STATUS', 2)
        Set_S_sVar('$MIX_BG[3].$PROG_NAME', 'TD_3_MTR')
        Set_I_sVar('$MIX_BG[3].$MODE', 2)
        Set_I_sVar('$MIX_BG[3].$STATUS', 2)
        Set_S_sVar('$MIX_BG[4].$PROG_NAME', 'TD_4_MTR')
        Set_I_sVar('$MIX_BG[4].$MODE', 2)
        Set_I_sVar('$MIX_BG[4].$STATUS', 2)
      ENDIF  --servo dress
  
    ELSE:
  ENDSELECT

END set_tipdrs
-----------------------------------------------------------------------------
ROUTINE srvo_gun_td
-- PURPOSE: Map servo tip dressers to servo guns
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  FOR l_gun = 1 TO swgtcnumguns DO
    gun_num = int_to_strg(l_gun)
    Set_I_sVar('$sggun' + gun_num + '.$setup.$dress_num',swgsrvotdasg[l_gun])
  ENDFOR 

END srvo_gun_td
-----------------------------------------------------------------------------
ROUTINE set_gunchng
-- PURPOSE: setup gun change application
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN

  Current_Ver = Version -- Set the version for reference

  spot_posreg --setup position registers, need axis installed for this to work

  IF (swgtcnumguns > 1) THEN --setup guns 2 - 4
    load_prgs  --load and setup programs
    swg_reg --setup registers
    setup_guns  --setup gun settings and schedules and pressures
  ENDIF

  IF (num_tipdrs > 0) THEN --setup tipdressers
    srvotc_reg --setup servo tip dresser register
    tipdress_io --setup servo tip dresser I/O
 
    IF (srvo_dress = wizans_yes) THEN
      srvo_td --setup servo tip dress settings
      srvo_gun_td --map servo tip dresser 
    ENDIF

    set_tipdrs  --setup tip dresser settings
  ENDIF

  srvo_dress = 0 --reset so it doesn't mess up wizard reruns
  num_tipdrs = 0 --reset so it doesn't mess up wizard reruns

END set_gunchng
-----------------------------------------------------------------------------
BEGIN
       
END GMSWGTC












