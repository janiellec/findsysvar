-- -----------------------------------------------------------------------
--
--   MODULE:         GMARCTL.KL
--   TITLE:          GMARCTL PROGRAM
--
--
--   WRITTEN BY:     Fanuc
--   REVISION DATE:  2016/10/08
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: GM Global 4 ArcTool specific setup
--                      
--                      
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--             V4.1   28OCT2020  schoensm         Added Mig Weld during V8.33P10
--
--
--
--
--------------------------------------------------------------------------
PROGRAM gmarctl

%COMMENT = 'GM ArcTl V4.1'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

%INCLUDE gmcfgerr -- GM wizard error logging
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgvis  -- GM vision variables


CONST

  Version = '2020-10-28'
  %INCLUDE gmcnstnt -- all GM constants for the wizard

VAR
  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  ArcTl_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup arc tool at least first time

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables

ROUTINE set_arc_var FROM gmarcvr
ROUTINE set_arc_io FROM gmarcio
ROUTINE set_arc_pg FROM gmarcpg
ROUTINE set_arc_reg FROM gmarcrg
ROUTINE set_lsr_cfg FROM gmlasr
ROUTINE set_mig_cfg FROM gmmig
-----------------------------------------------------------------------------
ROUTINE init_arc_set
-- PURPOSE: to initialize variables for arc tool setup 
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN



END init_arc_set
-----------------------------------------------------------------------------
ROUTINE set_arc_shop
-- PURPOSE: set arc and laser applications
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --ArcTool General Setup
  IF (chk_loaded('gmarcvr')) THEN
    set_arc_var  --arc tool variables
  ELSE
    ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1 
  ENDIF
  IF (chk_loaded('gmarcio')) THEN
    set_arc_io  --arc tool I/O
  ELSE
    ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1 
  ENDIF
  IF (chk_loaded('gmarcpg')) THEN
    set_arc_pg  --arc tool programs
  ELSE
    ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1 
  ENDIF
  IF (chk_loaded('gmarcrg')) THEN
    set_arc_reg  --arc tool registers
  ELSE
    ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1 
  ENDIF

  --Vision applicaiton setup
  IF Use_Vision THEN   -- If user configured vision stuff
    IF NOT (CallThisProg('gmvisvar')) THEN  ErrsInShop.ErrorsVarbls = ErrsInShop.ErrorsVarbls+1; ENDIF --sets Vision variables
    IF NOT (CallThisProg('gmvisnio')) THEN  ErrsInShop.ErrorsIOCom  = ErrsInShop.ErrorsIOCom +1; ENDIF --sets Vision I/O
    IF NOT (CallThisProg('gmvisprg')) THEN  ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1; ENDIF --sets Vision programs
    IF NOT (CallThisProg('gmvisreg')) THEN  ErrsInShop.ErrorsRgstrs = ErrsInShop.ErrorsRgstrs+1; ENDIF --sets Vision registers
  ENDIF

END set_arc_shop
-----------------------------------------------------------------------------
ROUTINE set_arc_cfg
-- PURPOSE: set arc tool robot
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsRgstrs) THEN
    ErrsInShop.ErrorsRgstrs = 0
  ENDIF
  IF UNINIT(ArcTl_Setup) OR (Reset_Cell) THEN
    ArcTl_Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsRgstrs -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('  Starting the Arc Program GMARCTL', FALSE)

  IF (ArcTl_Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  Arc Tool Already Setup', FALSE)
    IF ExecSetupAgn('Arc Tool') THEN -- ask user if they want to setup again
      ArcTl_Setup = FALSE
    ELSE
      WriteLog('  Arc Tool already Complete', FALSE)
      WriteLog('  GMARCTL Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  --setup routines
  init_arc_set
  set_arc_shop
  set_lsr_cfg  --call laser program for laser configs
  set_mig_cfg

  ErrsInShop.ErrorsRgstrs =  ErrsInShop.ErrorsRgstrs + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsRgstrs -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('  Arc Tool Setup GMARCTL had ' + int2str((ErrsInShop.ErrorsRgstrs- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('  Arc Tool Setup completed', FALSE)
    ArcTl_Setup = TRUE
  ENDIF

 WriteLog('', FALSE)

END set_arc_cfg
-----------------------------------------------------------------------------
BEGIN

END gmarctl
