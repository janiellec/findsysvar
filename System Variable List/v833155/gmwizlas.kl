-- -----------------------------------------------------------------------
--
--   MODULE:         GMWIZLAS.KL
--   TITLE:          GMWIZLAS PROGRAM
--
--
--   WRITTEN BY:     Fanuc
--   REVISION DATE:  2016/10/08
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: GM Global 4 Laser Wizard
--                      
--                      
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--             v4.1   2018/03/06 marchaka         Modified wizard questions
--             v4.2   2019/09/12 marchaka         Do not ask Precitec monitoring or wire feed question if RSI Software option is installed.
--              
--
--
--
--
--------------------------------------------------------------------------
PROGRAM gmwizlas

%COMMENT = 'GM Laser Wiz V4.2'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

%INCLUDE gmevrlng -- GM wizard language variables
%INCLUDE gmevralg -- GM arc wizard language variables

%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfglas  -- GM laser wizard variables


CONST

  Version = '2019-09-12'
  %INCLUDE gmcnstnt -- all GM constants for the wizard
  %INCLUDE gmacnstn -- all GM ArcTool constants for the ArcTool wizard

VAR

  gm_status:  INTEGER
  rsi_optn		IN SHADOW FROM GMATVAR: BOOLEAN  --J802 RSI Interface software option


%INCLUDE klrdutil -- Needed for the CLR_STND_SCR routine
%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables

-----------------------------------------------------------------------------
ROUTINE init_las_wiz
-- PURPOSE: to initialize variables for laser wizard
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN



END init_las_wiz
-----------------------------------------------------------------------------
ROUTINE laser_wiz
-- PURPOSE: run laser wizard
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
ans_lsrhd:  INTEGER
ans_prcm:  INTEGER

BEGIN

  --setup routines
  init_las_wiz

  --laser wizard questions
  REPEAT
    CLR_STND_SCR(gm_status)
    WRITE(CR,laspr_gmdata,'?',CR)     --Is this a laser process?
    WRITE ('1.', yes_gmdata,CR)
    WRITE ('2.', no_gmdata,CR)
    WRITE (gdata_ans,'(1-2):') 
    READ (laser_app)
  UNTIL(Verify_Answr(laser_app,1,2))

  IF (laser_app = wizans_yes) THEN -- robot has a laser application
    REPEAT
      CLR_STND_SCR(gm_status)
      WRITE(CR,lasty_gmdata,'?',CR)     --What type of Laser?
      WRITE('1. ',lasln_gmdata,CR)      --Laser Line
      WRITE('2. ',trmp_gmdata,CR)       --Trumpf
      WRITE (gdata_ans,'(1-2):')
      READ(laser_ctrl)
    UNTIL(Verify_Answr(laser_ctrl,1,2))

    SELECT laser_ctrl OF  --selections that are based on laser controller type  --head and process monitor
      CASE(lasctrl_lsln):  --laserline

        --select head
        REPEAT
          CLR_STND_SCR(gm_status)
          WRITE (CR,lashd_gmdata,'?',CR)  --What type of head is used
          WRITE ('1. ',sonic_gmdata,CR)   --ScanSonic AL03
          WRITE (gdata_ans,'(1-1):')
          READ(ans_lsrhd)
        UNTIL(Verify_Answr(ans_lsrhd,1,1)) 
        SELECT ans_lsrhd OF --set laser head variable based on constant
          CASE(1): --ScanSonic AL03
            laser_head = lashd_scsn 
          ELSE:  --no other heads supported right now, default to ScanSonic AL03
            laser_head = lashd_scsn
         ENDSELECT

        --select process monitor
        REPEAT
          CLR_STND_SCR(gm_status)
          WRITE (CR,pmon_gmdata,'?',CR)  --Is process monitor used
          WRITE ('1. ',nonegmdata,CR)     --None
          WRITE ('2. ',lesm_gmdata,CR)   --Lesmuller
          WRITE (gdata_ans,'(1-2):') 
          READ (ans_prcm)
        UNTIL(Verify_Answr(ans_prcm,1,2))
        SELECT ans_prcm OF --set process monitor variable based on constant
          CASE(1): --no process monitor
            procmontype = procm_none
          CASE(2):  --lesmuller
            procmontype = procm_lesm
          ELSE:
            procmontype = procm_none --default to none
        ENDSELECT  

      CASE(lasctrl_trmp):  --trumpf
        REPEAT
          CLR_STND_SCR(gm_status)
          WRITE (CR,lashd_gmdata,'?',CR)  --What type of head is used
          WRITE ('1. ',ipfo_gmdata,CR)   --ipfo head 
          WRITE (gdata_ans,'(1-1):')
          READ(ans_lsrhd)
        UNTIL(Verify_Answr(ans_lsrhd,1,1)) 
        SELECT ans_lsrhd OF --set laser head variable based on constant
          CASE(1): --ipfo
            laser_head = lashd_ipfo
          ELSE:  --no other heads supported right now, default to ipfo
            laser_head = lashd_ipfo
         ENDSELECT 

        --select process monitor
        IF (rsi_optn = FALSE) THEN --process monitor will not be used if RSI is installed
          REPEAT
            CLR_STND_SCR(gm_status)
            WRITE (CR,pmon_gmdata,'?',CR)  --Is process monitor used
            WRITE ('1. ',nonegmdata,CR)     --None
            WRITE ('2. ',prclwm_gmdta,CR)   --precitec LWM
            WRITE (gdata_ans,'(1-2):') 
            READ (ans_prcm)
          UNTIL(Verify_Answr(ans_prcm,1,2))
          SELECT ans_prcm OF --set process monitor variable based on constant
            CASE(1): --no process monitor
              procmontype = procm_none
            CASE(2):  --precitec lwm
              procmontype = procm_plwm
            ELSE:
              procmontype = procm_none --default to none
          ENDSELECT 
        ELSE --set process monitor to none
          procmontype = procm_none --default to none
        ENDIF --RSI Interface
    
      ELSE:
    ENDSELECT  --selections that are based on laser controller type  --head and process monitor

    IF (rsi_optn = FALSE) THEN --no wire for RSI application

      REPEAT
        CLR_STND_SCR(gm_status)
        WRITE (CR,lproc_gmdata,CR)  --Does the laser process
        WRITE (lwire_gmdata,'?',CR)  --use wire
        WRITE ('1.', yes_gmdata,CR)
        WRITE ('2.', no_gmdata,CR)
        WRITE (gdata_ans,'(1-2):') 
        READ (laser_wire)
      UNTIL(Verify_Answr(laser_wire,1,2))

    ELSE

      laser_wire = wizans_no --default to NO for RSI application

    ENDIF --RSI application

    IF (laser_wire = wizans_yes) THEN --process uses a wire
      REPEAT
        CLR_STND_SCR(gm_status)
        WRITE (CR,lload_gmdata,CR)   --Do you want to load
        WRITE (bzprm_gmdata,'?',CR)  --GM default laser braze parameters
        WRITE ('1.', yes_gmdata,CR)
        WRITE ('2.', no_gmdata,CR)
        WRITE (gdata_ans,'(1-2):') 
        READ (braze_param)
      UNTIL(Verify_Answr(braze_param,1,2))

      REPEAT
        CLR_STND_SCR(gm_status)
        WRITE (CR,lload_gmdata,CR)  --Do you want to load
        WRITE (dmon_gmdata,CR)      --GM default data monitor file
        WRITE (flbz_gmdata,'?',CR)  --for laser braze
        WRITE ('1.', yes_gmdata,CR)
        WRITE ('2.', no_gmdata,CR)
        WRITE (gdata_ans,'(1-2):') 
        READ (datamon_file)
      UNTIL(Verify_Answr(datamon_file,1,2))

    ENDIF --process uses a wire

    REPEAT
      CLR_STND_SCR(gm_status)
      WRITE (CR,'What type of Gas box?',CR)  --What type of gas box
      WRITE ('1. ',gmstd_gmdata,CR)           --GM standard
      WRITE ('2. ',nonegmdata,CR)            --None
      WRITE (gdata_ans,'(1-2):') 
      READ (gasboxtype)
    UNTIL(Verify_Answr(gasboxtype,1,2))

  ENDIF --laser application

END laser_wiz
-----------------------------------------------------------------------------
BEGIN

END gmwizlas
