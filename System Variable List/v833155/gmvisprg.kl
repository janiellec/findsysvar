-- -----------------------------------------------------------------------
--
--   MODULE:         GMVISPRG.KL
--   TITLE:          GMVISPRG PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Vision Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZMH,GMWIZVIS are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--                    8-4-16     R.Kosaski         Changed for Press per Lloyd Steed
--         2016/09/01 marchaka Replaced define_macro with Setup_Macro from gmutility.
--                             define_macro sometimes doesn't work in FRVRC.
--         2017/01/27 marchaka Add new vision programs for iRVision.  Remove obsolete iRVis
--                             programs.
--             V4.1   2017/02/06 marchaka         Added gmvzdata.  Added other vision files.
--                                                Removed tm_vis_3dl, tm_partfind, tm_slotfind
--             V4.1   2017/02/09 marchaka         Removed tm_down_count, tm_upcount, tm_vlogic2
--             V4.1   2017/02/13 marchaka         Removed $dev_path setting.  Handled in gmmain1.
--             V4.1   2017/03/12 marchaka         Modifications to support ArcTool wizard.  Remove
--                                                tm_vis_drop1.tp, tm_vis_dropr1.tp, tm_vis_style1.tp,
--                                                tm_vlogic1.tp
--             V4.1   2017/03/17 marchaka         Remove templa25.tp adn templa26.tp
--             V4.2   2018/02/23 marchaka         If ArcTool load bodyshop vision programs.
--             V4.3   2018/04/04 schoensm					V8.33P05 update
--                    2018/06/26 baker            cleaned up LPT_avail logic 
--                    2018/07/06 baker            changed BGYVIS to PRSVIS
--             V4.4   2019/09/11 schoensm         Added forcemsgtp.tp V8.33P08
--------------------------------------------------------------------------
PROGRAM GMVISPRG

%COMMENT = 'GM Vision V4.4'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

CONST
Version = '2019-09-11'
%INCLUDE gmcnstnt -- used for all of the constants for GM wizard

VAR

Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started

  VisnPrgsDone IN SHADOW : BOOLEAN -- if the programs has ran completly

 gm_status :INTEGER
 arc_optn      IN SHADOW FROM GMVARS :BOOLEAN  --ArcTool or LR ArcTool loaded
 LPT_avail IN SHADOW FROM GMPRESS : BOOLEAN

-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

%INCLUDE gmcfgvis  -- GM wizard variables for Vision Applications


ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
ROUTINE arc_loaded FROM gmmain1 --ArcTool option
%INCLUDE gmrdutil -- has all GM common wizard routine in it

-----------------------------------------------------------------------------
ROUTINE init_BSVPRG
-- PURPOSE: Load vision Programs that are unique to Body Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
       writeLog('  Loading Vision Programs for Body Shop', FALSE)

 -- Bodyshop Only

  Load_File('FRS:','USERRTM.PC',1)
  Load_File('FRS:','IR_OPTN1.PC',1)
  Load_File('FRS:','IR_OPTN2.PC',1)
  Load_File('FRS:','IR_OPTN3.PC',1)

--check this  Load_File('FRS:','IR_MATH.PC',1)

  Load_File('FRS:','average.pc',1) 
  Load_File('FRS:','IRMATH750.PC',1) -- LOADS AS IRMATH
  Load_File('FRS:','IRHELP750.PC',1) -- LOADS AS IRMATH

  Load_File('FRS:','tm_cal_2d.tp',1)
  Load_File('FRS:','tm_vis_tcp7.tp',1)
  Load_File('FRS:','tm_vis_tcp8.tp',1)

  Load_File('FRS:','MENU202.VR',1)
  Load_File('FRS:','MENU203.VR',1)
  Load_File('FRS:','MENU302.VR',1)
  Load_File('FRS:','MENU303.VR',1)

  writeLog('  Body Shop Vision Programs loaded', FALSE)

END init_BSVPRG
-----------------------------------------------------------------------------
ROUTINE init_PrsVPRG
-- PURPOSE: Load vision Programs that are unique to Press Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

writeLog('  Loading Vision Programs for Press Shop', FALSE)

  Load_File('FRS:','USERRTM.PC',1)
  Load_File('FRS:','IR_OPTN1.PC',1)
  Load_File('FRS:','IR_OPTN2.PC',1)
  Load_File('FRS:','IR_OPTN3.PC',1)

  Load_File('FRS:','average.pc',1) 
  Load_File('FRS:','IRMATH750.PC',1)
  Load_File('FRS:','IRHELP750.PC',1)

  KCL ('MkDir FR:\PRSVIS', gm_status)
    IF (gm_status<>0) AND (gm_status<> 2039) THEN --FILE-039 Directory already Exists
      POST_ERR(38000, 'KCL Failed MD FR:\PRSVIS', gm_status, 0) --
    ELSE
       POST_ERR(38000,'Created directory FR:\PRSVIS', 0, 0)-- used for reference
      writeLog('  Press Vision copying to FR:\PRSVIS folder', FALSE)
      CopyFile('FRS:\tm_cal_2d.tp','FR:\PRSVIS\tm_cal_2d.tp')
      CopyFile('FRS:\tm_vis_tcp7.tp','FR:\PRSVIS\tm_vis_tcp7.tp')
      CopyFile('FRS:\tm_vis_tcp8.tp','FR:\PRSVIS\tm_vis_tcp8.tp')
      writeLog('  Copied Press Vision to FR:\PRSVIS folder', FALSE)
    ENDIF

  Load_File('FRS:','MENU202.VR',1)
  Load_File('FRS:','MENU203.VR',1)
--  Load_File('FRS:','MENU102.VR',1)
--  Load_File('FRS:','MENU103.VR',1)
  Load_File('FRS:','MENU302.VR',1)
  Load_File('FRS:','MENU303.VR',1)

IF fanuciR = TRUE THEN
  Load_File('FRS:','irunfind.pc',1)
  Load_File('FRS:','iroffset.pc',1)

--  Load_File('FRS:','VI_INIT.TP',1)
  Setup_Macro(57, 'INITIALIZ VISION'      ,   'VI_INIT', 1, 0,FALSE)

--  Load_File('FRS:','VI_REQ1.TP',1)
  Setup_Macro(58, 'REQ VISION CONT1'      ,   'VI_REQ1', 1, 0,FALSE)

--  Load_File('FRS:','VI_REQ4.TP',1)
  Setup_Macro(61, 'REQ VISION CONT4'      ,   'VI_REQ4', 1, 0,FALSE)

--  Load_File('FRS:','VI_PKOFF.TP',1)
  Setup_Macro(62, 'GET V PICK OFFST'       ,  'VI_PKOFF', 1, 0,FALSE)

--  Load_File('FRS:','VI_DROFF.TP',1)
  Setup_Macro(63, 'GET V DROP OFFST'  ,  'VI_DROFF', 1, 0,FALSE)

  --Load_File('FRS:','VECAMEAS.TP',1)
  --Setup_Macro(64, 'MEASURE CAM CALB' ,  'VECAMEAS', 1, 0,FALSE)

  --Load_File('FRS:','VECAMCHK.TP',1)
  --Setup_Macro(65, 'CHECK CAMERA'  ,  'VECAMCHK', 1, 0,FALSE)

  --Load_File('FRS:','VECAMCAL.TP',1)
  --Setup_Macro(66, 'CALIBRATE CAMERA' ,  'VECAMCAL', 1, 0,FALSE)

--  Load_File('FRS:','FLT_VISN.TP',1)
  Setup_Macro(96, 'VISION FAULT'     ,   'FLT_VISN', 1, 0,FALSE)

  Load_File('FRS:','VICAL_RN.TP',1)

-- Ipendant Features
--  Load_File('FRS:','VI_LIVE1.TP',1)
  Setup_Macro(21, 'IR VIS LIVE CAM1'       ,  'VI_LIVE1', 4, 21,FALSE)
--  Load_File('FRS:','VI_LIVE2.TP',1)
  Setup_Macro(22, 'IR VIS LIVE CAM2'       ,  'VI_LIVE2', 4, 22,FALSE)
--  Load_File('FRS:','VI_LIVE3.TP',1)
  Setup_Macro(23, 'IR VIS LIVE CAM3'       ,  'VI_LIVE3', 4, 23,FALSE)
--  Load_File('FRS:','VI_LIVE4.TP',1)
  Setup_Macro(24, 'IR VIS LIVE CAM4'       ,  'VI_LIVE4', 4, 24,FALSE)
  Load_File('FRS:','VI_LIVE1.TP',1)

ENDIF

 writeLog('Press Shop Vision Programs loaded', FALSE)

END init_PrsVPRG
-----------------------------------------------------------------------------
ROUTINE init_PwrVPRG
-- PURPOSE: Load vision Programs that are unique to Powertrain Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
       writeLog('Loading Vision Programs for Powertrain', FALSE)

       writeLog('Powertrain Vision Programs loaded', FALSE)

END init_PwrVPRG
-----------------------------------------------------------------------------
ROUTINE init_PntVPRG
-- PURPOSE: Load vision Programs that are unique to Paint Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
       writeLog('  Loading Vision Programs for Paint Shop', FALSE)

       writeLog('  Paint Shop Vision Programs loaded', FALSE)

END init_PntVPRG
-----------------------------------------------------------------------------
ROUTINE irvis_prog
-- PURPOSE: Load iRVision programs
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

  writeLog('  Loading Vision Programs for iRVision', FALSE)


  --Karel programs
  Load_File('FRS:','static82.pc',1)
  Load_File('FRS:','gmvzdata.pc',1) 
  Load_File('FRS:','setdata.pc',1)

  --TP programs
  Load_File('FRS:','statistics.tp',1)

  IF UNINIT(LPT_avail) THEN
   LPT_avail = FALSE
  ENDIF

 IF (NOT LPT_avail) THEN  
  Load_File('FRS:','SET_3D_SEN1.tp',1)
  Load_File('FRS:','SET_3D_SEN2.tp',1)
  SPRUNCMD ('COPY FRS:TMCHK_3DSEN1.TP FR:\TM_CHK_3D_SEN1.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy TM_CHK_3D_SEN1.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','TM_CHK_3D_SEN1.TP',1)
  SPRUNCMD ('COPY FRS:TMCHK_3DSEN2.TP FR:\TM_CHK_3D_SEN2.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy TM_CHK_3D_SEN2.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','TM_CHK_3D_SEN2.TP',1)
  SPRUNCMD ('COPY FRS:TMSTATICTEST.TP FR:\TM_STATIC_TEST.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy TM_STATIC_TEST.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','TM_STATIC_TEST.TP',1)
  
  SPRUNCMD ('COPY FRS:TMVIS_RACKP.TP FR:\TMVIS_RACKPICK.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy TMVIS_RACKPICK.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','TMVIS_RACKPICK.TP',1) 


  Load_File('FRS:','TMVIS_SRCH.tp',1)
  Load_File('FRS:','TMVIS_STRAT1.tp',1)
  Load_File('FRS:','TMVIS_STRAT2.tp',1)
  Load_File('FRS:','TMVIS_STRAT3.tp',1)
  Load_File('FRS:','TMVIS_STRAT4.tp',1)
  Load_File('FRS:','TMVIS_STRAT5.tp',1)
  
  SPRUNCMD ('COPY FRS:TMVIS_NRACKP.TP FR:\TMVIS_NONRACK_PICK.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy TMVIS_NONRACK_PICK.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','TMVIS_NONRACK_PICK.TP',1)
  SPRUNCMD ('COPY FRS:TMVISSETRACK.TP FR:\TMVIS_SET_RACK.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy TMVIS_SET_RACK.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','TMVIS_SET_RACK.TP',1)
  SPRUNCMD ('COPY FRS:TMVIS_SETMEM.TP FR:\TMVIS_SETMEMORY.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy TMVIS_SETMEMORY.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','TMVIS_SETMEMORY.TP',1)
  Load_File('FRS:','TMVIS_STYLE2.tp',1)
 ENDIF

  Load_File('FRS:','CHKOFFST.tp',1)
  Load_File('FRS:','REF_VIS_DATA.tp',1)
  Load_File('FRS:','VIS_REV_OFFST.tp',1)
  Load_File('FRS:','CLEAR_REGS.tp',1)  
  SPRUNCMD ('COPY FRS:FEATURE_SRCH.TP FR:\FEATURE_SEARCH.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy FEATURE_SEARCH.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','FEATURE_SEARCH.TP',1)

  SPRUNCMD ('COPY FRS:VISRJCTTOHOM.TP FR:\VIS_RJCTXXTOHOM.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy VIS_RJCTXXTOHOM.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','VIS_RJCTXXTOHOM.TP',1)
  SPRUNCMD ('COPY FRS:VISPROCTOHOM.TP FR:\VISPROCXXTOHOM.TP', gm_status) 
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy VISPROCXXTOHOM.TP to FR', 0,0)
    ENDIF
  Load_File('FR:','VISPROCXXTOHOM.TP',1)


  --VD files
  SPRUNCMD('COPY FRS:camera1.vd MD:camera1.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy camera1.vd to MD', 0, 0)
    ENDIF 
  SPRUNCMD('COPY FRS:camera2.vd MD:camera2.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy camera2.vd to MD', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRS:sensor1.vd MD:sensor1.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy sensor1.vd to MD', 0, 0)
    ENDIF  
  SPRUNCMD('COPY FRS:sensor2.vd MD:sensor2.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy sensor2.vd to MD', 0, 0)
    ENDIF 
  SPRUNCMD('COPY FRS:chk_sen1.vd MD:chk_sen1.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy chk_sen1.vd to MD', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRS:chk_sen2.vd MD:chk_sen2.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy chk_sen2.vd to MD', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRS:mvs1i1s1i2.vd MD:mv_sen1_img1_sen1_img2_3dl.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy mv_s1_i1_s1_i2_3dl.vd to MD', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRS:mvs1i1s2i2.vd MD:mv_sen1_img1_sen2_img2_3dl.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy mv_s1_i1_s2_i2_3dl.vd to MD', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRS:sv_sen1_3dl.vd MD:sv_sensor1_3dl.vd', gm_status)   
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy sv_sensor1_3dl.vd to MD', 0, 0)
    ENDIF


  writeLog('iRVision Programs loaded', FALSE)

END irvis_prog
-----------------------------------------------------------------------------
ROUTINE gen_vis_prog
-- PURPOSE: Load  programs for non irvision apps
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

  writeLog('  Loading Vision Programs for non-iRVision', FALSE)

  Load_File('FRS:','dcd_drop.tp',1)
  Load_File('FRS:','sxxdrop1.tp',1)
  Load_File('FRS:','sxxdrop2.tp',1)
  Load_File('FRS:','sxxdrop3.tp',1)
  Load_File('FRS:','sxxpick1.tp',1)
  Load_File('FRS:','forcemsgtp.tp',1)  --schoensm V8.33P08 9-11-2019
     
  SPRUNCfile('FRS:\dcd_dp_rload.tp', 'FR:\dcd_dp_roofload.tp')
  Load_File('FR:','dcd_dp_roofload.tp',1)
    
  SPRUNCfile('FRS:\perc_frm_slct.tp', 'FR:\perc_frm_select.tp')
  Load_File('FR:','perc_frm_select.tp',1)
    
  SPRUNCfile('FRS:\temp05_rfload.tp', 'FR:\Templa05_roofload.tp')
  Load_File('FR:','Templa05_roofload.tp',1)

  writeLog('non-iRVision Programs loaded', FALSE)

END gen_vis_prog
-----------------------------------------------------------------------------
ROUTINE initVSN_PRGS
-- PURPOSE: to initialize Vision Programs associated with Material Handling setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(arc_optn) THEN --ArcTool
  arc_loaded
ENDIF

writeLog('  Loading Common Vision Program for ALL Shops', FALSE)

writeLog('  ALL Shops Common Vision Programs Loaded', FALSE)

IF (arc_optn = FALSE) THEN --SpotTool
  SELECT mfg_area OF -- launch the Display Setup set by wizard or load feature
    CASE(mfg_area_bs):  --Body Shop
        init_BSVPRG
    CASE(mfg_area_ps):  --Press Shop
        init_PrsVPRG
    CASE(mfg_area_pt):  --Powertrain
        init_PwrVPRG
    CASE(mfg_area_pn):  --Paint Shop
        init_PntVPRG
  ELSE:
    POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in initVSN_PRGS routine in GMVISPRG', 0, 0) --
    shop_str = 'Unknown'
 ENDSELECT

ELSE --ArcTool

  init_BSVPRG  --load body shop configurations until GM gives direction

ENDIF --SpotTool

SELECT VisSys_Type OF --launch setup based on vision application
  CASE(vis_fss,vis_fms,vis_guid):
    gen_vis_prog
  CASE(vis_irvis):  --Fanuc iRVision
    irvis_prog
  ELSE:
ENDSELECT

END initVSN_PRGS
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN
Current_Ver = Version -- Set the version for reference
-- Check these here instead of a routine so can return to calling routine
IF (arc_optn = FALSE) THEN --SpotTool
  IF UNINIT(mfg_area) THEN
    POST_ERR(38000, 'MFG_AREA not setup in GMVISPRG program', 0, 0) --
    RETURN
  ENDIF
ENDIF --Spottool
IF UNINIT(Use_Vision) THEN
  POST_ERR(38000, 'Use_Vision not setup in GMVISPRG program', 0, 0) --
  RETURN
ENDIF
IF UNINIT(ErrsInVision.ErrorsPrgrms) THEN
  ErrsInVision.ErrorsPrgrms = 0
ENDIF

IF UNINIT(VisnPrgsDone) THEN
  VisnPrgsDone = FALSE
ENDIF

  IF (VisnPrgsDone = TRUE) THEN -- setup has already been setup
      WriteLog('Vision Programs Already Setup', FALSE)
    IF ExecSetupAgn('Vision PROGRAMS') THEN -- ask user if they want to setup again
      VisnPrgsDone = FALSE
    ELSE
      WriteLog('Vision Program already Complete', FALSE)
      WriteLog('GMVISNPG Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

 StrtinErs = ErrsInVision.ErrorsPrgrms -- grab current eror count
 ClrUtltyErrs -- Clear all error in utility program to be used when done

 WriteLog('  Starting the Vision Program, setup Program', FALSE)

  IF (Use_Vision) THEN
    initVSN_PRGS -- Initialize program data
  ELSE
    POST_ERR(38000, 'USE_VISION is FALSE in GMVISPRG', 0, 0) --
    WriteLog('USE_VISION is FALSE in GMVISPRG Program', FALSE)
  ENDIF

 ErrsInVision.ErrorsPrgrms =  ErrsInVision.ErrorsPrgrms + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInVision.ErrorsPrgrms -StrtinErs) > 0 THEN -- check for I/O setup errors
   POST_ERR(38000, 'GMVISPRG had '+int2str((ErrsInVision.ErrorsPrgrms - StrtinErs))+' while executing',0, 0) --
   WriteLog('  Vision Program setup, Program GMVISPRG had ' + int2str((ErrsInVision.ErrorsPrgrms- StrtinErs))+' while executing', TRUE)
 ELSE
   WriteLog('  Vision Program setup, Program completed', FALSE)
   VisnPrgsDone = TRUE
 ENDIF

END GMVISPRG













