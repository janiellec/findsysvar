--
--    This material is the joint property of Fanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either Fanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both Fanuc Robotics and FANUC.
--    
--             All Rights Reserved
--             Copyright (C)   1999
--             Fanuc Robotics Corporation
--    
--             Karel is a registered trademark of
--             Fanuc Robotics Corporation
--
--    Language: KAREL
--    
--    Source File:  
--    
--    Author: Fanuc Robotics Corporation
--            3900 W. Hamlin Rd.
--            Rochester Hills, Michigan  48309
--    
--	 
--    Modification history:
--      2016-03-15:  marchaka - file created
------------------------------------------------------------------
PROGRAM gmmain2
------------------------------------------------------------------
%COMMENT = 'GM Main 2'
%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE
%NOABORT = ERROR + COMMAND

%ENVIRONMENT PRODDEF

%INCLUDE gmcfgcel  --  GM wizard variables that are common across all shops
%INCLUDE gmcfgerr  --  Required for the configuration of GM Error counting and logging
%INCLUDE gmcfgbdy  --  GM wizard variables for body shop applciations
--%INCLUDE gmcfgpnt  --  GM wizard variables for paint shop applications --not developed yet
%INCLUDE gmcfgpwr  --  GM wizard variables for powertrain applications
%INCLUDE gmcfgprs  --  GM wizard variables for press applications
%INCLUDE gmcfgdsp  --  GM wizard variables for dispense applications
%INCLUDE gmcfgmh   --  GM wizard variables for MH applications
%INCLUDE gmcfgvis  --  GM wizard variables for vision applications
%INCLUDE gm_var     --GM variables
%INCLUDE gmcfgstd  -- GM wizard variables for Stud Applications
%INCLUDE gmcfgfds  -- GM wizard variables for fds Applications

CONST
Revision = '2016-04-15'
%INCLUDE gmcnstnt -- All GM wizard constants

%INCLUDE klrdutil  --Routine declaration for core util
%INCLUDE gmrdutil  --GM utilities

ROUTINE	Set_Cell_Reg FROM gmcellrg
ROUTINE load_pmc    FROM gmpmc
ROUTINE set_reg     FROM gmcellrg
ROUTINE set_cell_io FROM gmcellio
ROUTINE set_cellvar  FROM gmcellvr
ROUTINE App_Shop_Bit FROM gmcellvr
ROUTINE set_cellpg  FROM gmcellpg
ROUTINE Cell_sty_tbl FROM gmcellpg
ROUTINE load_Cellmac FROM gmcellpg
ROUTINE set_disp_IO FROM gmdispio
ROUTINE set_disp_pg  FROM gmdisppg
ROUTINE initDISPREGS FROM gmdisprg
ROUTINE set_disp_var FROM gmdispvr
ROUTINE initDISPVARS FROM gmdispvr
ROUTINE set_disp_reg FROM gmdisprg
ROUTINE setdispiovr  FROM gmdispio
ROUTINE GMPT_SETUP  FROM GMPWRTN
ROUTINE Press_Setup  FROM GMPress -- Contains Press execution routines

ROUTINE setSTUD_Cold FROM gmstudio --sets stud parameters that can be set after a cold start
ROUTINE initSTUDVARS FROM gmstudvr --sets stud parameters 
ROUTINE set_stud_var FROM gmstudvr --sets stud parameters  
ROUTINE set_stud_IO  FROM gmstudio --sets stud parameters 
ROUTINE set_stud_pg  FROM gmstudpg --sets stud parameters 
ROUTINE set_stud_reg FROM gmstudrg --sets stud parameters 

ROUTINE setFDS_Cold FROM gmfdsio --sets FDS parameters that can be set after a cold start
ROUTINE initFDSVARS FROM gmfdsvr --sets FDS parameters 
ROUTINE set_fds_var FROM gmfdsvr --sets FDS parameters  
ROUTINE set_fds_IO  FROM gmfdsio --sets FDS parameters 
ROUTINE set_fds_pg  FROM gmfdspg --sets FDS parameters 
ROUTINE set_fds_reg FROM gmfdsrg --sets FDS parameters 

ROUTINE repwr_msg   FROM gmwizard



--**************************************************************************************
ROUTINE set_std_cold
--  This routine will perform the setup that is needed on power up after
--  the custo is ran (from set_std_ctrl).  Call on cold start power up.
--**************************************************************************************

VAR
prog_index: INTEGER

BEGIN

  --Current_Ver = Revision -- save version for reference in backups  --no VARs created yet

  IF (UNINIT(wiz_exec)) THEN
    wiz_exec = FALSE
  ENDIF

  IF (wiz_exec) THEN
    Set_Cell_Reg 
    App_Shop_Bit  --sets up app and shop bits
    Cell_sty_tbl  --sets up program style table
    load_Cellmac  --sets up macro table

    IF (numdispctrl<>0) THEN --dispense application selected
      set_disp_var  --sets dispense variables
      setdispiovr   --sets dispense I/O setup
      set_disp_pg   --sets dispense programs
      set_disp_reg  --sets dispense registers   
    ENDIF

    IF (numfdsctrl<>0) THEN --studs application selected
      setFDS_Cold  --sets fds parameters that can be set after a cold start
    ENDIF

    wiz_exec = FALSE
    Reset_Cell = FALSE
  ENDIF

END set_std_cold
--**************************************************************************************
ROUTINE set_std_ctrl                                             
--  This routine will perform all setup possible at controlled start for all applications
--**************************************************************************************
VAR 
  prog_index:  INTEGER

BEGIN

  --Current_Ver = Revision -- save version for reference in backups  --no VARs created yet

  IF (Chk_loaded('gmpmc')) THEN
    load_pmc          --load pmc
  ELSE
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
  ENDIF

  IF UNINIT(set_safeio) THEN -- KRISTIN need to change this var so if user powers down
    set_safeio = 1           -- before running setup var is not still set
  ENDIF

  IF (set_safeio = wizans_yes) THEN				 --Reinitialize DCS Settings
    IF NOT (CallThisProg('gmsafeio')) THEN
      ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
    ENDIF
  ENDIF

  IF (Chk_loaded('gmcellrg')) THEN
    set_reg						 --sets registers
  ELSE
    ErrsInCell.ErrorsRgstrs = ErrsInCell.ErrorsRgstrs+1
  ENDIF

  IF (Chk_loaded('gmcellio')) THEN
    set_cell_io					 --sets cell I/O and flags
  ELSE
    ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom+1
  ENDIF

  IF (Chk_loaded('gmcellvr')) THEN
    set_cellvar					 --sets cell variables
  ELSE
    ErrsInCell.ErrorsVarbls = ErrsInCell.ErrorsVarbls+1
  ENDIF

  IF (Chk_loaded('gmcellpg')) THEN
    set_cellpg
  ELSE
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
  ENDIF

-- Each shop should take care of their loading requirements
 SELECT mfg_area OF -- launch the Display Setup set by wizard or load feature
    CASE(mfg_area_bs): -- Body Shop
      IF Use_MH_Tool THEN  -- if user confiqured MH stuff
        IF NOT (CallThisProg('gmmhvars')) THEN  ErrsInShop.ErrorsVarbls = ErrsInShop.ErrorsVarbls+1; ENDIF  --sets MH variables
        IF NOT (CallThisProg('gmmhgpio')) THEN  ErrsInShop.ErrorsIOCom  = ErrsInShop.ErrorsIOCom+1; ENDIF  --sets MH I/O
        IF NOT (CallThisProg('gmmhprgs')) THEN  ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1; ENDIF --sets MH programs
        IF NOT (CallThisProg('gmmhregs')) THEN  ErrsInShop.ErrorsRgstrs = ErrsInShop.ErrorsRgstrs+1; ENDIF --sets MH registers
      ENDIF

      IF Use_Vision THEN   -- If user configured vision stuff
        IF NOT (CallThisProg('gmvisvar')) THEN  ErrsInShop.ErrorsVarbls = ErrsInShop.ErrorsVarbls+1; ENDIF --sets Vision variables
        IF NOT (CallThisProg('gmvisnio')) THEN  ErrsInShop.ErrorsIOCom  = ErrsInShop.ErrorsIOCom +1; ENDIF --sets Vision I/O
        IF NOT (CallThisProg('gmvisprg')) THEN  ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1; ENDIF --sets Vision programs
        IF NOT (CallThisProg('gmvisreg')) THEN  ErrsInShop.ErrorsRgstrs = ErrsInShop.ErrorsRgstrs+1; ENDIF --sets Vision registers
      ENDIF

      IF (Chk_loaded('gmdispvr')) THEN
        initDISPVARS      --set dispense equipment, need to do here for repower
      ELSE
        ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
      ENDIF

      IF (Chk_loaded('gmdispio')) THEN
        set_disp_IO       --sets dispense I/O
      ELSE
        ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
      ENDIF

      IF (numstudctrl<>0) THEN --studs application selected
        IF (Chk_loaded('gmstudvr')) THEN
          initSTUDVARS  --sets stud parameters 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF
        IF (Chk_loaded('gmstudvr')) THEN
          set_stud_var  --sets stud parameters 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF        
        IF (Chk_loaded('gmstudio')) THEN
          set_stud_IO  --sets stud parameters 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF  
        IF (Chk_loaded('gmstudpg')) THEN
          set_stud_pg  --sets stud parameters 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF 
        IF (Chk_loaded('gmstudrg')) THEN
          set_stud_reg  --sets stud parameters 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF        
      ENDIF

      IF (numfdsctrl<>0) THEN --FDS application selected
        IF (Chk_loaded('gmfdsvr')) THEN
          initFDSVARS 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF
        IF (Chk_loaded('gmfdsvr')) THEN
          set_fds_var 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF        
        IF (Chk_loaded('gmfdsio')) THEN
          set_fds_IO 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF  
        IF (Chk_loaded('gmfdspg')) THEN
          set_fds_pg  
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF 
        IF (Chk_loaded('gmfdsrg')) THEN
          set_fds_reg 
        ELSE
          ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
        ENDIF        
      ENDIF

    CASE(mfg_area_ps): -- Press Shop
      IF (Chk_loaded('GMPRESS')) THEN
        Press_Setup       -- Press Shop Application Setup
      ELSE
        ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
      ENDIF

    CASE(mfg_area_pt): -- Powertrain Shop
      IF (Chk_loaded('GMPWRTN')) THEN
        GMPT_SETUP       -- powertrain setup
      ELSE
        ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
      ENDIF

    CASE(mfg_area_pn): -- Paint Shop
      POST_ERR(38000, 'Currently NO Paint Setup Available',0 , 0) --
  
  ELSE:
    POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in set_std_ctrl routine in GMMAIN1', 0, 0) --
  ENDSELECT

IF (chk_repwr) THEN				 --post repower message
  repwr_msg
ENDIF

END  set_std_ctrl

--*********************************************************************************
BEGIN

END gmmain2
