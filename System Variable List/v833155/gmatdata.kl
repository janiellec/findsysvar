-- -----------------------------------------------------------------------
--
--   MODULE: GMATData.kl
--   TITLE:  Arc-Tool Display Setup Menu
--
--   WRITTEN BY:     Schoenberg 
--   REVISION DATE:  03/20/2018
--
--   LANGUAGE:       KAREL 8.33
--   CONTROL GROUP:  General Motor Global Center
--
--   ORDER NUMBER:   GM Global Center
--   PROJECT NAME:
--
--
--   COPYRIGHT:     Fanuc Robotics America, Inc. retains rights in any
--                  and all Software contained in the material attached
--                  hereto and said Software may not be copied
--                  reproduced without the written permission Fanuc
--                  Robotics America, Inc..
--
--                  All Software, (C) Copyright Fanuc Robotics
--                  America, Inc., 2016
--
--         DESCRIPTION: This program will display current robot configuration
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  -------------  --------------------
--         V4         20MAR18    Schoenberg
--         V4.1       22OCT20    Schoenberg     v8.33p10 Mig-Weld Wiz, Reamer/Nozzle, Torch-Wizard.
--------------------------------------------------------------------------
PROGRAM GMATDATA

%SYSTEM
--%INVISIBLE
%NOABORT = ERROR + COMMAND
%NOPAUSE = ERROR + COMMAND + TPENABLE
%NOBUSYLAMP
%NOLOCKGROUP
%PRIORITY=100
%NOPAUSESHFT
%ALPHABETIZE
%COMMENT = 'GMAT Display V4.1'
%INCLUDE gmevrlng -- GM wizard langauge variables
%INCLUDE gmevralg -- GM arctool wizard langauge variables
%INCLUDE gmcfglas  -- GM laser wizard variables
%INCLUDE gmcfgmig  -- GM Mig-Weld wizard variables

CONST
ver  = '2020/10/23' 
star_fill = '****************************************'
star_p2   = '**************Process-2*****************'
star_mh   = '****MH-Tool/Vacuum/Tool-Stand/Vision****'
%INCLUDE gmacnstn -- all GM ArcTool constants for the ArcTool wizard
%INCLUDE GMCNSTNT -- must be declared under CONST


VAR
screen    :STRING[4]
gm_status :INTEGER
i         :INTEGER
ans       :INTEGER
inc_arry  :INTEGER
v         :INTEGER -- used in the FOR loop
w         :INTEGER -- used in the FOR loop
str_var   : ARRAY[150] of STRING[MAX_FILE_NAM]
clr_var   : ARRAY[150] of STRING[MAX_FILE_NAM]
lsrproc_optn IN SHADOW FROM GMATVAR: BOOLEAN  -- Laser process tool option loaded on robot
arclink_app  IN SHADOW FROM GMCFGARC: INTEGER   --use arclink
alternate:INTEGER

--Other applications
%INCLUDE GMCFGCEL
%INCLUDE GMCFGVIS
%INCLUDE gmrdutil 

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
%INCLUDE klrdutil -- Needed for the CLR_STND_SCR routine
-----------------------------------------------------------------------------
ROUTINE inc
-- PURPOSE: increment the array
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

--This should log dat to wizlog, in Q and A format.
IF alternate = 1 THEN
  writeLog('Q- ' + str_var[inc_arry], FALSE)
  alternate = 0
ELSE
  writeLog('  Ans:' + str_var[inc_arry], FALSE)
  alternate = 1
ENDIF

inc_arry = inc_arry + 1
  	
END inc
-----------------------------------------------------------------------------
ROUTINE display_all
-- PURPOSE: 
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN
  
  loopit::
  REPEAT -- Repeat until answered and Verified      
    --Display to the Screen...   
    WRITE TPDISPLAY('    **  Arc-Tool Current Config  ** ',cr)
    FOR w = 1 TO 4 Do  --Only going up to max of 4, can only get 10 lines to display on the teach-pendant
      --Question Field 
      IF str_var[v] = '' THEN
	WRITE TPDISPLAY('',cr)
      ELSE  		
    	WRITE TPDISPLAY('Q-' + str_var[v] + ':',cr)
      ENDIF
      v = v + 1       
      --Answer Field 
      IF str_var[v] = '' THEN
	WRITE TPDISPLAY('',cr)
      ELSE  		
        WRITE TPDISPLAY('  Ans:', + str_var[v],cr)
      ENDIF    
      v = v + 1             
    ENDFOR
    WRITE TPDISPLAY('0=Back, 1=Next, 2=Exit')
    READ TPPROMPT (ans)
  UNTIL (Verify_Answr(Ans,0,2))-- Verify Answer

  --decrement case statement added for Bill K
  SELECT (ans) OF
    CASE(0):
      IF V > 16 THEN 
	v = (v - 16)
	GOTO loopit
      ELSE
	v = (v - 8)
        GOTO loopit	  	
      ENDIF
    CASE(1):
      --check to see if there is anything else to display...
      IF V >= inc_arry THEN 
	GOTO getout
      ELSE
	GOTO loopit		  	
      ENDIF
    CASE(2):
      GOTO getout
  ENDSELECT 

  getout::
   
END display_all
-----------------------------------------------------------------------------
ROUTINE vis_dsp
-- PURPOSE: Build display for Process, Vision
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: case select
--
--
-----------------------------------------------------------------------------
BEGIN
  --Do you have a vision system?
  str_var[inc_arry] = visq1_gmdata
  inc
  IF USE_VISION THEN
    --Yes
    str_var[inc_arry] = yes_gmdata
  ELSE
    --No
    str_var[inc_arry] = no_gmdata
  ENDIF
    inc
	
  IF use_vision THEN  --use vision
    --Select vision system?
    str_var[inc_arry] = visq2_gmdata
    inc
    SELECT (VisSys_Type) OF
      CASE(vis_fss):
	--Flexible Scanning FSS
	str_var[inc_arry] = fss_gmdata
      CASE(vis_fms):
	--Flexible Measuring FMS
	str_var[inc_arry] = fms_gmdata
      CASE(vis_guid):
        --Robot Guidance
	str_var[inc_arry] = guid_gmdata
      CASE(vis_irvis):
	--FANUC iRVision
	str_var[inc_arry] = in_gmdata
      ELSE:
        writeLog('Var Failed to read - VisSys_Type', FALSE)
    ENDSELECT 
    inc
		
    IF VisSys_Type = vis_irvis THEN  --Only display next 2 Questions if it is IRVision
      --Select vision system, FANUC?
      str_var[inc_arry] = visq2_gmdata
      inc
      SELECT (iRType) OF
	CASE(1):
	  --iRVision 2D System
	  str_var[inc_arry] = ir2dgmdata
	CASE(2):
	  --iRVision 3D System
	  str_var[inc_arry] = ir3dgmdata
	CASE(3):
	  --iRVision 2D/3D System
	  str_var[inc_arry] = irbthgdata
	ELSE:
	  writeLog('Var Failed to read - iRType', FALSE)
	ENDSELECT
      inc	 
		   
      --iRVision Lighting System
      str_var[inc_arry] = irlight
      inc
      SELECT (VisLghtType) OF
	CASE(1):
	  --Remote Mounted
	  str_var[inc_arry] = irlight2
	CASE(2):
	  --Robot Mounted
	  str_var[inc_arry] = irlight3
	CASE(3):
	  --Remote and Robot Mounted
	  str_var[inc_arry] = irlight4
	CASE(4):
	  --No Lighting
	  str_var[inc_arry] = irlight5
	ELSE:
	  writeLog('Var Failed to read - VisLghtType', FALSE)
      ENDSELECT 
      inc  
    ENDIF   --iRVision
  ENDIF  --use vision
	
END vis_dsp
-----------------------------------------------------------------------------
ROUTINE lasapp_dsp
-- PURPOSE: Build display for Process, Arc-Tool
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: atool_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  --laser wizard questions
  str_var[inc_arry] = laspr_gmdata		--Is this a laser process?
  inc
  IF laser_app = wizans_yes THEN
    --Yes
    str_var[inc_arry] = yes_gmdata
  ELSE
    --No
    str_var[inc_arry] = no_gmdata
  ENDIF
  inc
	
  IF (laser_app = wizans_yes) THEN -- robot has a laser application
    str_var[inc_arry] = lasty_gmdata		--What type of Laser?	
    inc  	
    SELECT laser_ctrl OF  
      CASE(lasctrl_lsln):  --laserline 	
        str_var[inc_arry] = lasln_gmdata			
      CASE(lasctrl_trmp):  --trumpf 			
        str_var[inc_arry] = trmp_gmdata
    ENDSELECT	
    inc	
			
    IF laser_ctrl = lasctrl_lsln	THEN	--laserline only
      str_var[inc_arry] = lashd_gmdata		 --What type of head is used
      inc  	
      SELECT laser_head OF --set laser head variable based on constant
        CASE(lashd_scsn): --ScanSonic AL03
          str_var[inc_arry] = sonic_gmdata
        ELSE:  --no other heads supported right now, default to ScanSonic AL03
          str_var[inc_arry] = nonegmdata
      ENDSELECT
      inc						
					
      str_var[inc_arry] = pmon_gmdata + '?' --Is process monitor used
      inc  	
      SELECT procmontype OF --set process monitor variable based on constant
        CASE(procm_none): 
          str_var[inc_arry] = nonegmdata
        CASE(procm_lesm): 
          str_var[inc_arry] = lesm_gmdata
        ELSE:  
          str_var[inc_arry] = ''
      ENDSELECT
      inc											  	
    ENDIF	--laserline only
	
    IF laser_ctrl = lasctrl_trmp	THEN	--trumpf only
      str_var[inc_arry] = lashd_gmdata		 --What type of head is used
      inc  	
      SELECT laser_head OF --set laser head variable based on constant
        CASE(lashd_ipfo): 
          str_var[inc_arry] = ipfo_gmdata	--ipfo head 
        ELSE:  
          str_var[inc_arry] = nonegmdata
      ENDSELECT
      inc						
					
      str_var[inc_arry] = pmon_gmdata + '?' --Is process monitor used
      inc  	
      SELECT procmontype OF --set process monitor variable based on constant
        CASE(procm_none): 
          str_var[inc_arry] = nonegmdata
        CASE(procm_plwm): 
          str_var[inc_arry] = prclwm_gmdta	--precitec LWM
        ELSE:  
          str_var[inc_arry] = ''
      ENDSELECT
      inc											  	
   ENDIF	--trumpf only	

   --Does the laser process use wire
   str_var[inc_arry] = lproc_gmdata + ' ' + lwire_gmdata + '?'	
   inc
   IF laser_wire = wizans_yes THEN
     --Yes
     str_var[inc_arry] = yes_gmdata
   ELSE
     --No
     str_var[inc_arry] = no_gmdata
   ENDIF
   inc 

   IF (laser_wire = wizans_yes) THEN 		--process uses a wire
     --Do you want to load GM default laser braze parameters 	
     str_var[inc_arry] = bzprm_gmdata + '?'	
     inc
     IF braze_param = wizans_yes THEN
       --Yes
       str_var[inc_arry] = yes_gmdata
     ELSE
       --No
       str_var[inc_arry] = no_gmdata
     ENDIF
     inc 			
			
     --Do you want to load GM default data monitor file for laser braze	
     str_var[inc_arry] = dmon_gmdata + ' ' + flbz_gmdata + '?'	
     inc
     IF datamon_file = wizans_yes THEN
       --Yes
       str_var[inc_arry] = yes_gmdata
     ELSE
       --No
       str_var[inc_arry] = no_gmdata
     ENDIF
     inc 						
   ENDIF --process uses a wire			

   str_var[inc_arry] = gasb_gmdata + '?' --What type of gas box
   inc  	
   SELECT gasboxtype OF --set process monitor variable based on constant
     CASE(gasbox_gmstd): 
       str_var[inc_arry] = gmstd_gmdata	--GM standard
     CASE(gasbox_none): 
       str_var[inc_arry] = nonegmdata		--None
   ENDSELECT
   inc	

  ENDIF --laser application

END lasapp_dsp

-----------------------------------------------------------------------------
ROUTINE migapp_dsp
-- PURPOSE: Build display for Process, Arc-Tool
--
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY: atool_dsply case select
--
--
-----------------------------------------------------------------------------
BEGIN

  --Mig-Weld wizard questions
  str_var[inc_arry] = migst_gmdata + '?'--Is this Steel Mig-Weld App.?
  inc
  IF mig_steel = wizans_yes THEN
    --Yes
    str_var[inc_arry] = yes_gmdata
  ELSE
    --No
    str_var[inc_arry] = no_gmdata
  ENDIF
  inc
	
  IF (mig_steel = wizans_yes) THEN -- robot is a steel Mig-Weld Application
    str_var[inc_arry] = remus_gmdata + '?'	--Is a Reamer/Nozzle Detect Used?
    inc
    IF rmr_noz_det = wizans_yes THEN 				
      --Yes
      str_var[inc_arry] = yes_gmdata
      inc
      str_var[inc_arry] = remtw_gmdata + '?'	--Is the Reamer a Torch Wizard?
      inc
      IF rmr_trch_wiz = wizans_yes THEN
	--Yes
	str_var[inc_arry] = yes_gmdata
      ELSE
	--No
	str_var[inc_arry] = no_gmdata
      ENDIF	
    ELSE
      --No
      str_var[inc_arry] = no_gmdata
    ENDIF
    inc
  ENDIF --Mig-Weld Steel application

END migapp_dsp
-----------------------------------------------------------------------------------
ROUTINE arcapp_dsp
--  This routine contains the wizard questions for arc applications
-----------------------------------------------------------------------------------
BEGIN

  IF (lsrproc_optn = FALSE) THEN  --If this is true, the question/answer will not even show up.
    --arc config questions
    str_var[inc_arry] = arclnkgmdata + '?' --Use ArcLink Communication
    inc
    IF arclink_app = wizans_yes THEN
      --Yes
      str_var[inc_arry] = yes_gmdata
    ELSE
      --No
      str_var[inc_arry] = no_gmdata
    ENDIF  --arclink_app
    inc 
  ENDIF --lsrproc_optn

END arcapp_dsp
-----------------------------------------------------------------------------
ROUTINE arc_disply
-- PURPOSE: this program is called to display the current configuration
--          this is used as a display only and changes are made using the
--          wizard. this program will be called from a case select in GMWIZARD
--
-- INPUT:
--            
-- OUTPUT:
--            
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --Clear the string vars
  FOR w = 1 to 150 DO
    clr_var[w] = ''
  ENDFOR
  
  str_var = clr_var  
  inc_arry = 1
  v = 1 
  alternate = 1

  arcapp_dsp
  vis_dsp
  lasapp_dsp 
  migapp_dsp 
  display_all

END arc_disply
--------------------------------------------------------------------------------
--------------------        MAIN BODY OF PROGRAM     ---------------------------
--------------------------------------------------------------------------------
BEGIN

  arc_disply

END GMATDATA
