-- -----------------------------------------------------------------------
--
--   MODULE:         GMSPOTIO3.KL
--   TITLE:          GMSPOTIO3 PROGRAM
--
--
--   WRITTEN BY:     FANUC
--   REVISION DATE:  2017/01/26
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Spot Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--             V4.0   2017/02/05 marchaka         Modify prompts for wizard rerun
--             V4.0   2017/02/09 marchaka         Add Kyokutoh cap changer I/O comments
--             V4.1   2017/07/24 marchaka         Start point for cap changer changed to 17
--             V4.2   2018/09/17 marchaka         Add new setup for servo cap change dresser combo cap changer.
--             V4.2   2018/10/26 marchaka         Modify blow off setup for servo tip dressers with cap changers.
--         
--                                                
--                                                
--                                               
--
--
--
--
--------------------------------------------------------------------------
PROGRAM GMSPOTIO3

%COMMENT = 'GM SPOT I/O 3 V4.2'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.

-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgbdy  -- body shop variables
%INCLUDE gmcfgspt  -- spot application variables

CONST

Version = '2018-10-26'
%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  SpotIO3Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup Mh I/O at least first time
  SpotSetup IN SHADOW : ARRAY[max_spot_eq] OF BOOLEAN -- indicates if the Spot has been setup before

  gm_status:  INTEGER
 
  capch_slot   IN CMOS: INTEGER --used for ENET slot

  do_cgsblow1   IN SHADOW FROM GMVARS: INTEGER  --P: Carried gun, servo dresser blower output tip dresser 1
  do_cgsblow2   IN SHADOW FROM GMVARS: INTEGER  --P: Carried gun, servo dresser blower output tip dresser 2
  do_cgsblow3   IN SHADOW FROM GMVARS: INTEGER  --P: Carried gun, servo dresser blower output tip dresser 3
  do_cgsblow4   IN SHADOW FROM GMVARS: INTEGER  --P: Carried gun, servo dresser blower output tip dresser 4


ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE GMRDUTIL -- Utility Routine for Setting Variable

ROUTINE TURK_IO_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING) FROM gmenetsu
-----------------------------------------------------------------------------
ROUTINE initSpot3IO
-- PURPOSE: to initialize Programs associated with I/O setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

-- Check Common spot variables used in the program to be setup
IF UNINIT(spotcommtype) THEN --set hook for multiple communications
  spotcommtype = Ethernet -- set it to 89
ENDIF
IF UNINIT(numwldctrl) THEN
  numwldctrl = 0
ENDIF
IF UNINIT(Reset_Cell) THEN
  Reset_Cell = FALSE
ENDIF

-- Check variable associated with weld controller #1
IF UNINIT(SpotSetup[1]) THEN
  SpotSetup[1] = FALSE
ENDIF
IF UNINIT(bshop_proc1) THEN
  bshop_proc1 = 0
ENDIF

-- Check variable associated with weld controller #1
IF UNINIT(SpotSetup[2]) THEN
  SpotSetup[2] = FALSE
ENDIF
IF UNINIT(bshop_proc2) THEN
  bshop_proc2 = 0
ENDIF

IF UNINIT(capch_slot) THEN
  capch_slot = 28
ENDIF

END initSpot3IO
-----------------------------------------------------------------------------
ROUTINE cap_chng_io
-- PURPOSE: setup cap changer i/o
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (cap_chnger = wizans_yes) THEN  --cap changer is used

    do_cgsblow1   = 1459      --P: Carried gun, servo dresser blower output tip dresser 1
    do_cgsblow2   = 1460      --P: Carried gun, servo dresser blower output tip dresser 2
    do_cgsblow3   = 1461      --P: Carried gun, servo dresser blower output tip dresser 3
    do_cgsblow4   = 1462      --P: Carried gun, servo dresser blower output tip dresser 4

    --same I/O mapping because same hardware for all cap change solutions
    SET_PORT_ASG(IO_DIN,1457,spotcommtype,capch_slot,IO_DIN, 17,-8, gm_status)
    SET_PORT_ASG(IO_DOUT,1457,spotcommtype,capch_slot,IO_DOUT, 17,-8, gm_status)

    IF (spotcommtype = Ethernet) THEN
      TURK_IO_EIP(capch_slot, 'CAP CHNGR') 
    ENDIF

    SELECT cap_chngtype OF  --cap changer type
      
      CASE(cap_rbtmov, cap_rbtstatn):  --pneumatic, robot moving and robot stationary
        SET_PORT_CMT(IO_DIN,1457,'(Reserved)',gm_status)
        SET_PORT_CMT(IO_DIN,1458,'(Reserved)',gm_status)
        SET_PORT_CMT(IO_DIN,1459,'diJawOpen',gm_status)
        SET_PORT_CMT(IO_DIN,1460,'diJawClosed',gm_status)
        SET_PORT_CMT(IO_DIN,1461,'diTopCapCartridg',gm_status)
        SET_PORT_CMT(IO_DIN,1462,'diBtmCapCartridg',gm_status)
        SET_PORT_CMT(IO_DIN,1463,'diCapPresentChk',gm_status)
        SET_PORT_CMT(IO_DIN,1464,'diCartClampClsd',gm_status)

        SET_PORT_CMT(IO_DOUT,1457,'doCloseJaw', gm_status)
        SET_PORT_CMT(IO_DOUT,1458,'(Reserved)', gm_status)
        SET_PORT_CMT(IO_DOUT,1459,'doTdBlowoffG1', gm_status)
        SET_PORT_CMT(IO_DOUT,1460,'doTdBlowoffG2', gm_status)
        SET_PORT_CMT(IO_DOUT,1461,'doTdBlowoffG3', gm_status)
        SET_PORT_CMT(IO_DOUT,1462,'doTdBlowoffG4', gm_status)
        SET_PORT_CMT(IO_DOUT,1463,'(Reserved)', gm_status)
        SET_PORT_CMT(IO_DOUT,1464,'(Reserved)', gm_status)

      CASE(cap_srvcombo):  --servo cap changer and dresser combo
        SET_PORT_CMT(IO_DIN,1457,'(Reserved)',gm_status)
        SET_PORT_CMT(IO_DIN,1458,'(Reserved)',gm_status)
        SET_PORT_CMT(IO_DIN,1459,'(Reserved)',gm_status)
        SET_PORT_CMT(IO_DIN,1460,'(Reserved)',gm_status)
        SET_PORT_CMT(IO_DIN,1461,'diTopCapCartridg',gm_status)
        SET_PORT_CMT(IO_DIN,1462,'diBtmCapCartridg',gm_status)
        SET_PORT_CMT(IO_DIN,1463,'diCapPresentChk',gm_status)
        SET_PORT_CMT(IO_DIN,1464,'(Reserved)',gm_status)

        SET_PORT_CMT(IO_DOUT,1457,'(Reserved)', gm_status)
        SET_PORT_CMT(IO_DOUT,1458,'(Reserved)', gm_status)
        SET_PORT_CMT(IO_DOUT,1459,'doTdBlowoffG1', gm_status)
        SET_PORT_CMT(IO_DOUT,1460,'doTdBlowoffG2', gm_status)
        SET_PORT_CMT(IO_DOUT,1461,'doTdBlowoffG3', gm_status)
        SET_PORT_CMT(IO_DOUT,1462,'doTdBlowoffG4', gm_status)
        SET_PORT_CMT(IO_DOUT,1463,'(Reserved)', gm_status)
        SET_PORT_CMT(IO_DOUT,1464,'(Reserved)', gm_status)
        
      ELSE:

    ENDSELECT --type of cap changer

  ENDIF --cap changer is used

END cap_chng_io
-----------------------------------------------------------------------------
ROUTINE set_spotio3
-- PURPOSE: setup spot application I/O
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF (numwldctrl <> 0) THEN --application has spot

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsIOCom) THEN
    ErrsInShop.ErrorsIOCom = 0
  ENDIF
  IF UNINIT(SpotIO3Setup) OR (Reset_Cell) THEN
    SpotIO3Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsIOCom -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('  Starting the Spot I/O Program GMSPOTIO3', FALSE)

  IF (SpotIO3Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  Spot I/O 3 Already Setup', FALSE)
    IF ExecSetupAgn('Spot I/O 3') THEN -- ask user if they want to setup again
      SpotIO3Setup = FALSE
    ELSE
      WriteLog('  Spot I/O 3 already Complete', FALSE)
      WriteLog('  GMSPOTIO3 Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  initSpot3IO
  cap_chng_io

  ErrsInShop.ErrorsIOCom =  ErrsInShop.ErrorsIOCom + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsIOCom -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('  Spot I/O setup Program GMSPOTIO3 had ' + int2str((ErrsInShop.ErrorsIOCom- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('  Spot I/O 3 setup Program completed', FALSE)
    SpotIO3Setup = TRUE
  ENDIF

  WriteLog('', FALSE)

ENDIF --number of weld controllers

END set_spotio3
-----------------------------------------------------------------------------
BEGIN

END GMSPOTIO3
