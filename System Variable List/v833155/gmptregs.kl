-- -----------------------------------------------------------------------
--
--   MODULE:         GMPTREGS.KL
--   TITLE:          GMPTREGS PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: GMPT registers setup. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZMH,GMWIZVIS are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--                    11-27-16   R.Kosaski        added register comments for pick
--                                                and Drop commands
--
--                    9-27-17   R.Kosaski         modified clearing of registers, had
--                                                issue of the SPinTop registers comments
--                                                being cleared
--

--
--
--------------------------------------------------------------------------
PROGRAM GMPTREGS

%COMMENT = 'GMPT Regstr V4.2'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE
%ENVIRONMENT REGOPE -- required for register builtins

%ENVIRONMENT IOSETUP -- Required for the I/O Builtin support
%ENVIRONMENT SYSDEF  -- required for the $group[1]. variable
%INCLUDE iosetup

%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
CONST

Version = '09-27-17 R.K.'

%INCLUDE gmcnstnt -- all gm Wizard constants

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
   StrtinErs  : INTEGER  -- How many errors I/O error counter had when the program started
 GM_status :INTEGER -- Used for the Builtins returned status

GMPTRegsDone IN SHADOW : BOOLEAN -- if the registers has ran completly

%INCLUDE gmcfgcel  -- used for all the workcell variables
%INCLUDE gmcfgerr  -- used for all the error counting and status while executing the wizard
%INCLUDE gmcfgpwr  -- GMPT Configuration variables
%INCLUDE gmcfgvis  -- has the vision vars -- added 9-27-17 for USE_SPINTOP var

%INCLUDE gmrdutil

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
 -----------------------------------------------------------------------------
ROUTINE initGMPTREGS
-- PURPOSE: to initialize Registers associated with GMPT setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR

i :INTEGER

BEGIN

IF UNINIT(PromptToOpen) THEN
  PromptToOpen = TRUE
ENDIF

--RK 9-27-17 changed because SpinTop
FOR i = 1 TO 37 DO -- clear all the Spot Registers was thru 99 9-27-17
  Comment_Reg(1,i, '')
ENDFOR --

IF Use_Spin_Top = FALSE THEN -- added 9-27-17
  FOR i = 38 TO 49 DO -- clear all the Spot Registers
    Comment_Reg(1,i, '')
  ENDFOR --
ENDIF

FOR i = 50 TO 99 DO -- -- added 9-27-17 clear all the Spot Registers
  Comment_Reg(1,i, '')
ENDFOR --

FOR i = 127 TO 141 DO
  Comment_Reg(1,i, '')
ENDFOR --
FOR i = 170 TO 297 DO
  Comment_Reg(1,i, '')
ENDFOR --

Current_Ver = Version -- Set the version for reference

--***************************************************************************
--               Set Position Registers
--***************************************************************************
                    --1234567890123456
    Comment_Reg(1,1, 'Grp1AnlgPos Read') -- Pass 1 to indicate Data Register 2= Pos Reg
    Comment_Reg(1,3, 'Cnfrm Man. Open')
    IF (PromptToOpen) THEN
      SET_INT_REG(3,  1,gm_status)
    ELSE
      SET_INT_REG(3,  0,gm_status)
    ENDIF

    Comment_Reg(1,5, 'Grp1Min Clsd Val') --
    Comment_Reg(1,6, 'Grp1Max Clsd Val') --

 --   SET_PORT_CMT(IO_MARKER,1,'Grp#1 Closed',gm_status)  Markers are setup in GMMHGRIO
 --   SET_PORT_CMT(IO_MARKER,2,'Grp#1 Opened',gm_status)

    Comment_Reg(1,7, 'Grp1Min Open Val') --
    Comment_Reg(1,8, 'Grp1Max Open Val') --

    Comment_Reg(1,11, 'Grp2AnlgPos Read') -- Pass 1 to indicate Data Register 2= Pos Reg

    Comment_Reg(1,15, 'Grp2Min Clsd Val') --
    Comment_Reg(1,16, 'Grp2Max Clsd Val') --

 --   SET_PORT_CMT(IO_MARKER,3,'Grp#2 Closed',gm_status)  Markers are setup in GMMHGRIO
 --   SET_PORT_CMT(IO_MARKER,4,'Grp#2 Opened',gm_status)

    Comment_Reg(1,17, 'Grp2Min Open Val') --
    Comment_Reg(1,18, 'Grp2Max Open Val') --

    Comment_Reg(1,20, 'Layer Multiply') --
    Comment_Reg(1,21, 'Column Multiply') --
    Comment_Reg(1,22, 'Row Multiply') --
    Comment_Reg(1,23, 'ColumnIdx if Req') --
    Comment_Reg(1,24, 'Layer Location') --

    Comment_Reg(1,32, 'Circle Radius') --
    Comment_Reg(1,33, 'Circle Disp Sped') --
    Comment_Reg(1,34, 'Step Circle Cntr') --
    Comment_Reg(1,35, 'Circle UTool #') --
    SET_INT_REG(35,  1,gm_status)
    Comment_Reg(1,36, 'Circle UFrame#') --
    SET_INT_REG(36,  1,gm_status)

    Comment_Reg(1,39, 'SPINTOP Flag Reg') --

-- Comment register 38-49 used for spinTop, but commented in GMSPINRG.KL file
                     --1234567890123456
    Comment_Reg(1,53, '#Parts Per Pick') --
    Comment_Reg(1,53, '#Parts PICK Row') --
    Comment_Reg(1,54, '#PartsPICK Colmn') --
    Comment_Reg(1,55, 'Pick Position') --
    Comment_Reg(1,56, 'Pick Offset') --
    Comment_Reg(1,57, 'Place Position') --
    Comment_Reg(1,58, 'Place Offset') --
    Comment_Reg(1,59, 'Parts PICK Layer') --
    Comment_Reg(1,60, 'MaxPickPrtCnt') --

    Comment_Reg(1,62, '#Parts Per Place') --
    Comment_Reg(1,63, '#Parts PLACE Row') --
    Comment_Reg(1,64, '#Parts PLC Colmn') --

    Comment_Reg(1,69, 'Parts PLC Layer') --
    Comment_Reg(1,70, 'MaxPLCPrtCnt') --
    Comment_Reg(1,99, 'InDirect Reg.') --

    Comment_Reg(1,102, 'First Pounce Pos') -- Pass 1 to indicate Data Register 2= Pos Reg
    SET_INT_REG(102,  1,gm_status)

    Comment_Reg(1,103, 'Dest Pounce PR#')
    Comment_Reg(1,104, 'Curnt Pounce PR#')
    Comment_Reg(1,105, 'Max # Pounce Pos')
    SET_INT_REG(105,  5,gm_status)

    Comment_Reg(1,106, 'Use PRtoPR Path')

    Comment_Reg(1,108, 'FOR Loop Counter')
    Comment_Reg(1,109, 'Move Pounce Type')
    SET_INT_REG(109,  0,gm_status)

    Comment_Reg(1,135, 'Last Tool Frame')
    Comment_Reg(1,136, 'Last User Frame')

--***************************************************************************
--               Set Position Registers
--***************************************************************************

    FOR i = 2 TO 10 DO  -- Comment the Multiple pounces
      Comment_Reg(2,i, 'Pounce #'+int2str(i))
    ENDFOR --

    Comment_Reg(2,20, 'Start of Search')
    Comment_Reg(2,21, 'Current Position')
    Comment_Reg(2,22, 'End of Search')

    Comment_Reg(2,31, 'Bead Hght Ofst')
    Comment_Reg(2,32, 'Circ Top Ofst')
    Comment_Reg(2,33, 'Circ Rh Ofst')
    Comment_Reg(2,34, 'CircBttm Ofst')
    Comment_Reg(2,35, 'Circ Lh Ofst')
    Comment_Reg(2,36, 'Circle Center')

    Comment_Reg(2,38, 'Bead StartOfst')
    Comment_Reg(2,39, 'Bead End Ofst')

    Comment_Reg(2,50, 'Apprch Tool Ofst')
    Comment_Reg(2,51, 'Depart Tool Ofst')
    Comment_Reg(2,52, 'Pallet Spacing')
    Comment_Reg(2,55, 'Pick Offset')
    Comment_Reg(2,57, 'Place Offset')

--***************************************************************************
--               Comment String Registers
--***************************************************************************

     Comment_Reg(3,1, 'Pounce Path Name')

END initGMPTREGS
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN

Current_Ver = Version -- Set the version for reference

IF UNINIT(ErrsInShop.ErrorsRgstrs) THEN
  ErrsInShop.ErrorsRgstrs = 0
ENDIF
IF UNINIT(GMPTRegsDone) THEN
  GMPTRegsDone = FALSE
ENDIF

   WriteLog('Powertrain GMPTPRGS Program started', FALSE)

  IF (GMPTRegsDone = TRUE) THEN -- setup has already been setup
      WriteLog('GMPT Registers Already Setup', FALSE)
    IF ExecSetupAgn('GMPT Registers') THEN -- ask user if they want to setup again
      GMPTRegsDone = FALSE
    ELSE
      WriteLog('GMPT Registers already Complete', FALSE)
      WriteLog('GMPTPRGS Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

 StrtinErs = ErrsInShop.ErrorsRgstrs

 ClrUtltyErrs -- Clear all errors in utility program to be used when done

initGMPTREGS -- setup GMPT specific registers

   -- Get all errors in utility program that was used to any program errors
 ErrsInShop.ErrorsRgstrs = ErrsInShop.ErrorsRgstrs +  (AddUtltyErrs)

 IF (ErrsInShop.ErrorsRgstrs - StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('GMPT Register setup,GMPTPRGS had ' + int2str((ErrsInShop.ErrorsRgstrs-StrtinErs))+' Errors', TRUE)
 ELSE
   WriteLog('GMPT Register setup Program completed', FALSE)
   GMPTRegsDone = TRUE
 ENDIF

   WriteLog(' ',FALSE)

END GMPTREGS
