--
--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--    +
--    Program: gmwizspt.kl
--
--    Description:
--
--    gmwizspt contains questions for configuring GM G4 spot weld applications
--    
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
-------------------------------------------------------------------------------------------------------------
--
--    Language: KAREL
--
--    Source File: 
--
--    Author:
--            Fanuc Robotics North America
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--           2016/04/04   marchaka Program created
--           2016/10/12   marchaka Logic for combination application added
--           2017/01/26   marchaka Add cap changer question
--           2018/04/06   marchaka Modify ima44-Tol text
--           2018/09/14   marchaka Add new cap changer type question
--           2019/08/26   marchaka Add servo nut welder functionality
--           2020/09/29   schoensm Add Aluminum Weld questions to gmwizspt during V8.33P10.
-------------------------------------------------------------------------------------------------------------
PROGRAM gmwizspt
-------------------------------------------------------------------------------------------------------------
%ALPHABETIZE
%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%COMMENT='GM SpotweldWizG4.4'

%INCLUDE gmevrlng -- Required for the language constants
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgbdy  -- Required for the configuration for GM Body Shop variables  
%INCLUDE gmcfgspt  -- Required for the configuration for GM Spot Gun variables
%INCLUDE gm_var    -- GM variables

CONST

Version = '2020-10-16'
%INCLUDE gmcnstnt -- all GM constants for the wizard


VAR
  ans          : INTEGER
  gm_status    : INTEGER
  psve         : INTEGER
  l_response   : INTEGER

  got_rtu      IN SHADOW FROM GMCUSTO  : BOOLEAN   -- Extended axis option loaded
  sgunchng     IN SHADOW FROM GMCUSTO  : BOOLEAN   -- Servo gun tool changer option loaded
  srvo_td_opt  IN SHADOW FROM GMCUSTO  : BOOLEAN --servo tip dresser option loaded on the robot

%INCLUDE klrdutil -- Required for the CLR_STND_SCR routine for Pendant screen
%INCLUDE gmrdutil

ROUTINE set_english FROM GMlang1 -- setup variable for the user prompts
ROUTINE USERPAGE FROM USERPAGE  -- forces user screen to pendant
-------------------------------------------------------------------
ROUTINE srvo_optn
-------------------------------------------------------------------
VAR
  j643_loaded:  BOOLEAN
  h869_loaded:  BOOLEAN

BEGIN

 g_servog_opt = FALSE
 j643_loaded = FALSE
 h869_loaded = FALSE

 IF Chk_Feature('J643') THEN -- is the servo gun option loaded
   j643_loaded = TRUE   
 ENDIF
 IF Chk_Feature('H869') THEN -- is the servo gun option loaded
   H869_loaded = TRUE   
 ENDIF

 IF (j643_loaded) OR (h869_loaded) THEN
  g_servog_opt = TRUE
 ENDIF

END srvo_optn
-------------------------------------------------------------------
ROUTINE rtu_optn
-------------------------------------------------------------------
BEGIN

 got_rtu = FALSE


 IF Chk_Feature('J518') THEN -- is the extended axis option loaded
   got_rtu = TRUE   
 ENDIF

END rtu_optn
-------------------------------------------------------------------
ROUTINE sgunchg_optn
-------------------------------------------------------------------
BEGIN

 sgunchng = FALSE

 IF Chk_Feature('J665') THEN -- is the Fanuc servo gun option loaded
   sgunchng = TRUE   
 ENDIF

END sgunchg_optn
-------------------------------------------------------------------
ROUTINE srvotd_optn
-------------------------------------------------------------------
BEGIN

  IF Chk_Feature('R708') THEN --servo tip dress option loaded
    srvo_td_opt = TRUE
  ELSE  --no servo tip dress option loaded
    srvo_td_opt = FALSE
  ENDIF --servo tip dress option loaded

END srvotd_optn
-------------------------------------------------------------------
ROUTINE spot_app_wiz

BEGIN

 IF ((bshop_proc1 = spotappl) AND (bshop_proc2 = spotappl)) THEN --two weld controllers 
   numwldctrl = 2
 ELSE
   numwldctrl = 1
 ENDIF

  srvo_optn  --check for servo gun option
  rtu_optn   --check for RTU option
  sgunchg_optn --check for servo gun change option
  srvotd_optn  --check for servo tip dress software option
                      
 IF (numwldctrl = 1) THEN --application has one weld controller

   FOR wld_ctrl = 1 TO numwldctrl DO

     --REMOVING EIP questions, GM may want to add them back in (v833p02, sept 2016)
     --REPEAT
       --WRITE(CR,'Welder #1',CR)
       --WRITE('Load Global 4 Standard EIP',CR)
       --WRITE'Parameters?',CR
       --WRITE('1. Yes',CR)
       --WRITE('2. No',CR
       --WRITE('Answer: ')
			  
      --CLR_STND_SCR(gm_status)
      --WRITE(CR,face3_gmdata,' # ',wld_ctrl,CR)
      --WRITE(m8_gmdata,CR)
      --WRITE(m9_gmdata,'?',CR)
      --WRITE('1.',yes_gmdata,CR)
      --WRITE('2.',no_gmdata,CR)
      --WRITE(gdata_ans,'(1-2):')
      --READ(wldapp[wld_ctrl].wld_eip)
    --UNTIL (Verify_Answr(wldapp[wld_ctrl].wld_eip,1,2))
			  
    REPEAT
      --WRITE(CR,'Watersaver #1',CR)
      --WRITE('Load Global 4 Standard',CR)
      --WRITE('Settings?',CR
      --WRITE('1. Yes',CR)
      --WRITE('2. No',CR
      --WRITE('Answer: ')				
			  
      CLR_STND_SCR(gm_status)			  
      WRITE(CR,wfac3_gmdata,' # ',wld_ctrl,CR)
      WRITE(m47_gmdata,CR)
      WRITE(m48_gmdata,'?',CR)
      WRITE('1.',yes_gmdata,CR)
      WRITE('2.',no_gmdata,CR)
      WRITE(gdata_ans,'(1-2):')
      READ(wldapp[wld_ctrl].wld_wtreip)
    UNTIL (Verify_Answr(wldapp[wld_ctrl].wld_wtreip,1,2))
  ENDFOR	
  
  IF (wld1_app = 0) THEN --skip if combo, wld1_app is set in gmwizbsh
			
    REPEAT
      --WRITE(CR,'Select application:',CR)
      --WRITE('Weld Controller:',CR)
      --WRITE('1. Robot Held Gun',CR)
      --WRITE('2. Single Pedestal Gun',CR)
      --WRITE('3. Single Pedestal Dual Gun',CR)
      --WRITE('4. Dual Pedestal Single Gun Each',CR)
      --WRITE('5. Robot Held Gun with Material Handler',CR)
      --WRITE('6. Robot Held Servo Nut Welder', CR)
      --WRITE('Answer: ')

      CLR_STND_SCR(gm_status)
      WRITE(CR,w1wc_gmdata,':',CR)
      WRITE('1.',rhg_gmdata ,CR)
      WRITE('2.',spg_gmdata ,CR)
      WRITE('3.',spdg_gmdata,CR)
      WRITE('4.',dpse_gmdata,CR)
      WRITE('5.',rhmh_gmdata,CR)
      WRITE('6.',snut_gmdata,CR)
      WRITE(gdata_ans,'(1-6):')
      READ(wld1_app)
    UNTIL (Verify_Answr(wld1_app,1,6))	

  ENDIF --skip if combo, wld1_app is set in gmwizbsh
			  
  SELECT wld1_app OF
         
    CASE(wld1app_cg):
      sp_ttl_eq = 1  --one equipment for application
      spttl_eq1gn = 1 --one gun on equipment 1 for the application
      spttl_eq2gn = 0 --no guns on equipment 2 for the application
      sp_ttl_gn = 1  --one gun for this application
		
    CASE(wld1app_pg):
      sp_ttl_eq = 1  --one equipment for application
      spttl_eq1gn = 1 --one gun on equipment 1 for the application
      spttl_eq2gn = 0 --no guns on equipment 2 for the application				
      sp_ttl_gn = 1  --one gun for this application

    CASE(wld1app_spdg):
      sp_ttl_eq = 1  --two equipment for application
      spttl_eq1gn = 2 --one gun on equipment 1 for the application
      spttl_eq2gn = 0 --one gun on equipment 2 for the application				
      sp_ttl_gn = 2  --two guns for this application  

    CASE(wld1app_dpsg):
      sp_ttl_eq = 2  --two equipment for application
      spttl_eq1gn = 1 --one gun on equipment 1 for the application
      spttl_eq2gn = 1 --one gun on equipment 2 for the application				
      sp_ttl_gn = 2  --two guns for this application

    CASE(wld1app_cgmh):
      sp_ttl_eq = 1  --one equipment for application
      spttl_eq1gn = 1 --one gun on equipment 1 for the application
      spttl_eq2gn = 0 --no guns on equipment 2 for the application				
      sp_ttl_gn = 1  --one gun for this application

    CASE(wld1app_snut):
      sp_ttl_eq = 1  --one equipment for application
      spttl_eq1gn = 1 --one gun on equipment 1 for the application
      spttl_eq2gn = 0 --no guns on equipment 2 for the application
      sp_ttl_gn = 1  --one gun for this application
           
  ENDSELECT

  IF (wld1_app <> wld1app_snut) THEN --ask tip dress and cap change questions for all apps but servo nut weld
    IF (srvo_td_opt = TRUE) THEN --servo tip dresser option 
      REPEAT
        --WRITE(CR,'Is a Servo Tip Dresser Used?',CR)
        --WRITE('1. Yes',CR)
        --WRITE('2. No',CR)
        --WRITE('Anser: ')

        CLR_STND_SCR(gm_status)			  
        WRITE(CR,tipyn_srvgm,'?',CR)
        WRITE('1.',yes_gmdata,CR)
        WRITE('2.',no_gmdata,CR)
        WRITE(gdata_ans,'(1-2):')
        READ(servotipdrs)
      UNTIL (Verify_Answr(servotipdrs,1,2))
    ENDIF 

    REPEAT
      --WRITE(CR,'Is a Cap Changer Used?',CR)
      --WRITE('1. Yes',CR)
      --WRITE('2. No',CR)
      --WRITE('Anser: ')

      CLR_STND_SCR(gm_status)			  
      WRITE(CR,gm_capcgr,'?',CR)
      WRITE('1.',yes_gmdata,CR)
      WRITE('2.',no_gmdata,CR)
      WRITE(gdata_ans,'(1-2):')
      READ(cap_chnger)
    UNTIL (Verify_Answr(cap_chnger,1,2))  

    IF (cap_chnger = wizans_yes) THEN --cap changer is being used 
      IF ((servotipdrs = wizans_yes) AND ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh))) THEN --servo tip dresser is being used and there is a carried application
        REPEAT
          --WRITE(CR,'What Type of Cap Changer',CR)
          --WRITE('1. Robot Moving',CR)
          --WRITE('2. Robot Stationary',CR)
          --WRITE('3. Servo Combo Cap Changer/Dresser',CR)
          --WRITE('Answer: ')
          CLR_STND_SCR(gm_status)			  
          WRITE(CR,gm_capcgr1,'?',CR)
          WRITE('1.',gm_capcgr2,CR)
          WRITE('2.',gm_capcgr3,CR)
          WRITE('3.',gm_capcgr4,CR)  
          WRITE(gdata_ans,'(1-3):')
          READ (cap_chngtype)
        UNTIL (Verify_Answr(cap_chngtype,1,3))
      ELSE --no servo tip dresser is being used OR it is a pedestal applicaiton
        REPEAT
          --WRITE(CR,'What Type of Cap Changer',CR)
          --WRITE('1. Robot Moving',CR)
          --WRITE('2. Robot Stationary',CR)
          --WRITE('Answer: ')
          CLR_STND_SCR(gm_status)			  
          WRITE(CR,gm_capcgr1,'?',CR)
          WRITE('1.',gm_capcgr2,CR)
          WRITE('2.',gm_capcgr3,CR)
          WRITE(gdata_ans,'(1-2):')
          READ (cap_chngtype)
        UNTIL (Verify_Answr(cap_chngtype,1,2))
      ENDIF   --is servo dresser being used  
    ENDIF --cap changer is not being used
  ENDIF --not a servo nut weld application
			
  sp_eqnum = 1       --initialize equipment setup for wizard to equipment 1
  sp_gnnum = 1       --initialize gun setup for wizard questions to gun 1	
  sp_eqgn_num = spttl_eq1gn  --initialize guns per equipment tracker			

  FOR sp_eqnum = 1 TO sp_ttl_eq DO
    FOR sp_gnnum = 1 TO sp_eqgn_num DO 			
	
      IF (wld1_app <> wld1app_snut) THEN --if not a servo nut welder, ask if servo bun

        REPEAT
          --WRITE(CR,'GUN # ',sp_gnnum,CR)
          --WRITE('Servo gun Setup',CR)
          --WRITE('Is gun #',sp_gnnum,' on equipment# ',sp_eqnum,CR)
          --WRITE('a servo gun?',CR)
          --WRITE('1. Yes',CR)
          --WRITE('2. No'CR)
          --WRITE('Answer: ')
			
          CLR_STND_SCR(gm_status)
          WRITE(CR,'GUN # ',sp_gnnum,CR)
          WRITE(spset_gmdata,CR)
          WRITE(isgun_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,CR)
          WRITE(srv_gmdata,'?',CR)
          WRITE('1.',yes_gmdata,CR)
          WRITE('2.',no_gmdata,CR)
          WRITE(gdata_ans,': ')
          READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn)
        UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn,1,2))
        
     ELSE --servo nut weld 
       spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_yes --always a servo gun application
     ENDIF --servo nut welder?
      			  
     IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_no) THEN  --air gun
       REPEAT
	  --WRITE(CR,'Air Gun # ',sp_gnnum ,' on Equip # ', sp_eqnum,'?',CR)	
          --WRITE('Valve Type Euro Double, or',CR)
          --WRITE('North American Valves?',CR)
          --WRITE('1. Euro Double Acting Valves',CR)
          --WRITE('2. North American Valves',CR)
          --WRITE('Answer: ')
				
          CLR_STND_SCR(gm_status)
          WRITE(CR,'Air Gun # ',sp_gnnum,' on Equip # ',sp_eqnum,'?',CR)	
          WRITE(vlv_type,CR)
          WRITE(NA_gmdata,'?',CR)
          WRITE('1. ',vlv_type ,CR)
          WRITE('2. ',NA_gmdata,CR)
          WRITE(gdata_ans,': ')
          READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv)  
	UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv,1,2))		  
				
	IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv = ag_NA_vlv) THEN  --North American Valve
          REPEAT
            --WRITE(CR,'Is the gun Dense Pack ',CR)	
            --WRITE('Intergrated type?',CR
            --WRITE('On gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR
            --WRITE('1. Yes',CR)
            --WRITE('2. No',CR)
            --WRITE('Answer: ')
					
	    CLR_STND_SCR(gm_status)
	    WRITE(CR,int_gmdata,CR)	
            WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',CR) 
            WRITE('1.',yes_gmdata,CR)
            WRITE('2.',no_gmdata,CR)
            WRITE(gdata_ans,'(1-2):')
            READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_denspk)
	  UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_denspk,1,2))

          REPEAT
            --WRITE(CR,'Do you want a Retract Stroke',CR)
            --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR)
            --WRITE('1. Yes',CR)
            --WRITE('2. No',CR)
            --WRITE('Answer: ')

	    CLR_STND_SCR(gm_status)
            WRITE(CR,ret_gmdata,CR)
            WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
            WRITE('1.',yes_gmdata,CR)
            WRITE('2.',no_gmdata,CR)
            WRITE(gdata_ans,'(1-2):')
            READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_retstrk)
          UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_retstrk,1,2))		
				  
	  REPEAT
            --WRITE(CR'Do you want Gun Open Detect',CR
            --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR
            --WRITE('1. Yes',CR)
            --WRITE('2. No',CR)
            --WRITE('Answer: ')

            CLR_STND_SCR(gm_status)
            WRITE(cr,gnop_gmdata,CR)
            WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',CR)
            WRITE('1.',yes_gmdata,CR)
            WRITE('2.',no_gmdata,CR)
            WRITE(gdata_ans,'(1-2):')
            READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_opn)
          UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_opn,1,2))	
				  
          REPEAT
            --WRITE(CR,'Do you want Retract Open Detect',CR)
            --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR)
            --WRITE('1. Yes',CR
            --WRITE('2. No',CR
            --WRITE('Answer: ')

            CLR_STND_SCR(gm_status)
            WRITE(CR,rtop_gmdata,CR)
            WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',CR)
            WRITE('1.',yes_gmdata,CR)
            WRITE('2.',no_gmdata,CR)
            WRITE(gdata_ans,'(1-2):')
            READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_rtrc)
	  UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_rtrc,1,2))	

          IF ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh)) THEN --carried app

            REPEAT
              --WRITE((cr,'WARNING: Do not enable Equalization Pressure',cr)             
              --WRITE('if pedestal mounted gun.',cr,cr)     
              --WRITE('Do you want Equalization Pressure',cr)
              --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',cr,cr)
              --WRITE('1. Yes',cr)
              --WRITE('2. No',cr,cr)
              --WRITE('Answer: ')

              CLR_STND_SCR(gm_status)
              WRITE(cr,'WARNING... ',cr)             
              WRITE(pdeq_gmdata,cr,cr)     
              WRITE(eqprs_gmdata,cr)
              WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',cr,cr)
              WRITE('1.',yes_gmdata,cr)
              WRITE('2.',no_gmdata,cr,cr)
              WRITE(gdata_ans,'(1-2):')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss)              
            UNTIL(Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss,1,2))

          ENDIF --carried app		
				  
          REPEAT
            --WRITE(CR'Do you want Soft Touch Gun',CR)
            --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR
            --WRITE('1. Yes',CR)
            --WRITE('2. No',CR)
            --WRITE('Answer: ')

           CLR_STND_SCR(gm_status)
           WRITE(CR,soft_gmdata,CR)
           WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
           WRITE('1.',yes_gmdata,CR)
           WRITE('2.',no_gmdata,CR)
           WRITE(gdata_ans,'(1-2):')
           READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_soft_tch)
	 UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_soft_tch,1,2))		   
       ENDIF --North American valve
     ENDIF --Air gun
			 
     IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_yes) THEN  --servo gun
       REPEAT
         --WRITE('Would you like to setup Axis data  ',CR)
         --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,' ?',CR)
         --WRITE('WARNING SELECTING YES WILL REQUIRE ',CR)
         --WRITE('USER TO AUTOTUNE GUN',CR)
         --WRITE('1 = YES, 2 = NO')

         CLR_STND_SCR(gm_status)
	 WRITE(CR,'SERVO GUN AXIS DATA SETUP',CR)
         WRITE('GUN # ',sp_gnnum,CR)
         WRITE(axis_data,CR)
         WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
         WRITE(atune_gmdata,CR)
         WRITE('1.',yes_gmdata,CR)
         WRITE('2.',no_gmdata,CR)
         WRITE(gdata_ans,'(1-2):')
         READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup)
       UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup,1,2))	

       IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup = wizans_yes) THEN --setup axis data
         REPEAT
           --Select Motor Type from List
 	   --Motor list: For Gun # On Equipment #
      
           CLR_STND_SCR(gm_status)
 	   WRITE(CR,motor_gmdata,forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
           WRITE('1 = Tol SW44',CR)
           WRITE('2 = Tol HT23',CR)
           WRITE('3 = GSWA 201/202-ARO3G',CR)
           WRITE('4 = GSWA 101-Tol',CR)
           WRITE('5 = GSWA 102/103/202/203/IMA44-Tol',CR)
           WRITE('6 = GSWA 201/301/302/IMA33-Tol',CR)
           WRITE('7 = FANUC ACa8/4000iS-40A/80A',CR)
           WRITE(gdata_ans,':')
           READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr)
         UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr,1,7))		 
			   
         IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr = fac_4000) THEN  --FANUC ACa8/4000iS-40/80A
           REPEAT
             --Motor list: For Gun # On Equipment #
			   
	     CLR_STND_SCR(gm_status)
             WRITE (CR,motor_gmdata,forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
             WRITE (CR,'1 = FANUC ACa8/4000iS-40A',CR)
             WRITE ('2 = FANUC ACa8/4000iS-80A',CR)
             WRITE(gdata_ans,': ')
             READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_mot2)
	   UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_mot2,1,2))		   

         ENDIF

         REPEAT
           -- *********************************************************  
           -- Ask for Max Pressure?
           -- Must find how to set max pressure
           -- 1 pound = .45359237 kg
           -- 1 pound = 4.4482216 Newton(s)
           -- *********************************************************

           --WRITE('Enter Max Pressure from GUN Tag',CR)
           --WRITE('For gun#',p_gun,' on equipment#',p_equip,CR)
           --WRITE('Pressure units (nwt)',CR)
           --WRITE('Answer: ')
			   
           CLR_STND_SCR(gm_status)
           WRITE(CR,'GUN # ',sp_gnnum,CR)
           WRITE(press_gmdata,CR)
           WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
           WRITE('Units (nwt)',CR)
           WRITE(gdata_ans,':')
           READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr)
         UNTIL((spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr > 0.0) AND (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr < 10000.0)) 
         spotctrl[sp_eqnum].spot_gun[sp_gnnum].sg_maxpr = spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr --store max pressure
			 
         REPEAT
           --WRITE(CR,'What type of Servo gun is use',CR)
           --WRITE('For gun#',sp_gnnum,' on equipment#',sp_eqnum,CR)
           --WRITE('1. C gun type',CR)
           --WRITE('2. X gun type')
  
           CLR_STND_SCR(gm_status)
           WRITE(CR,'GUN # ',sp_gnnum,CR)
           WRITE(srvtp_gmdata,CR)
           WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
           WRITE('1. C - Gun ',CR)
           WRITE('2. X - Gun ',CR)
           WRITE(gdata_ans,'(1-2):')
           READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_guntyp)
         UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_guntyp,1,2))	
         
         --V8.33P10 9-29-2020 schoensm added Aluminum Welding Question to Wizard
         REPEAT
           --WRITE(CR,'GUN # ',sp_gnnum,CR)
           --WRITE('Spot Setup',CR)
           --WRITE('Is gun #',sp_gnnum,' on equipment# ',sp_eqnum,CR)
           --WRITE('Aluminum-Welding?',CR)
           --WRITE('1. Yes',CR)
           --WRITE('2. No'CR)
           --WRITE('Answer: ')
			
           CLR_STND_SCR(gm_status)
           WRITE(CR,'GUN # ',sp_gnnum,CR)
           WRITE(spset_gmdata,CR)
           WRITE(isgun_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,CR)
           WRITE(alum_gmdata,'?',CR)
           WRITE('1.',yes_gmdata,CR)
           WRITE('2.',no_gmdata,CR)
           WRITE(gdata_ans,': ')
           READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ispare3)
         UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ispare3,1,2))

         --REPEAT	--remove, setup code will now determine based on application what amplifier is needed
           --WRITE(CR,'What AMP# is the motor',CR)
           --WRITE('For gun#',p_gun,' on equipment#',p_equip,CR)
           --WRITE('Connected to (AMP 2 or 3)?',CR
           --WRITE('Answer: ')

           --CLR_STND_SCR(gm_status)
           --WRITE(CR,'GUN # ',sp_gnnum,CR)
           --WRITE(amp_gmdata,CR)
           --WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
           --WRITE('Connected to (AMP 2 or 3)?',CR)
           --WRITE(gdata_ans,': ')
           --READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ampno)
         --UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ampno,2,3))	
       ENDIF --setup axis data	 
 
       REPEAT 
	 --WRITE(CR,'PRESS/BKUP/DISTANCE DATA SETUP',CR)
         --WRITE('Would you like to set the Pressure',CR)
	 --WRITE('Backup & Start Distance tables',CR)
	 --WRITE('For Gun #1 to default?')
			  
         CLR_STND_SCR(gm_status)
         WRITE(CR,'PRESS/BKUP/DISTANCE DATA SETUP',CR)
         WRITE(def_gmdata ,CR)
         WRITE(def2_gmdata,CR) 
         WRITE(forgn_gmdata,sp_gnnum,todef_gmdata,' ?',CR)
         WRITE('1.',yes_gmdata,CR)
         WRITE('2.',no_gmdata,CR)
         WRITE(gdata_ans,'(1-2):')
         READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_prs_set)
       UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_prs_set,1,2))		 
		  
     ENDIF  --Servo gun setup
  
     IF (wld1_app <> wld1app_snut) THEN --ask for all applications but servo nut weld		  
       REPEAT
         --WRITE(CR,'GUN #',sp_gnnum,CR)
         --WRITE('Is Tip Dresser Used?',CR)
         --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?',CR)
         --WRITE('1. Yes',CR)
         --WRITE('2. No',CR)
         --WRITE('Answer: ') 

         CLR_STND_SCR(gm_status)
         WRITE(CR,'GUN # ',sp_gnnum,CR)
         WRITE(tipyn_gmdata,CR)
         WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
         WRITE('1.',yes_gmdata,CR)
         WRITE('2.',no_gmdata,CR)
         WRITE(gdata_ans,'(1-2):')
         READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td)
       UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td,1,2))	   
		
       IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td = wizans_yes) THEN --tip dress is being used 
       
         IF ((wld1_app = wld1app_cg) OR (wld1_app = wld1app_cgmh)) THEN --carried gun
           REPEAT
             --WRITE(CR, 'GUN #',sp_gnnum,CR)
             --WRITE('Is Dress Verification Used',CR)
             --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?',CR)
             --WRITE('1. Yes',CR)
             --WRITE('2. No',CR)
             --WRITE('Answer: ')

             CLR_STND_SCR(gm_status)
             WRITE(CR,'GUN # ',sp_gnnum,CR)
             WRITE(dressverify,CR)
             WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
             WRITE('1.',yes_gmdata,CR)
             WRITE('2.',no_gmdata,CR)
             WRITE(gdata_ans,'(1-2):')
             READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg)
           UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg,1,2))	
         ENDIF --carried gun

         IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_yes) THEN --can select a servo dresser
           IF (srvo_td_opt = TRUE) THEN --servo tip dresser option
             --REPEAT  --individualized question removed.  question now asked at beginning.  set Karel variables here 
                       --if gun has a tip dresser
             --WRITE(CR,'GUN #',sp_gnnum,CR)
             --(WRITE'Is Servo Tip Dresser Used?',CR)
             --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?',CR
             --WRITE('1. Yes',CR)
             --WRITE('2. No',CR)
             --WRITE('Answer: ') 
			
	     --CLR_STND_SCR(gm_status)
             --WRITE(CR,'GUN # ',sp_gnnum,CR)
             --WRITE(tipyn_srvgm,CR)
             --WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
             --WRITE('1.',yes_gmdata,CR)
             --WRITE('2.',no_gmdata,CR)
             --WRITE(gdata_ans,'(1-2):')
             --READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td)
             --UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td,1,2))	

             IF (servotipdrs = wizans_yes) THEN --servo tip dresser is used
               spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td = wizans_yes
             ENDIF --servo tip dresser is used
           ENDIF --servo tip dresser option
         ENDIF--servo tip dresser can be used	 
     
         IF ((wld1_app = wld1app_pg) OR (wld1_app = wld1app_spdg) OR (wld1_app = wld1app_dpsg)) THEN --robot has pedestal application
	   REPEAT     
             --WRITE(CR,'Do Tip Dresser dump(s) have',CR)
             --WROTE('Safety Locking pins',CR)
             --WRITE('1. Yes',CR)
             --WRITE('2. No',CR)
             --WRITE('Answer 1-2: ')

             CLR_STND_SCR(gm_status)
             WRITE(CR,dump_pins,'?',CR)
             WRITE(dump_pins2,CR)
             WRITE('1.',yes_gmdata,CR)
             WRITE('2.',no_gmdata,CR)
             WRITE(gdata_ans,'(1-2):')
             READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp)
	   UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp,1,2))		   
         ENDIF --robot is pedestal application
       ENDIF  --tip dresser is being used
     ENDIF --not a servo nut weld application
	  
     REPEAT
       --WRITE(CR,'GUN # ',sp_gnnum,CR)
       --WRITE('Do you want Transformer Over Temp',CR)
       --WRITE('checking used for gun# ',sp_gnnum,' on equipment# ',sp_eqnum,'?',CR)
       --WRITE('1. Yes',CR)
       --WRITE('2. No',CR)

       CLR_STND_SCR(gm_status)	
       WRITE (CR,'GUN # ',sp_gnnum,CR)
       WRITE(xfrm_data,cr)
       WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
       WRITE('1.',yes_gmdata,CR)
       WRITE('2.',no_gmdata,CR)
       WRITE(gdata_ans,'(1-2):')
       READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_xfot)
     UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_xfot,1,2))	
		  
   ENDFOR  --Gun configuration for equipment complete
		 
   IF (spttl_eq2gn = 2) THEN --reinitialize variables for equipment 2 gun setup
     sp_eqgn_num = sp_ttl_gn
   ENDIF
		 		 
  ENDFOR  --Equipment and gun configuration for one weld controller complete  
		
  ENDIF --One weld controller setup  		  
     
  IF (numwldctrl = 2) THEN -- Two weld controller configuration

    FOR wld_ctrl = 1 TO numwldctrl DO

      --REMOVE EIP welder question, GM may want to add back in (v833p02 sept 2016)
      --REPEAT
	--WRITE(CR,'Welder #2',CR)
	--WRITE('Load Global4 Standard EIP',CR)
        --WRITE('Parameters?',CR)
        --WRITE('1. Yes',CR)
        --WRITE('2. No',CR
        --WRITE('Answer: ')
			  
	--CLR_STND_SCR(gm_status)
        --WRITE(CR,face3_gmdata,' # ',wld_ctrl,CR)
        --WRITE(m8_gmdata,CR)
        --WRITE(m9_gmdata,'?',CR)
        --WRITE('1.', yes_gmdata,CR)
        --WRITE('2.', no_gmdata,CR)
        --WRITE(gdata_ans,'(1-2):')
        --READ(wldapp[wld_ctrl].wld_eip)
      --UNTIL (Verify_Answr(wldapp[wld_ctrl].wld_eip,1,2))		
			  
      REPEAT
        --WRITE(CR'Watersaver #2',CR)
	--WRITE('Load Global4 Standard EIP',CR)
        --WRITE('Parameters?',CR)
        --WRITE('1. Yes',CR)
        --WRITE('2. No',CR)
        --WRITE('Answer: ')				
			  
	CLR_STND_SCR(gm_status)			  
	WRITE (CR,wfac3_gmdata,' # ',wld_ctrl,CR)
        WRITE(m47_gmdata,CR)
        WRITE(m48_gmdata,'?',CR)
        WRITE('1.', yes_gmdata,CR)
        WRITE('2.', no_gmdata,CR)
        WRITE(gdata_ans,'(1-2):')
        READ(wldapp[wld_ctrl].wld_wtreip)
      UNTIL (Verify_Answr(wldapp[wld_ctrl].wld_wtreip,1,2))		

    ENDFOR	  
            
    REPEAT
      --WRITE(CR,'Select application:',CR)
      --WRITE('2 Weld Controller:',CR)
      --WRITE('1. Single Pedestal Dual Gun',CR)
      --WRITE('2. Dual Pedestal Single Gun Each',CR
      --(WRITE'3. Robot Held Gun & Pedestal Gun',CR)
      --WRITE('Answer: ')
			
      CLR_STND_SCR(gm_status)
      WRITE(CR,w2wc_gmdata,CR)
      WRITE('1.',spdg_gmdata,CR)
      WRITE('2.',dpse_gmdata,CR)
      WRITE('3.',rgpg_gmdata,CR)
      WRITE(gdata_ans,'(1-3):')
      READ(wld2_app)
    UNTIL (Verify_Answr(wld2_app,1,3))	
  		  
    SELECT wld2_app OF
          
      CASE(wld2app_spdg):
	sp_ttl_eq = 1  --one equipment for application
        spttl_eq1gn = 2 --two guns on equipment 1 for the application
	spttl_eq2gn = 0 --one gun on equipment 2 for the application
	sp_ttl_gn = 2  --two guns for this application
				
      CASE(wld2app_dpsg):
	sp_ttl_eq = 2  --twp equipment for application
	spttl_eq1gn = 1 --one gun on equipment 1 for the application
	spttl_eq2gn = 1 --one gun on equipment 2 for the application				
	sp_ttl_gn = 2  --two guns for this application

      CASE(wld2app_cgpg):
	sp_ttl_eq = 2  --two equipment for application
	spttl_eq1gn = 1 --one gun on equipment 1 for the application
	spttl_eq2gn = 1 --one gun on equipment 2 for the application				
	sp_ttl_gn = 2  --two guns for this application

    ENDSELECT

    IF (srvo_td_opt = TRUE) THEN --servo tip dresser option 
      REPEAT
        --WRITE(CR,'Is a Servo Tip Dresser Used?',CR)
        --WRITE('1. Yes',CR)
        --WRITE('2. No',CR)
        --WRITE('Anser: ')

        CLR_STND_SCR(gm_status)			  
        WRITE(CR,tipyn_srvgm,'?',CR)
        WRITE('1.',yes_gmdata,CR)
        WRITE('2.',no_gmdata,CR)
        WRITE(gdata_ans,'(1-2):')
        READ(servotipdrs)
      UNTIL (Verify_Answr(servotipdrs,1,2))
    ENDIF  --servo tip dresser option	

    REPEAT
      --WRITE(CR,'Is a Cap Changer Used?',CR)
      --WRITE('1. Yes',CR)
      --WRITE('2. No',CR)
      --WRITE('Anser: ')

      CLR_STND_SCR(gm_status)			  
      WRITE(CR,gm_capcgr,'?',CR)
      WRITE('1.',yes_gmdata,CR)
      WRITE('2.',no_gmdata,CR)
      WRITE(gdata_ans,'(1-2):')
      READ(cap_chnger)
    UNTIL (Verify_Answr(cap_chnger,1,2)) 

    IF (cap_chnger = wizans_yes) THEN --cap changer is being used 
      IF (servotipdrs = wizans_yes) AND (wld2_app = wld2app_cgpg) THEN --servo tip dresser is being used and there is a carried applicaiton   
        REPEAT
          --WRITE(CR,'What Type of Cap Changer',CR)
          --WRITE('1. Robot Moving',CR)
          --WRITE('2. Robot Stationary',CR)
          --WRITE('3. Servo Combo Cap Changer/Dresser',CR)
          --WRITE('Answer: ')
          CLR_STND_SCR(gm_status)			  
          WRITE(CR,gm_capcgr1,'?',CR)
          WRITE('1.',gm_capcgr2,CR)
          WRITE('2.',gm_capcgr3,CR)
          WRITE('3.',gm_capcgr4,CR)  
          WRITE(gdata_ans,'(1-3):')
          READ (cap_chngtype)
        UNTIL (Verify_Answr(cap_chngtype,1,3))
      ELSE --no servo tip dresser is being used and there is a carried application
        REPEAT
          --WRITE(CR,'What Type of Cap Changer',CR)
          --WRITE('1. Robot Moving',CR)
          --WRITE('2. Robot Stationary',CR)
          --WRITE('Answer: ')
          CLR_STND_SCR(gm_status)			  
          WRITE(CR,gm_capcgr1,'?',CR)
          WRITE('1.',gm_capcgr2,CR)
          WRITE('2.',gm_capcgr3,CR)
          WRITE(gdata_ans,'(1-2):')
          READ (cap_chngtype)
        UNTIL (Verify_Answr(cap_chngtype,1,2))
      ENDIF --is the servo dresser being used    
  ENDIF --cap changer is not being used
		
    sp_eqnum = 1       --initialize equipment setup for wizard to equipment 1
    sp_gnnum = 1       --initialize gun setup for wizard questions to gun 1	
    sp_eqgn_num = spttl_eq1gn  --initialize guns per equipment tracker			

    FOR sp_eqnum = 1 TO sp_ttl_eq DO
      FOR sp_gnnum = 1 TO sp_eqgn_num DO 

	 REPEAT
    	   --WRITE(CR,'GUN # ',sp_gnnum,CR)
           --WRITE('Servo gun Setup',CR)
           --WRITE('Is gun #',sp_gnnum,' on equipment# ',sp_eqnum,CR)
           --WRITE('a servo gun?',CR
           --WRITE('1. Yes',CR)
           --WRITE('2. No',CR)
           --WRITE('Answer: ')
			
    	   CLR_STND_SCR(gm_status)
           WRITE(CR,'GUN # ',sp_gnnum,CR)
           WRITE(spset_gmdata,CR)
           WRITE(isgun_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,CR)
           WRITE(srv_gmdata,'?',CR)	
           WRITE('1.',yes_gmdata,CR)
           WRITE('2.',no_gmdata,CR)
           WRITE(gdata_ans,': ')
           READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn)
	 UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn,1,2))
			  
	 IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_no) THEN  --air gun
	   REPEAT
	     --WRITE(CR,'Air Gun # ',sp_gnnum ,' on Equip # ', sp_eqnum,'?',CR)	
             --WRITE('Valve Type Euro Double, or',CR)
             --WRITE('North American Valves?',CR)
             --WRITE('1. Euro Double Acting Valves',CR)
             --WRITE('2. North American Valves',CR)
             --WRITE('Answer: ')
				
             CLR_STND_SCR(gm_status)
             WRITE(CR,'Air Gun # ',sp_gnnum,' on Equip # ',sp_eqnum,'?',CR)	
             WRITE(vlv_type,CR)
             WRITE(NA_gmdata,'?',CR)
             WRITE('1. ',vlv_type ,CR)
             WRITE('2. ',NA_gmdata,CR)
             WRITE(gdata_ans,': ')
             READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv) 
	   UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv,1,2))	

	   IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_vlv = ag_NA_vlv) THEN  --North American Valve
             REPEAT
               --WRITE(CR,'Is the gun Dense Pack ',CR)	
               --WRITE('Intergrated type?',CR)
               --WRITE('On gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR)
               --WRITE('1. Yes',cr)
               --WRITE('2. No',cr,cr)
               --WRITE('Answer: ')
					
               CLR_STND_SCR(gm_status)
	       WRITE(CR,int_gmdata,CR)	
               WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',CR)
               WRITE('1.',yes_gmdata,CR)
               WRITE('2.',no_gmdata,CR)
               WRITE(gdata_ans,'(1-2):')
               READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_denspk)
	     UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_denspk,1,2))
				  
	     REPEAT
               --WRITE(CR,'Do you want a Retract Stroke',CR)
               --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR)
               --WRITE('1. Yes',CR)
               --WRITE('2. No',CR)
               --WRITE('Answer: ')

	       CLR_STND_SCR(gm_status)
               WRITE(CR,ret_gmdata,CR)
               WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
               WRITE('1.',yes_gmdata,CR)
               WRITE('2.',no_gmdata,CR)
               WRITE(gdata_ans,'(1-2):')
               READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_retstrk)
	     UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_retstrk,1,2))			  
				  
	     REPEAT
               --WRITE(CR'Do you want Gun Open Detect',CR)
               --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR)
               --WRITE('1. Yes',CR)
               --WRITE('2. No',CR)
               --WRITE('Answer: ')

               CLR_STND_SCR(gm_status)
               WRITE(CR,gnop_gmdata,CR)
               WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',CR)
               WRITE('1.',yes_gmdata,CR)
               WRITE('2.',no_gmdata,CR)
               WRITE(gdata_ans,'(1-2):')
               READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_opn)
	     UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_opn,1,2))				  		  
	     REPEAT
               --WRITE(CR,'Do you want Retract Open Detect',CR)
               --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR)
               --WRITE('1. Yes',CR)
               --WRITE('2. No'CR)
               --WRITE('Answer: ')

	       CLR_STND_SCR(gm_status)
               WRITE(CR,rtop_gmdata,CR)
               WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',CR)
               WRITE('1.',yes_gmdata,CR)
               WRITE('2.',no_gmdata,CR)
               WRITE(gdata_ans,'(1-2):')
               READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_rtrc)
	     UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_gun_rtrc,1,2))

          IF ((wld2_app = wld2app_cgpg) AND (sp_eqnum = 1)) THEN --carried app

            REPEAT
              --WRITE((cr,'WARNING: Do not enable Equalization Pressure',cr)             
              --WRITE('if pedestal mounted gun.',cr,cr)     
              --WRITE('Do you want Equalization Pressure',cr)
              --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',cr,cr)
              --WRITE('1. Yes',cr)
              --WRITE('2. No',cr,cr)
              --WRITE('Answer: ')

              CLR_STND_SCR(gm_status)
              WRITE(cr,'WARNING... ',cr)             
              WRITE(pdeq_gmdata,cr,cr)     
              WRITE(eqprs_gmdata,cr)
              WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,' ?',cr,cr)
              WRITE('1.',yes_gmdata,cr)
              WRITE('2.',no_gmdata,cr,cr)
              WRITE(gdata_ans,'(1-2):')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss)              
            UNTIL(Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_eql_prss,1,2))

          ENDIF --carried app
				  		  
            REPEAT
              --WRITE(CR,'Do you want Soft Touch Gun',CR)
              --WRITE('for gun',sp_gnnum,' on equipment',sp_eqnum,'?',CR)
              --WRITE('1. Yes',CR)
              --WRITE('2. No',CR)
              --WRITE('Answer: ')

	      CLR_STND_SCR(gm_status)
              WRITE(CR,soft_gmdata,CR)
              WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
              WRITE('1.',yes_gmdata,CR)
              WRITE('2.',no_gmdata,CR)
              WRITE(gdata_ans,'(1-2):')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_soft_tch)
	    UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ag_soft_tch,1,2))			  
          ENDIF --North American valve
    	ENDIF --Air gun

	IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_yes) THEN  --servo gun
	  REPEAT
            --WRITE(CR,'Would you like to setup Axis data  ',CR)
            --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,' ?',CR)
            --WRITE('WARNING SELECTING YES WILL REQUIRE ',CR)
            --WRITE('USER TO AUTOTUNE GUN',CR)
            --WRITE('1 = YES, 2 = NO')
			 
            CLR_STND_SCR(gm_status)
	    WRITE(CR,'SERVO GUN AXIS DATA SETUP',CR)
            WRITE('GUN # ',sp_gnnum,CR)
            WRITE(axis_data,CR)
            WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
            WRITE(atune_gmdata,CR)
            WRITE('1.',yes_gmdata,CR)
            WRITE('2.',no_gmdata,CR)
            READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup)
	  UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup,1,2))		

          IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ax_setup = wizans_yes) THEN	--setup axis
            REPEAT
              --Select Motor Type from List
	      --Motor list: For Gun #1 On Equipment #1
      
              CLR_STND_SCR(gm_status)
	      WRITE(CR,motor_gmdata,forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
              WRITE('1 = Tol SW44',CR)
              WRITE('2 = Tol HT23',CR)
              WRITE('3 = GSWA 201/202-ARO3G',CR)
              WRITE('4 = GSWA 101-Tol',CR)
              WRITE('5 = GSWA 102/103/202/203/IMA44-Tol',CR)
              WRITE('6 = GSWA 201/301/302/IMA33-Tol',CR)
              WRITE('7 = FANUC ACa8/4000iS-40A/80A',CR)
              WRITE(gdata_ans,':')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr)
	    UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr,1,7))				
			   
	    IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_motr = 7) THEN  --FANUC ACa8/4000iS-40/80A
	      REPEAT
	        --Motor list: For Gun #1 On Equipment #1
				   
	        CLR_STND_SCR(gm_status)
                WRITE(CR,motor_gmdata,forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
                WRITE (CR,'1 = FANUC ACa8/4000iS-40A',CR)
                WRITE('2 = FANUC ACa8/4000iS-80A',CR)
                WRITE(gdata_ans,': ')
                READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_mot2)
	      UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_mot2,1,2))			  
	    ENDIF
		   
            REPEAT
              -- *********************************************************  
              -- Ask for Max Pressure?
              -- Must find how to set max pressure
              -- 1 pound = .45359237 kg
              -- 1 pound = 4.4482216 Newton(s)
              -- *********************************************************

              --WRITE(CR,'Enter Max Pressure from GUN Tag',CR)
              --WRITE('For gun#',p_gun,' on equipment#',p_equip,CR)
              --WRITE('Pressure units (nwt)',CR)
              --WRITE('Answer: ')
			   
              CLR_STND_SCR(gm_status)
              WRITE(CR,'GUN # ',sp_gnnum,CR)
              WRITE(press_gmdata,CR)
              WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
              WRITE('Units (nwt)',CR)
              WRITE(gdata_ans,':')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr)
            UNTIL((spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr > 0.0) AND (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr < 10000.0)) 
            spotctrl[sp_eqnum].spot_gun[sp_gnnum].sg_maxpr = spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_maxpr --store max pressure
			 
	    REPEAT
	      --WRITE(CR,'What type of Servo gun is use',CR)
              --WRITE('For gun#',sp_gnnum,' on equipment#',sp_eqnum,CR)
              --WRITE('1. C gun type',CR)
              --WRITE('2. X gun type')
  
              CLR_STND_SCR(gm_status)
              WRITE(CR,'GUN # ',sp_gnnum,CR)
              WRITE(srvtp_gmdata,cr)
              WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
              WRITE('1. C - Gun ',CR)
              WRITE('2. X - Gun ',CR)
              WRITE(gdata_ans,'(1-2):')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_guntyp)
	    UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_guntyp,1,2))
	    
            --V8.33P10 9-29-2020 schoensm added Aluminum Welding Question to Wizard
            REPEAT
              --WRITE(CR,'GUN # ',sp_gnnum,CR)
              --WRITE('Spot Setup',CR)
              --WRITE('Is gun #',sp_gnnum,' on equipment# ',sp_eqnum,CR)
              --WRITE('Aluminum-Welding?',CR)
              --WRITE('1. Yes',CR)
              --WRITE('2. No'CR)
              --WRITE('Answer: ')
			
              CLR_STND_SCR(gm_status)
              WRITE(CR,'GUN # ',sp_gnnum,CR)
              WRITE(spset_gmdata,CR)
              WRITE(isgun_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,CR)
              WRITE(alum_gmdata,'?',CR)
              WRITE('1.',yes_gmdata,CR)
              WRITE('2.',no_gmdata,CR)
              WRITE(gdata_ans,': ')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ispare3)
            UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].ispare3,1,2))		  

            --REPEAT  --remove, setup code will now determine based on application what amplifier is needed
              --WRITE(CR'What AMP# is the motor',CR)
              --WRITE('For gun#',p_gun,' on equipment#',p_equip,CR)
              --WRITE('Connected to (AMP 2 or 3)?',CR)
              --WRITE('Answer: ')

              --CLR_STND_SCR(gm_status)
              --WRITE(CR,'GUN # ',sp_gnnum,CR)
              --WRITE(amp_gmdata,CR)
              --WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
              --WRITE('Connected to (AMP 2 or 3)?',CR)
              --WRITE(gdata_ans,': ')
              --READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ampno)
            --UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_ampno,2,3))
          ENDIF --setup axis data			
 
          REPEAT 
	    --WRITE(CR,'PRESS/BKUP/DISTANCE DATA SETUP',CR)
	    --WRITE('Would you like to set the Pressure',CR)
	    --WRITE('Backup & Start Distance tables',CR)
	    --WRITE('For Gun #1 to default?',CR)
	    --WRITE('Asnwer 1 = yes, 2 = No)
			   
            CLR_STND_SCR(gm_status)
            WRITE(CR,'PRESS/BKUP/DISTANCE DATA SETUP',CR)
            WRITE(def_gmdata,CR)
            WRITE(def2_gmdata,CR) 
            WRITE(forgn_gmdata,sp_gnnum,todef_gmdata,' ?',CR)
            WRITE('1.',yes_gmdata,CR)
            WRITE('2.',no_gmdata,CR)
            WRITE(gdata_ans,'(1-2):')
            READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_prs_set)
	  UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sg_prs_set,1,2))				
		  
	ENDIF  --Servo gun setup
		  
	 REPEAT
          --WRITE(CR,'GUN #',sp_gnnum,CR)
          --WRITE('Is Tip Dresser Used?',CR)
          --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?',CR)
          --WRITE('1. Yes',CR)
          --WRITE('2. No',CR)
          --WRITE('Answer: ') 

	  CLR_STND_SCR(gm_status)
          WRITE (CR,'GUN # ',sp_gnnum,CR)
          WRITE(tipyn_gmdata,CR)
          WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
          WRITE('1.',yes_gmdata,CR)
          WRITE('2.',no_gmdata,CR)
          WRITE(gdata_ans,'(1-2):')
          READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td)
	UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td,1,2))		  
		
	IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td = wizans_yes) THEN --tip dresser is being used

          IF ((sp_gnnum = 1) AND (wld2_app = wld2app_cgpg)) THEN --gun 1 is a carried gun
            REPEAT
              --WRITE(CR, 'GUN #',sp_gnnum,CR)
              --WRITE('Is Dress Verification Used',CR)
              --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?',CR)
              --WRITE('1. Yes',CR)
              --WRITE('2. No',CR)
              --WRITE('Answer: ')

              CLR_STND_SCR(gm_status)
              WRITE(CR,'GUN # ',sp_gnnum,CR)
              WRITE(dressverify,CR)
              WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
              WRITE('1.',yes_gmdata,CR)
              WRITE('2.',no_gmdata,CR)
              WRITE(gdata_ans,'(1-2):')
              READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg)
            UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_dvg,1,2))
          ENDIF --gun 1 is a carried gun	
           
         IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvogn = wizans_yes) THEN --can select a servo dresser
           IF (srvo_td_opt = TRUE) THEN --servo tip dresser option
             --REPEAT  --individualized question removed.  question now asked at beginning.  set Karel variables here 
                       --if gun has a tip dresser
               --WRITE(CR,'GUN #',sp_gnnum,CR)
               --WRITE('Is Tip Dresser Used?',CR)
               --WRITE('for gun#',sp_gnnum,' on equipment#',sp_eqnum,'?',CR)
               --WRITE('1. Yes',CR)
               --WRITE('2. No',CR)
               --WRITE('Answer: ') 
			
	       --CLR_STND_SCR(gm_status)
               --WRITE (CR,'GUN # ',sp_gnnum,CR)
               --WRITE(tipyn_srvgm,CR)
               --WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
               --WRITE('1.',yes_gmdata,CR)
               --WRITE('2.',no_gmdata,CR)
               --WRITE(gdata_ans,'(1-2):')
              --READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td)
	    --UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td,1,2))

           IF (servotipdrs = wizans_yes) THEN --servo tip dresser is used
             spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td = wizans_yes
           ENDIF --servo tip dresser is used

          ENDIF --servo tip dresser option				
	ENDIF  --can select servo dresser
			  
	IF ((wld2_app = wld2app_spdg) OR (wld2_app = wld2app_dpsg) OR ((wld2_app = wld2app_cgpg) AND (sp_gnnum = 2))) THEN --robot has pedestal application
	  REPEAT     
            --WRITE(CR,'Do Tip Dresser dump(s) have',CR)
            --WRITE('Safety Locking pins',CR)
            --WRITE('1. Yes',CR)
            --WRITE('2. No',CR)
            --WRITE('Answer 1-2: ') 
					
	    CLR_STND_SCR(gm_status)
            WRITE(CR,dump_pins,'?',CR)
            WRITE(dump_pins2,CR)
            WRITE('1.',yes_gmdata,CR)
            WRITE('2.',no_gmdata,CR)
            WRITE(gdata_ans,'(1-2):')
            READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp)
	  UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td_lp,1,2))			  
 	ENDIF --robot is a pedestal app
      ENDIF --tip dresser is being used
		  
	REPEAT
          --WRITE(CR,'GUN # ',sp_gnnum,CR)
          --WRITE('Do you want Transformer Over Temp',CR)
          --WRITE('checking used for gun# ',sp_gnnum,' on equipment# ',sp_eqnum,'?',CR)
          --WRITE('1. Yes',CR)
          --WRTE('2. No',CR)

	  CLR_STND_SCR(gm_status)	
          WRITE(CR,'GUN # ',sp_gnnum,CR)
          WRITE(xfrm_data,CR)
          WRITE(forgn_gmdata,sp_gnnum,oneq_gmdata,sp_eqnum,'?',CR)
          WRITE('1.',yes_gmdata,CR)
          WRITE('2.',no_gmdata,CR)
          WRITE(gdata_ans,'(1-2):')
          READ(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_xfot)
	UNTIL (Verify_Answr(spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_xfot,1,2))		  
		  
      ENDFOR  --Gun configuration for equipment complete
		 
      IF (spttl_eq2gn = 2) THEN --reinitialize variables for equipment 2 gun setup
	sp_eqgn_num = sp_ttl_gn
      ENDIF
		 		 
    ENDFOR  --Equipment and gun configuration for two weld controller complete  
		
  ENDIF --Two weld controller setup

END spot_app_wiz
-------------------------------------------------------------------
BEGIN

set_english
spot_app_wiz

END gmwizspt

