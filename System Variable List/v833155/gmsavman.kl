PROGRAM GMSAVMAN

-- This program was created by GENE Siegle for GM speed control from HMI
--
-- Modification History:
--
--  2016/12/09 marchaka PDFs are no longer stored on FR.  Modify logic to copy
--                      files from FRS onto the USB stick.


%PRIORITY = 50
%SYSTEM
%ALPHABETIZE
%NOLOCKGROUP
%RWACCESS
%NOBUSYLAMP
%NOPAUSE = ERROR + COMMAND + TPENABLE
--%NOABORT = ERROR + COMMAND
%COMMENT = 'GM PDF save V4.0'
%NOPAUSESHFT
%INCLUDE klevkmsk
%INCLUDE klevkeys
%INCLUDE kliotyps
%INCLUDE KLEVCCDF                         -- allows use of 'cc_clear_win' command
%INCLUDE kliosop  

CONST
WARN_MSG = 38000
ER_WARN = 0
LOG_NAME = 'PDFINSTLOG.DT'

VAR
  status,entry,success,i	: INTEGER
  d_path	:STRING[40]
  dev	:STRING[4]
  aryNames     : ARRAY[50] of STRING[20]

  logEnabled   : BOOLEAN      -- install log opened
  curTime      : INTEGER
  errors       : INTEGER
  errorsStr    : STRING[3]
  logFileName  : STRING[60]
  curTimeStr   : STRING[60]
  appName      : STRING[60]
  appVer       : STRING[60]
  fNum         : STRING[30]
  logFile      : FILE         -- install log
  -- install devicepath vars
  src_dev      : STRING[20]
  dev_path     : STRING[40]
  robot_id     : STRING[32]
  action FROM mpnlsvr	:STRING[126]

%INCLUDE klrdutil

------------------------------------------------------------------------------
ROUTINE openLog: BOOLEAN
------------------------------------------------------------------------------
VAR
  l_status   : INTEGER

BEGIN

  logFileName = src_dev + LOG_NAME

  CLR_IO_STAT(logFile)
  SET_FILE_ATR(logFile, ATR_IA)  --interactively write

  OPEN FILE logFile('RW', logFileName)
  l_status = IO_STATUS(logFile)
  IF (l_status <> 0) THEN
    POST_ERR(WARN_MSG, '[GMSAVMAN] Failed to open log ' + logFileName, 0, ER_WARN)
    RETURN(FALSE)
  ELSE
    RETURN(TRUE)
  ENDIF

END openLog
------------------------------------------------------------------------------

------------------------------------------------------------------------------
ROUTINE closeLog
------------------------------------------------------------------------------
VAR
  l_status   : INTEGER

BEGIN

  CLOSE FILE logFile
  status = IO_STATUS(logFile)
  IF (status <> 0) THEN
    POST_ERR(WARN_MSG, '[GMSAVMAN] Failed to close log ' + logFileName, 0, ER_WARN)
  ENDIF
  logEnabled = FALSE

END closeLog
------------------------------------------------------------------------------

------------------------------------------------------------------------------
ROUTINE writeLog(p_message: STRING; isError: BOOLEAN)
------------------------------------------------------------------------------
VAR
  l_status  : INTEGER
  l_str     : STRING[40]

BEGIN

  IF isError THEN
    l_str = '[GMSAVMAN] ' + p_message
    POST_ERR(WARN_MSG, l_str, 0, ER_WARN)
    errors = errors + 1
  ENDIF
  IF (p_message <> '') THEN
    WRITE TPDISPLAY(CR, p_message, CR)
  ENDIF

  IF logEnabled THEN
    WRITE logFile (p_message, CHR(13), CHR(10))  -- CR,LF
    l_status = IO_STATUS (logFile)
    IF (l_status <> 0) THEN
      POST_ERR(WARN_MSG, '[GMSAVMAN] Failed to write log ' + logFileName, 0, ER_WARN)
      closeLog
    ENDIF
  ENDIF

  -- Give time for user to see error
  IF isError THEN DELAY 1500; ENDIF

END writeLog
------------------------------------------------------------------------------

------------------------------------------------------------------------------
ROUTINE copyFile(p_src: STRING; p_dst: STRING)
------------------------------------------------------------------------------
VAR
  l_status   : INTEGER

BEGIN
  WRITE TPERROR(CHR(cc_clear_win),CR,'Copying ' + p_src + ' to ' + p_dst)
  action = p_src -- set so user will see the files on Web Page
  Delay 500
  COPY_FILE(p_src, p_dst, TRUE, FALSE, l_status)
  IF (l_status = 0) THEN
    writeLog('Copied ' + p_src + ' to ' , FALSE)
  ELSE
    POST_ERR(38000,  p_src +'copy to '+ p_dst+' Failed ', l_status, 0) --
    writeLog(' FAILED to copy ' + p_src, TRUE)
 ENDIF

END copyFile
------------------------------------------------------------------------------

------------------------------------------------------------------------------
ROUTINE copyFiles(p_pathSrc: STRING; p_wildCard: STRING; p_pathDst: STRING)
------------------------------------------------------------------------------
VAR
  l_idx      : INTEGER
  l_nSkip    : INTEGER
  l_nFiles   : INTEGER
  l_status   : INTEGER

BEGIN

  l_nSkip = 0
  REPEAT
    FILE_LIST(p_pathSrc + p_wildCard, l_nSkip, 3, aryNames, l_nFiles, l_status)
    IF (l_status <> 0) THEN -- Error occurred
      l_nFiles = 0
	  IF p_wildCard <> '' THEN
        POST_ERR(38000, 'Failed to load ' + p_wildCard, l_status, 0) --
        writeLog('FAILED to Load from List ' + p_wildCard, TRUE)
	  ENDIF
   ELSE
      FOR l_idx = 1 TO l_nFiles DO
		IF aryNames[l_idx] <> '' THEN
      copyFile(p_pathSrc+aryNames[l_idx], p_pathDst)
		ENDIF
      ENDFOR
      l_nSkip = l_nSkip + l_nFiles
    ENDIF
  UNTIL l_nFiles <> ARRAY_LEN(aryNames)

END copyFiles
------------------------------------------------------------------------------

BEGIN

  src_dev = 'FRS:'
  dev_path = '*.pdf'
  errors = 0

  FOR i = 1 TO 50 DO
	  IF uninit(aryNames[i])  then aryNames[i]  = ''; ENDIF
	ENDFOR

  logEnabled = openLog

	GET_VAR(status,'*SYSTEM*','$DEVICE',dev,success)
	copyFiles(src_dev, dev_path, dev)

  SET_VAR(entry, 'mpnlsvr' , 'Copy_done', TRUE, status)
    IF status <> 0 THEN
      POST_ERR(38000, '[mpnlsvr].Copy_done FAILED', status, 0) --
    ENDIF

 SET_VAR(entry, 'mpnlsvr' , 'action', 'Save Complete', status)
   IF status <> 0 THEN
     POST_ERR(38000, '[mpnlsvr].action FAILED', status, 0) --
   ENDIF

DELAY 3000

 SET_VAR(entry, 'mpnlsvr' , 'action', '', status)
   IF status <> 0 THEN
     POST_ERR(38000, '[mpnlsvr].action FAILED', status, 0) --
   ENDIF
  WRITE TPERROR(CHR(cc_clear_win))

END GMSAVMAN
