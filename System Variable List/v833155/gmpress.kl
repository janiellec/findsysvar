--    This material is the joint property of GM/Fanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GM/Fanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GM/Fanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GM/Fanuc Robotics Corporation
--
--    Program: gmpress.kl
--
--    Description: This a utility program used at controlled start to load
--                 specific programs; and set specific variables by running the
--                 wizard. It shall be included as a utility option in the FD
--                 program for updates.
-----------------------------------------------------------------------------
--    ROUTINES INCLUDED
--    Press_set    Press Wizard Setup File
-----------------------------------------------------------------------------
--
--    Program Name: gmpress.kl
--
--    Language: KAREL
--
--    Modification history:
--
--    2017/04/30 R.Kosaski Added code for Press Sync option
--
-----------------------------------------------------------------------------
PROGRAM gmpress
-----------------------------------------------------------------------------
%ALPHABETIZE

%COMMENT = 'Press Setup V4.0'
%NOLOCKGROUP
--%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE klevkmsk
%INCLUDE klevkeys
%INCLUDE kliotyps
%INCLUDE KLEVCCDF

%INCLUDE gmevrlng -- used for the language variables declaration

CONST

  -- Version
  Version = 'GM Press 2017-04-30' -- Please change version when you make an update
  WARN_MSG = 38000 -- make APSH-000 %s
  ER_WARN = 0 -- used in the post error 1= Pause 2 = abort

  -- Log file name
  LOG_NAME = 'PRESSWIZLOG.DT'

tp_arry_size = 100-- number of TP files that can be loaded, 100
pc_arry_size = 15 -- number of PC files that can be loaded, 15
sv_arry_size = 10 -- number of SV files that can be loaded, 10
vr_arry_size = 25 -- number of vr files that can be loaded, 25

%INCLUDE gmcnstnt -- used for GM constants
%INCLUDE GM_VAR   -- used for the Gm Variable constnt to set system variables to ?????
VAR

-- GM RS4 routines
  StrtinErs  : INTEGER  -- How many errors I/O error counter had when the program started

  robot_id     : STRING[32]
 -- install log vars
  logEnabled   : BOOLEAN      -- install log opened
  curTime      : INTEGER
  errors       : INTEGER
  errorsStr    : STRING[3]
  logFileName  : STRING[60]
  curTimeStr   : STRING[60]
  appName      : STRING[60]
  appVer       : STRING[60]
  fNum         : STRING[30]
  CustVer      : STRING[40]
  logFile      : FILE         -- install log

  endtime,
  endtimer     :INTEGER -- used for waintg for the enter value

Current_Ver IN SHADOW : STRING[48] -- Used for tracking version of program in backups

ColGrdErr,                -- used for the collision gaurd setup menu to indicate collistion occured

F_attmpted,               -- Files attempted to be loaded used for file loading management
F_loaded IN CMOS :INTEGER -- Files succesfully loaded used for file loading management

src_dev      : STRING[20]
destn_dev    : STRING[40]

-- install devicepath vars
pathname,
device :STRING[10]
rack_no, slot_no, phy_porttype,phy_port_no, n_ports,
entry,
i,
ans,
gm_status,
status :INTEGER

aryNames     : ARRAY[50] of STRING[20]

applic_tp IN CMOS :ARRAY[tp_arry_size] OF STRING[12] -- Used for TP files to load
applic_pc IN CMOS :ARRAY[pc_arry_size] OF STRING[12] -- Used for PC files to load
applic_sv IN CMOS :ARRAY[sv_arry_size] OF STRING[12] -- Used for SV files to load
applic_vr IN CMOS :ARRAY[vr_arry_size] OF STRING[12] -- Used for VR files to load

  Max_Answer :INTEGER  -- used to limit the max answer a user can select

  LPT_PrdctCod  IN SHADOW :STRING[8] -- used for the product code to detect if LPT is Present
  LPT_Err_Str   IN SHADOW :STRING[32] -- used for theerr text to be build based on missing LPT options
  LPT_Avail     IN SHADOW :BOOLEAN -- indicates that both LPT option and Robot Model are good for LPT use

 -- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

-- variables declares for Shop specifics
%INCLUDE gmcfgprs  -- GM wizard variables for press Applications

-- Variables declared for Applications
%INCLUDE gmcfgmh   -- GM wizard variables for MH Applications
%INCLUDE gmcfgvis  -- GM wizard variables for Vision Applications
%INCLUDE gmcfgtlc  -- GM wizard variables for tool changer Applications

-- MH Setup variables
%INCLUDE klrdutil
%INCLUDE gmrdutil -- has all the builtin routines i.e. Int2str, was GMUTILTY

ROUTINE GMPRSDTA  FROM GMPRSDTA   -- Press "display" Wizard Answers

ROUTINE mh_app_wiz   FROM GMWIZMH  -- the MH questions
ROUTINE tlc_app_wiz  FROM GMWIZTLC -- the Tool Changer questions
ROUTINE vis_app_wiz  FROM GMWIZVIS -- the Vision questions

ROUTINE init_MHVars  FROM GMMHVARS  -- has variable setup at initialization
ROUTINE InitPresVars FROM GMPRESVR -- For variable setup at initialization

ROUTINE GMMHGPIO FROM GMMHGPIO -- call program for all Gripper setup.
ROUTINE GMMHPRGS FROM GMMHPRGS -- Call program to Load MH specific Programs
ROUTINE GMMHREGS FROM GMMHREGS -- Call program to Load MH specific Register Stuff
ROUTINE GMMHVARS FROM GMMHVARS -- Call program to Setup MH specific Variables

ROUTINE GMTLCHIO FROM GMTLCHIO -- call program for all Tool Changer setup.

ROUTINE GMVISNIO FROM GMVISNIO -- call program for all Gripper setup.
ROUTINE GMVISPRG FROM GMVISPRG -- Call program to Load MH specific Programs
ROUTINE GMVISREG FROM GMVISREG -- Call program to Load MH specific Register Stuff
ROUTINE GMVISVAR FROM GMVISVAR -- Call program to Setup MH specific Variables

ROUTINE Set_english FROM GMLang1 -- used to setup language variable for displaying
ROUTINE Set_Span FROM GMLang1 -- used to setup language variable for displaying
ROUTINE Set_German FROM GMLang1 -- used to setup language variable for displaying

ROUTINE Finish_Log FROM GMWizLog  -- Used to close the log File
ROUTINE closeLog FROM GMWizLog  -- Used to close the log File
ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWizLog  -- used to write an items to the log file
ROUTINE Setup_Log(P_ShopLog:STRING) FROM GMWizLog -- used to Create the log file
-----------------------------------------------------------------------------
ROUTINE Chk_PS_Init
-- PURPOSE: to ensure all variable for this program is initialized so it can run
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  Current_Ver = Version -- Set the version for reference
  IF UNINIT(Use_Pres_Log) THEN
    Use_Pres_Log = TRUE
  ENDIF

  IF UNINIT(EOATCommType) THEN --set hook for multiple communications
    EOATCommType = Ethernet -- set it to 89
  ENDIF

  IF UNINIT(Reset_Cell) THEN -- this should always be set in the main wizard
    Reset_Cell = TRUE        -- but if ran stand alone it is needed here
  ENDIF

  IF UNINIT(DisplayDely) THEN
    DisplayDely = 1000
  ENDIF

 -- IF UNINIT(DisplayStat) THEN  -- RK changed 7-21-16
    DisplayStat = FALSE  -- set variable so will not display message to User window
 -- ENDIF

  IF UNINIT(Max_ToolStnd) OR (Reset_Cell) THEN
    Max_ToolStnd = 6
  ENDIF
    Max_ToolStnd = 6  -- always per Lloyd Steed 12/12/16

  IF UNINIT(PrsMcrsLoded) OR (Reset_Cell) THEN
    PrsMcrsLoded = FALSE -- indicates press macro have already been loaded
  ENDIF

  IF UNINIT(UseToolChngr) THEN
    UseToolChngr = TRUE    --   Setting to true indicates auto tool changer
  ENDIF

 -- num_proc = 1    -- Single Process

 -- process_def[1] = 'None'
--  process_def[2] = 'None'
  -- Define process name on Softpanel menu
 -- proces_name[1] = '(NONE-MH)'
--  proces_name[2] = '(NONE-MH)'

  Use_Press = TRUE

  --Init Press Vars
 -- plc_control  = FALSE   -- need to know what is this

  -- Reset ALL the application bits to ensure we are MH
  Set_B_sVar('$ap_selap[2]',FALSE) -- Spot Application
  Set_B_sVar('$ap_selap[6]',FALSE) -- Dispense Application
  Set_B_sVar('$ap_selap[4]',TRUE)  -- Material Handling Application

  Set_I_sVar('$style_count',255)
  Set_B_sVar('$GROUP[1].$USE_TURNS',FALSE)-- required for Rack Searching

  IF UNINIT(PresLineType) OR (Reset_Cell) THEN -- the press line type
    PresLineType = 1
  ENDIF

  IF UNINIT(PresTLCHType) THEN   -- the toool changer type
    PresTLCHType = PresManlTLCH  -- Manual is 1 Auto is 2
  ENDIF

  IF UNINIT(Press_Status.Cnfg_Is_Done) OR (Reset_Cell) THEN
    Press_Status.Cnfg_Is_Done  = FALSE
  ENDIF
  IF UNINIT(Press_Status.Cnfg_Status) OR (Reset_Cell) THEN
    Press_Status.Cnfg_Status  = 0
  ENDIF
  IF UNINIT(Press_Status.DsplyIs_Done) OR (Reset_Cell) THEN
    Press_Status.DsplyIs_Done = FALSE
  ENDIF
  IF UNINIT(Press_Status.Dsply_Status) OR (Reset_Cell) THEN
    Press_Status.Dsply_Status = 0
  ENDIF
  IF UNINIT(Press_Status.SetupIs_Done) OR (Reset_Cell) THEN
    Press_Status.SetupIs_Done = FALSE
  ENDIF
  IF UNINIT(Press_Status.Setup_Status) OR (Reset_Cell) THEN
    Press_Status.Setup_Status = 0
  ENDIF
IF UNINIT(LPT_PrdctCod) THEN
  LPT_PrdctCod = 'R885' -- Denio 3-28-16, will inform when offical number is released
ENDIF
IF UNINIT(LPT_Avail) THEN
  LPT_Avail = FALSE
ENDIF

  IF UNINIT(LPT) THEN
    LPT = FALSE  --Set to False
  ENDIF

 LPT_Avail = FALSE -- set to false and both options load will make TRUE

   IF (Chk_Feature('R885')) THEN -- check to see if LPT option is Loaded
     IF (Chk_Feature('H630')) THEN -- will return true if "M-900iA/200P " found in feature List
       LPT_Avail = TRUE
     ELSE
       POST_ERR(38000, 'Robot H630 Library NOT Loaded for LPT', 0, 0) --
       writeLog('Robot (H630) Library NOT Loaded for LPT in GMPRESS ', TRUE)
     ENDIF
   ELSE -- Check For Option
     Lpt_Err_Str = LPT_PrdctCod+' Option Not Loaded'
     writeLog('LPT Option '+ LPT_PrdctCod + ' Not Loaded says GMPRESS', FALSE)
   ENDIF

   IF (Chk_Feature('R886')) THEN -- check to see if Press Sync option is Loaded
     WriteLog('Press Sync Option R886 is Loaded for use',FALSE)
   ELSE

     WriteLog('Press Sync Option R886 NOT Loaded',FALSE)
   ENDIF

END Chk_Ps_Init
 -----------------------------------------------------------------------------
 ROUTINE Set_defaults
 -- PURPOSE: to setup the default variables and setting not coverd by Standard
 --          load of GM Spottool+ customization these are variables that have no
--           choices and should be set when the user has confirmed that they are a
--           press shop.
 --
 -- INPUT:
 --            -
 -- OUTPUT:
 --            -
 -- CALLED BY: GM Wizard and Robot Setup
 --
 --
 -----------------------------------------------------------------------------
 BEGIN

 writeLog('******** Setting up Defaults **************', FALSE)
 writeLog('', FALSE)

 writeLog('', FALSE)
 writeLog('******** Defaults Setup Done **************', FALSE)
 writeLog('', FALSE)

 END Set_defaults
------------------------------------------------------------------------------
ROUTINE copyFiles(p_pathSrc: STRING; p_wildCard: STRING; p_pathDst: STRING)
------------------------------------------------------------------------------
VAR
  l_idx      : INTEGER
  l_nSkip    : INTEGER
  l_nFiles   : INTEGER
  l_status   : INTEGER

BEGIN

  l_nSkip = 0
  REPEAT
    FILE_LIST(p_pathSrc + p_wildCard, l_nSkip, 3, aryNames, l_nFiles, l_status)
    IF (l_status <> 0) THEN -- Error occurred
      l_nFiles = 0
      POST_ERR(38000, 'Failed CopyList '+ p_pathSrc + p_wildCard, l_status, 0) --
   ELSE
      FOR l_idx = 1 TO l_nFiles DO
        copyFile(p_pathSrc+aryNames[l_idx], p_pathDst)
      ENDFOR
      l_nSkip = l_nSkip + l_nFiles
    ENDIF
  UNTIL l_nFiles <> ARRAY_LEN(aryNames)

END copyFiles
-----------------------------------------------------------------------------
ROUTINE PressLoad
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

-- Added below because Loading files at controlled start, if a file needs
-- Convert and Saved, this variable needs to be set Judy Evans Helped solve this
 SET_VAR(entry, '*SYSTEM*' , '$KAREL_CFG.$CONV_CTRL', TRUE, status)
   IF status <> 0 THEN
     POST_ERR(38000, '[*SYSTEM*].$KAREL_CFG.$CONV_CTRL FAILED', status, 0) --
   ENDIF

-- copy all files that are in the custom directory
 -- copyFiles('UD1:\custom\Press','*.TP','FRS:')

 SET_VAR(entry, '*SYSTEM*' , '$KAREL_CFG.$CONV_CTRL', FALSE, status)
   IF status <> 0 THEN
     POST_ERR(38000, '[*SYSTEM*].$KAREL_CFG.$CONV_CTRL FAILED', status, 0) --
   ENDIF

END PressLoad
-----------------------------------------------------------------------------
ROUTINE InitPresPrgs
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
 i  : INTEGER -- Used for indexing through the array.

BEGIN

   -- TP files which are used for this application
  FOR i = 1 to ARRAY_LEN(applic_tp) DO
    IF UNINIT(applic_tp [i]) THEN
      applic_tp [i] = ''
    ENDIF
  ENDFOR
    applic_tp[1] = '' --
    applic_tp[2] = '' --
    applic_tp[3] = ''
    applic_tp[4] = ''
    applic_tp[5] = ''
    applic_tp[6] = ''
    applic_tp[7] = ''
    applic_tp[8] = ''
    applic_tp[9] = ''

-- Add any TP files to be loaded

  FOR i = 1 to ARRAY_LEN(applic_pc) DO -- check all of the array is initialized
    IF UNINIT(applic_pc [i]) THEN
      applic_pc [i] = ''
    ENDIF
  ENDFOR
-- Add any PC files to be loaded

  FOR i = 1 to ARRAY_LEN(applic_sv) DO -- check all of the array is initialized
    IF UNINIT(applic_sv [i]) THEN
      applic_sv [i] = ''
    ENDIF
  ENDFOR
-- Add any SV files to be loaded

  FOR i = 1 to ARRAY_LEN(applic_vr) DO -- check all of the array is initialized
    IF UNINIT(applic_vr [i]) THEN
      applic_vr [i] = ''
    ENDIF
  ENDFOR
-- Add any VR files to be loaded to the array

END InitPresPrgs

-----------------------------------------------------------------------------
ROUTINE LoadPresPrgs
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
 i  : INTEGER -- Used for indexing through the array.

BEGIN


--- Load any TP files specific to the application

  writeLog('', FALSE)
  writeLog('Loading TP Files.... ', FALSE)
  F_attmpted = 0
  F_loaded = 0
  FOR i = 1 to ARRAY_LEN(applic_tp) DO
    IF (applic_tp [i] <> '') THEN
      F_attmpted = F_attmpted + 1
     -- LoadFile(applic_tp[i],'.TP')
    ENDIF
  ENDFOR
    IF F_attmpted > F_loaded THEN -- check if any files failed to load
      writeLog('FAILED to Load '+ int2str((F_attmpted - F_loaded))+' TP Files ', FALSE)
    ELSE
      IF (F_attmpted>0) THEN
        writeLog('Loaded Total of '+ int2str(F_attmpted)+ ' TP Files', FALSE)
      ELSE
        writeLog('No TP Files configured to Load', FALSE)
      ENDIF
    ENDIF

--- Load any PC files specific to the application

  writeLog('', FALSE)
  writeLog('Loading PC Files.... ', FALSE)
  F_attmpted = 0
  F_loaded = 0
  FOR i = 1 to ARRAY_LEN(applic_pc) DO -- check all of the array is initialized
    IF (applic_pc [i] <> '') THEN
      F_attmpted = F_attmpted + 1
    --  LoadFile(applic_tp[i],'.PC')
    ENDIF
  ENDFOR
    IF (F_attmpted > F_loaded) THEN -- check if any files failed to load
      writeLog('FAILED to Load' + int2str((F_attmpted - F_loaded))+ ' PC Files ', FALSE)
    ELSE
      IF (F_attmpted>0) THEN
        writeLog('Loaded Total of '+ int2str(F_attmpted) +' PC Files', FALSE)
      ELSE
        writeLog('No PC Files configured to Load', FALSE)
      ENDIF
    ENDIF

--- Load any SV files specific to the application

  writeLog('', FALSE)
  writeLog('Loading SV Files.... ', FALSE)
  F_attmpted = 0
  F_loaded = 0
  FOR i = 1 to ARRAY_LEN(applic_sv) DO -- check all of the array is initialized
    IF (applic_sv [i] <> '') THEN
      F_attmpted = F_attmpted + 1
     -- LoadFile(applic_sv[i],'.SV')
    ENDIF
  ENDFOR
    IF (F_attmpted > F_loaded) THEN -- check if any files failed to load
      writeLog('FAILED to Load' + int2str((F_attmpted - F_loaded)) + '  SV Files ', FALSE)
    ELSE
      IF (F_attmpted>0) THEN
        writeLog('Loaded Total of ' + int2str(F_attmpted) +' SV Files', FALSE)
      ELSE
        writeLog('No SV Files configured to Load', FALSE)
      ENDIF
    ENDIF

--- Load any VR files specific to the application

  writeLog('', FALSE)
  writeLog('Loading VR Files.... ', FALSE)
  F_attmpted = 0
  F_loaded = 0
  FOR i = 1 to ARRAY_LEN(applic_vr) DO -- check all of the array is initialized
    IF (applic_vr [i] <> '') THEN
      F_attmpted = F_attmpted + 1
     -- LoadFile(applic_vr[i],'.VR')
    ENDIF
  ENDFOR
    IF (F_attmpted > F_loaded) THEN -- check if any files failed to load
      writeLog('FAILED to Load' + int2str((F_attmpted - F_loaded))+ '  VR Files ', FALSE)
    ELSE
      IF (F_attmpted>0) THEN
        writeLog('Loaded Total of ' + int2str(F_attmpted)+' VR Files', FALSE)
      ELSE
        writeLog('No VR Files configured to Load', FALSE)
      ENDIF
    ENDIF

END LoadPresPrgs
-----------------------------------------------------------------------------
ROUTINE Cnfrm_Press:BOOLEAN
-- PURPOSE:  To Prompt the Operator to confirm Press was selected
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR

Answer : INTEGER

BEGIN
    REPEAT
      Answer = -1

      -- 12-3-16 RK added for if ran and not on user screen, looks like code is hung
        IF ($TP_INUSER=FALSE) THEN
          FORCE_SPMENU(tp_panel,SPI_TPUSER,1) -- force the user screen to display forms
        ENDIF
       CLR_STND_SCR(gm_status)
      -- 12-3-16 end of RK changes

      WRITE(CHR(137),CHR(128));

      WRITE TPDISPLAY(CR,'    **Press Shop Setup Wizard**   ',cr)
      WRITE TPDISPLAY('  Please Confirm this is a Material  ',cr)
      WRITE TPDISPLAY('  Handling Press Shop Application.  ',cr)
      WRITE TPDISPLAY('  PRESS Settings will be applied.     ',cr)
      WRITE TPDISPLAY('  Please make sure you have your files  ',cr)
      WRITE TPDISPLAY('  backed-up before continuing.          ',cr)
      WRITE TPDISPLAY('                                        ',cr)
      WRITE TPDISPLAY('  Press 1 to Select App,or 0 to Cancel',cr)
      WRITE TPPROMPT (CR,'Enter Option,Press Enter '+CHR(129))

      READ TPPROMPT(Answer)
    UNTIL (Verify_Answr(Answer,0,1))-- Verify Answer

   IF (Answer = 0) THEN
     CLR_STND_SCR(gm_status)
     writeLog('User cancelled PRESS Setup', FALSE)
     RETURN(FALSE)
   ELSE
     RETURN(TRUE)
   ENDIF

END Cnfrm_Press
-----------------------------------------------------------------------------
ROUTINE Set_Pres_App
-- PURPOSE:  To Prompt the Operator to confirm Press Shop Application Setup
--
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
-------------------------------------------------------------------
BEGIN

 writeLog(' ', FALSE)
 writeLog(' Checking Press variables are setup ', FALSE)

 Chk_Ps_Init -- check variables to be used are set

 writeLog(' Press variables Config complete ', FALSE)
 writeLog(' ', FALSE)

-- Select Press Application
  --***************************************************************

  REPEAT
    CLR_STND_SCR(gm_status)
    IF LPT_Avail THEN
      WRITE (CR,'LPT & M-900iA/200P Available',CR)
      WRITE ('Use Linear Press Tool?',CR,CR)     --Linear Press Tool = LPTO
    ELSE
      WRITE (CR,' Does this Robot have LPT',CR)
      WRITE ('Linear Press Tool (M900iA/200P)?',CR,CR)     --M-900iA/200P = H630
    ENDIF
    WRITE ('1. YES' ,CR)
    WRITE ('2. NO' ,CR)
    WRITE(gdata_ans,':  ')
    READ (ans)
  UNTIL Verify_Answr(Ans,1,2)

    -- once user answers 1st question Configuration is no longer done
 Press_Status.Cnfg_Is_Done = FALSE -- set so Wizard knows any previous config has been Changed
                                   -- and until user finishes, they cannot Execute the changes???
 Press_Status.Cnfg_Status = 1  -- user answered first question

  IF (ans = 1) THEN  -- if user selected yes verify option is loaded
    IF LPT_Avail THEN -- ensure booth option were found in $FEATURE list
      LPT = TRUE
    ELSE --
      Lpt_Err_str = ''
      IF NOT (Chk_Feature('H630')) THEN -- will return true if "M-900iA/200P " found in feature List
        POST_ERR(38000, 'Robot H630 Library NOT Loaded for LPT', 0, 0) --
        Lpt_Err_Str = 'Robot H630,'
        writeLog('Robot H630 Library NOT Loaded for LPT in GMPRESS ', TRUE)
      ENDIF
      IF NOT (Chk_Feature('R885')) THEN -- check to see if LPT is Loaded
        IF (Lpt_Err_str = '') THEN
          Lpt_Err_Str = Lpt_Err_Str + 'LPTO,'
        ELSE
          Lpt_Err_Str = Lpt_Err_Str + ' & LPTO,'
        ENDIF
      ENDIF
      writeLog(Lpt_Err_str +' Option NOT Loaded for use in GMPRESS ', TRUE)
      writeLog('LPT Option Not Loaded for use in GMPRESS ', FALSE)
      POST_ERR(38000, Lpt_Err_str+ ' User Cannot Use LPT',0 , 0) --

        REPEAT
          CLR_STND_SCR(gm_status)
            WRITE (CR,'Linear Press Tool IS NOT Available',CR)
            WRITE (Lpt_Err_str +' Option(s) Not Loaded.',CR)
            WRITE (CR,' Do you want to continue executing',CR)
            WRITE (' the press Wizard without LPT?',CR,CR)
            WRITE ('1. YES' ,CR)
            WRITE ('2. NO' ,CR)
            WRITE(gdata_ans,':  ')
            READ (ans)
        UNTIL Verify_Answr(Ans,1,2)

          IF Ans <> 1 THEN
            POST_ERR(38000, 'User Cancelled LPT Press Wizard', 0, 0) --
            writeLog('User Cancelled LPT Press Wizard',TRUE)
            RETURN
          ELSE
-- user wants to continue not using LPT
            POST_ERR(38000, 'User Continued Wizard without LPT', 0, 0) --
            writeLog('User Continued Wizard without LPT', TRUE)
            LPT = FALSE
          ENDIF
    ENDIF -- from LPT Avaialable
  ENDIF  -- From users answer

   REPEAT
     CLR_STND_SCR(gm_status)
     WRITE (CR,mfq1_gmdata,'?',CR,CR) -- Select Metal Forming Application
     WRITE ('1.',mfq2_gmdata ,CR)     -- Tandem Press Line'
     WRITE ('2.',mfq3_gmdata ,CR)     -- Robotic Destacking'
     WRITE ('3.',mfq4_gmdata ,CR)     -- EOL Transfer Press Line'
    -- No Racking on LPT robots per L Steed 3-28-16
     IF NOT LPT THEN
       WRITE ('4.',mfq5_gmdata ,CR,CR)  -- Robotic Racking -- Cannot be on press tool
       Max_answer = 4
     ELSE
       Max_answer = 3
     ENDIF
     WRITE(gdata_ans,':  ')           -- Answer
     READ (Ans)
   UNTIL Verify_Answr(Ans,1,Max_answer)
   PresLineType = Ans -- Set the Press Line Type

   SELECT (PresLineType) OF --
     CASE (1):  --
       writeLog('User selected Tandem Press Line ', FALSE)
     CASE (2):  --
       writeLog('User selected Robotic Destacking ', FALSE)
     CASE (3):  --
       writeLog('User selected EOL Transfer Press Line', FALSE)
     CASE (4):  --
       writeLog('User selected Robotic Racking', FALSE)
   ENDSELECT --
   writeLog(' ', FALSE)


 Press_Status.Cnfg_Status = Press_Status.Cnfg_Status +1  -- user answered  question

-- Select Tool Change Type 1= Manual 2 = Automatic
-- Press Tool ALWAYS has Tool Changer

UseToolChngr = TRUE

IF NOT LPT THEN -- if not linear press tool ask questions but if LPT answers are known

     PresTLCHType = 2 -- Force automatic tool changer no matter what
     Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- user answered another question
     writeLog('Selected Automatic Tool Changer for user', FALSE)
     UseToolChngr = TRUE

--        REPEAT -- 100P Tool Changer Question ONLY, 100P robot cannot be LPT NEVER! as of 7-17-16
--          CLR_STND_SCR(gm_status)
--          WRITE (CR,mfq9_gmdata,'?',CR,CR)-- Select Number of Tool Types
--          WRITE ('1. (1) Tool Type ',CR)  -- 1. (1) Tool Type
--          WRITE ('2. (2) Tool Types',CR)  -- 2. (2) Tool Types
--          WRITE ('3. (3) Tool Types',CR)  -- 3. (3) Tool Types
--          WRITE ('4. ',mfq10_gmdata,CR,CR)-- 4.     other
--          WRITE(gdata_ans,':  ')          -- Answer
--          READ (ans)
--        UNTIL Verify_Answr(ans,1,4)
--          PrsMantc_num = ans -- Answer verified save it
--
--        Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- user answered another question
--            SELECT (PrsMantc_num) OF --
--              CASE (1):  --
--                writeLog('User selected Manual Tool Type (1) ', FALSE)
--              CASE (2):  --
--                writeLog('User selected Manual Tool Types (2) ', FALSE)
--              CASE (3):  --
--               writeLog('User selected Manual Tool Types (3)', FALSE)
--              CASE (4):  --
--                writeLog('User selected "other" tool types', FALSE)
--            ENDSELECT --
--            writeLog(' ', FALSE)
  --    CASE (PresAutoTLCH):  -- Automatic Tool Changer
      --   all_types = FALSE
         UseToolChngr = TRUE
         Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- No question was asked but index status

  --    ELSE: --
    --    POST_ERR(38000, 'PRESTLCHTYPE='+int2str(PresTLCHType)+' in GMWIZPRS is INVALID', 0, 0) --
   -- ENDSELECT --

  -- Tool Changer Nest Questions that are asked for NONE LPT setups,
    REPEAT
      CLR_STND_SCR(gm_status)
      WRITE (CR,mfq11_gmdata,'?',CR,CR)-- Select Number of Tool Stand Nest Types
      WRITE ('1.',mfq12_gmdata,CR)     -- 2 Nest
      WRITE ('2.',mfq13_gmdata,CR,CR)  -- 4 Nest
      WRITE(gdata_ans,'(2 or 4 nests):  ')   -- Answer (2 or 4):
      READ (ans)
    UNTIL Verify_Answr(Ans,1,2)

    PresNestType = Ans -- Set Press Tool Changer type to answer
    Press_Status.Cnfg_Status = Press_Status.Cnfg_Status + 1  -- user answered another question
    SELECT (PresNestType) OF --
      CASE (1):  --
        writeLog('User selected Nest Type 2', FALSE)
      CASE (2):  --
        writeLog('User selected Nest Type 4', FALSE)
    ENDSELECT --
    writeLog(' ', FALSE)

    FOR i = 1 TO ARRAY_LEN(ToolStndType) DO -- All stands are the same
      ToolStndType[i] = Ans  --1 = 2 two stands or 2 = 4 stands
    ENDFOR --

    -- Need to Setup Max Stands based on answer
    IF ToolStndType[1] = 2 THEN
      IF Max_ToolStnd = 4 THEN
        POST_ERR(38000, 'Changed Number Stands to 2 from 4', 0, 0) --
      ENDIF
      Max_ToolStnd = 3 -- max 3 doubles for now 3-15-16 code supports 4 dual
    ELSE
      IF Max_ToolStnd = 2 THEN
        POST_ERR(38000, 'Changed Number Stands to 4 from 2', 0, 0) --
      ENDIF
      Max_ToolStnd = (ARRAY_LEN(ToolStndType)) --
    ENDIF

    --**********************************************************************
    --- Prompt User for the Number of Tool Stands to be mapped by the robot
    --**********************************************************************

 -- Check for Tool Stand Quantity if singles can have 4, otherwise 2 duals
   REPEAT
     CLR_STND_SCR(gm_status)
     WRITE (cr,mfq15_gmdata,CR,CR)          -- Select Number of Tool Stands',CR)
     WRITE(gdata_ans,'(1-',Max_ToolStnd,'):')-- 2. No',CR,CR)
     READ (ans)                             -- Answer 1-either 3 or 6 for press: ')
   UNTIL (Verify_Answr(Ans,1,Max_ToolStnd))-- Verify Answer

     Num_ToolStnd = Ans
     Press_Status.Cnfg_Status  = Press_Status.Cnfg_Status + 1  -- user answered another question
    writeLog('User selected '+int2str(ans)+' number of Stands', FALSE)
    writeLog(' ', FALSE)

ELSE -- is LPT and all tool stand answers are known

 PresTLCHType = 2 -- LPT has auto tool changer
  FOR i = 1 TO ARRAY_LEN(ToolStndType) DO -- All stands are the same
    ToolStndType[i] = 1  --1 = 2 two stands or 2 = 4 stands
  ENDFOR --
 Num_ToolStnd = 2
ENDIF -- end of tool changer questions

    writeLog('Checking if MH program wizard loaded', FALSE)
 -- Need to ensure GMWIZMH is loaded and available for use
    IF (Chk_loaded('gmwizmh')) THEN
      writeLog('Executing the MH portion of Press Wizard', FALSE)
      mh_app_wiz -- call MH Wiz to get the common questions answered
      writeLog('MH portion of Press Wizard Completed', FALSE)
    ELSE
      ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
      writeLog('MH portion of Press Wizard Cannot Be DONE', TRUE)
    ENDIF
    writeLog(' ', FALSE)

 -- Need to ensure GMWIZVIS is loaded and available for use
    writeLog('Checking if Vision program wizard loaded', FALSE)
    IF (Chk_loaded('gmwizvis')) THEN
      writeLog('Executing the Vision portion of Press Wizard', FALSE)
      Vis_app_wiz -- call Vision Wizard to get the common questions answered
      writeLog('Vision portion of Press Wizard Completed', FALSE)
    ELSE
      writeLog('Vision portion of Press Wizard Cannot Be DONE', TRUE)
      ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
    ENDIF
    writeLog(' ', FALSE)

 -- After user answers all questions, Configuration is done
    Press_Status.Cnfg_Is_Done = TRUE
    Press_Status.Cnfg_Status  = 0 -- set back to zero indicating no problems

END Set_Pres_App

-----------------------------------------------------------------------------
ROUTINE Press_Config
-- PURPOSE: This routine is called from the main wizard when the user has Selected
--          GM MetalForming as the Shop. All Cell interface has been setup already when
--          So Displaying cell setup can be done. This is only a setup, and confirming variables
--          NO programs or settings occur, only setting up how the load should occur
--          The PRESS_setup routine is the routine where
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:  GMWIZARD program from the RUN_CONFIG routine.
--
-----------------------------------------------------------------------------
VAR
  l_reload	     : INTEGER
  success        : INTEGER
  l_stat         : INTEGER
  l_psve         : INTEGER
  l_dummy        : INTEGER
  l_ans          : INTEGER

BEGIN

IF UNINIT(pathName) THEN
  pathName = 'FR:' -- may need to change to FR6:
ENDIF

-- Main wizard will do this now
---Setup_Log('Press') -- create and open the log file

Chk_PS_Init
--InitPresVars -- Go and initialize the vars

IF Cnfrm_Press THEN -- if routine return True User confirmed to run press wizard setup
  Use_Press = TRUE -- User confirmed to use Press as the Shop

  WizardStatus.Cnfg_Is_Done = FALSE -- should already be false from Main wizard
  Press_Status.Cnfg_Is_Done = FALSE -- Indicate starting the wizard

  writeLog('Setting Press Status.Cnfg_Is_Done to FALSE', FALSE)

  writeLog('Starting Press Application Menu', FALSE)
  writeLog(' ', FALSE)

  Set_Pres_App -- Have User select the application.
               -- Call routine to See which Applications to setup
               -- when returned all press MH and vision questions are done
  writeLog('Press Application Menu COMPLETED ', FALSE)
  writeLog(' ', FALSE)


 -- Set_defaults  -- execute the details of the wizard
 -- initialize Programs
 -- InitPresprgs -- setup all Press specific files
ELSE -- user did not confirm Press Application
  writeLog('User DID NOT select PRESS application', FALSE)
  POST_ERR(38000, 'User CANCELLED Press Config', 0, 0) --
  RETURN
ENDIF

POST_ERR(38000, 'GM Press Config Finished ', 0, 0) --
  WizardStatus.Cnfg_Status = 0
  WizardStatus.Cnfg_Is_Done = TRUE
  Press_Status.Cnfg_Status = 0
  Press_Status.Cnfg_Is_Done = FALSE -- Indicate starting the wizard

-- set string variable so Press has seperate comment for Referenec positions
Set_S_PVar('GMCellRG','PounceString','Ref/PouncePos#')

RETURN

END Press_Config
-----------------------------------------------------------------------------
ROUTINE PressDisplay
-- PURPOSE: this program is call for diisplaying the current configuration
--          this is used as a display only and changes are made using the
--          wizard. this program will be called from a case select in GMWIZARD
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
ApplicString  : STRING[25] -- Used for
Vis_used_str  : STRING[5]
Vis_type_str  : STRING[10]
LPTRobotStr   : STRING[25]
tc_type_Str   : STRING[6]
BEGIN

--  VisLghtType  IN SHADOW FROM GMCFGVIS : INTEGER -- What Type of Vision Lighting Rbt=1 Fix=2 Rbt&Fix=3

IF UNINIT(NumEOATOtMan) THEN
  NumEOATOtMan = 0
ENDIF
IF UNINIT(NumEOATInBlk) THEN
  NumEOATInBlk = 0
ENDIF
IF UNINIT(ApplicString) THEN
  ApplicString = '12345678901233456789012345'
ENDIF

IF UNINIT(Vis_used_str) THEN
  Vis_used_str = 'FALSE'
ENDIF
IF UNINIT(Use_vision) THEN
  Use_vision = FALSE
ENDIF
IF UNINIT(iRtype) THEN
  iRtype = 1
ENDIF

IF Use_vision THEN
  Vis_used_str = 'TRUE'
  -- if used set vision type
  SELECT (iRtype) OF --
    CASE (1):  -- iR 2D System
    Vis_type_str = 'iR 2D'
    CASE (2):  -- iR 3D System
    Vis_type_str = 'iR 3DL'
    CASE (3):  --
    Vis_type_str = 'iR 2D&3DL'
  ELSE: --
    Vis_type_str = 'UNKNOWN'
  ENDSELECT -- iR 2D & 3D System(s)
ELSE
  Vis_used_str = 'FALSE'
  Vis_type_str = 'Not Used'
ENDIF

IF UNINIT(Vis_type_str) THEN
  Vis_type_str = 'NONE'
ENDIF

IF UNINIT(LPTRobotStr) THEN
  LPTRobotStr = '1234567890123456789012345'
ENDIF
IF UNINIT(tc_type_Str) THEN
  tc_type_Str = 'AUTO'
ENDIF
IF UNINIT(PresLineType) THEN
  PresLineType = 1
ENDIF
IF UNINIT(LPT) THEN
  LPT = FALSE
ENDIF
IF UNINIT(LPT_Avail) THEN
  LPT_Avail = FALSE
ENDIF
IF LPT = TRUE THEN -- ensure booth option were found in $FEATURE list
  LPTRobotStr = 'LPT with'
ELSE
  LPTRobotStr = 'Basic with'
ENDIF

IF LPT_Avail THEN
  LPTRobotStr = LPTRobotStr +' M-900ix/200P'
ELSE
  LPTRobotStr = LPTRobotStr +' R-2000ix/100P'
ENDIF

  SELECT (PresLineType) OF --
     CASE (1):  --
       ApplicString ='Tandem Press Line '
     CASE (2):  --
       ApplicString ='Robotic Destacking '
     CASE (3):  --
       ApplicString ='EOL Transfer Press Line'
     CASE (4):  --
       ApplicString ='Robotic Racking'
   ENDSELECT --

        IF ($TP_INUSER=FALSE) THEN
          FORCE_SPMENU(tp_panel,SPI_TPUSER,1) -- force the user screen to display forms
        ENDIF
       CLR_STND_SCR(gm_status)

      WRITE(CHR(137),CHR(128));
                   --  1234567890123456789012345678901234567890
      WRITE TPDISPLAY(CR,'  **  Press Shop Current Config  ** ',cr)
      WRITE TPDISPLAY(' IP Config   : ',eip_oct1,'.',eip_oct2,'.',eip_oct3, '.',eip_oct4,cr)
      WRITE TPDISPLAY(' Press Tool  : ',LPTRobotStr  ,cr)
      WRITE TPDISPLAY(' Application : ',ApplicString,cr)
    IF (LPT=TRUE) THEN
      WRITE TPDISPLAY(' Tool Changer: ',tc_type_Str    ,'    Tool Nest  :'  , Num_ToolStnd ,cr)
    ELSE
      WRITE TPDISPLAY(' Tool Changer: ',tc_type_Str    ,'    Tool Nest  :'  , (Num_ToolStnd*2) ,cr)
    ENDIF
      WRITE TPDISPLAY(' Valve Packs : ', NumEOATOtMan  ,'      Input Block:', NumEOATInBlk ,cr)
      WRITE TPDISPLAY(' Vision Used : ',Vis_used_str,'    Type: ',Vis_type_str)--,cr

  RETURN
END PressDisplay
-----------------------------------------------------------------------------
ROUTINE Press_Setup
-- PURPOSE: This routine will setup and execute the program files based on how
-- the user has configured the setup. When this routine is called, the Main Cell
-- interface has been already set by the Main cell wizard. When this returns to
-- the calling routine, it will have completed an MH setup or the Vision Setup
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY: this routine is call from the Main GM Global Wizard.
--
--
-----------------------------------------------------------------------------
BEGIN
--
--IF UNINIT(Use_Pres_Log) THEN
--  Use_Pres_Log = FALSE
--ENDIF
--IF Use_Pres_Log = FALSE THEN -- Press always creates a log if not enabled, then wizard
--  Use_Pres_Log = TRUE -- create and open the log file
--  Setup_Log('Press')-- is being ran again and only running setup and not Config
--ENDIF

-- Set variable so no errors go the the teach pendnant at execution time Per Lloyd Steed 7-21-16
DisplayStat = FALSE

IF Use_MH_Tool THEN
--sets MH I/O
  writeLog('Calling GMMHGPIO setup program', FALSE)
  IF NOT (CallThisProg('gmmhgpio')) THEN  -- call the Eoat Setup
    ErrsInCell.ErrorsIOCom  = ErrsInCell.ErrorsIOCom+1
  ELSE
    writeLog('GMMHGPIO setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

--sets MH programs
  writeLog('Calling GMMHPRGS setup program', FALSE)
  IF NOT (CallThisProg('gmmhprgs')) THEN -- Call the Mh Prog loading
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
  ELSE
    writeLog('GMMHPRGS setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

--sets MH registers
  writeLog('Calling GMMHREGS setup program', FALSE)
  IF NOT (CallThisProg('gmmhregs')) THEN
    ErrsInCell.ErrorsRgstrs = ErrsInCell.ErrorsRgstrs+1
  ELSE
    writeLog('GMMHREGS setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

-- Load any specific MHVars
  writeLog('Calling GMMHVARS setup program', FALSE)
  IF NOT (CallThisProg('gmmhvars')) THEN -- Load any specific MHVars
    ErrsInCell.ErrorsVarbls = ErrsInCell.ErrorsVarbls+1
  ELSE
    writeLog('GMMHVARS setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

 -- CHeck if we have a tool changer
    IF UseToolChngr THEN
      writeLog('Calling GMTLCHIO Setup program', FALSE)
        -- Setup the Tool Change data
        IF NOT (CallThisProg('gmtlchio')) THEN
         ErrsInCell.ErrorsPrgrms  = ErrsInCell.ErrorsPrgrms+1;
        ELSE
          writeLog('GMTLCHIO Setup program Completed', FALSE)
          WriteLog('', FALSE)
        ENDIF  --sets MH I/O
     ELSE
      writeLog('No Tool Changer was selected for Press Setup', FALSE)
      WriteLog('', FALSE)
    ENDIF
 ELSE
  writeLog('No MH Gripper was selected for Setup', FALSE)
  WriteLog('', FALSE)
ENDIF

IF (Use_Vision = TRUE) THEN
--Sets Vision I/O
  writeLog('Calling GMVISNIO setup program', FALSE)
  IF NOT (CallThisProg('gmvisnio')) THEN
    ErrsInCell.ErrorsIOCom  = ErrsInCell.ErrorsIOCom +1
  ELSE
    writeLog('GMVISNIO setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

--Sets Vision registers
  writeLog('Calling GMVISREG setup program', FALSE)
  IF NOT (CallThisProg('gmvisreg')) THEN
    ErrsInCell.ErrorsRgstrs = ErrsInCell.ErrorsRgstrs+1
  ELSE
    writeLog('GMVISREG setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

--Sets Vision programs
  writeLog('Calling GMVISPRG setup program', FALSE)
  IF NOT (CallThisProg('gmvisprg')) THEN
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
  ELSE
    writeLog('GMVISPRG setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

--Sets Vision variables
  writeLog('Calling GMVISVAR setup program', FALSE)
  IF NOT (CallThisProg('gmvisvar')) THEN
    ErrsInCell.ErrorsVarbls = ErrsInCell.ErrorsVarbls+1
  ELSE
    writeLog('GMVISVAR setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF
ELSE
  writeLog('No Vision was selected for Setup', FALSE)
  WriteLog('', FALSE)
ENDIF

  -- Reset All Press Variables so they can be evaluated at end of installation
  ErrsInShop.ErrorsPrgrms = 0
  ErrsInShop.ErrorsRgstrs = 0
  ErrsInShop.ErrorsVarbls = 0
  ErrsInShop.ErrorsIOCom  = 0

  writeLog('Calling GMPRESPG setup program', FALSE)
  IF NOT (CallThisProg('GMPRESPG')) THEN -- call the Press Specific Program loading
    ErrsInCell.ErrorsIOCom  = ErrsInCell.ErrorsIOCom +1
  ELSE
    writeLog('GMPRESPG setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

  writeLog('Calling GMPRESIO setup program', FALSE)
  IF NOT (CallThisProg('gmpresio')) THEN -- call the Press Specific I/O Setup
    ErrsInCell.ErrorsIOCom  = ErrsInCell.ErrorsIOCom +1
  ELSE
    writeLog('GMPRESIO setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

  writeLog('Calling GMPRESRG setup program', FALSE)
   IF NOT (CallThisProg('GMPRESRG')) THEN  -- Setup the Press specific registers
    ErrsInCell.ErrorsIOCom  = ErrsInCell.ErrorsIOCom +1
  ELSE
    writeLog('GMPRESRG setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF

  writeLog('Calling GMPRESVR setup program', FALSE)
   IF NOT (CallThisProg('GMPRESVR')) THEN -- Load any specific Press Vars
    ErrsInCell.ErrorsIOCom  = ErrsInCell.ErrorsIOCom +1
  ELSE
    writeLog('GMPRESVR setup program Completed', FALSE)
    WriteLog('', FALSE)
  ENDIF


DisplayStat = FALSE

    WriteLog('Press Setup wizard has completed', FALSE)

END Press_Setup
------------------------------------------------------------------------------------------------

BEGIN

-- Need to load at Controlled Start Menu
-- This MUST BE HERE, the wizard calls the routine, not this program.

-- press_setup
   PressDisplay

END gmpress
