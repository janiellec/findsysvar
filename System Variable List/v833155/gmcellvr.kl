--
--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--    +
--    Program: GMCELLVR
--
--    Description:
--
--    GMPRESRG -- program for setting registers and position registers comments and default values
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
-------------------------------------------------------------------------------------------------------------
--    Other Application files:
--    GMCELLIO -- program to setup and comment the press I/O GMCELLIO is also required to setup workcell interface
--    GMCELLPG -- program for loading all unique program that are specific to  applications
--    GMCELLRG -- program for setting Regsiters specific to common application
-------------------------------------------------------------------------------
--    Language: KAREL
--
--    Source File:
--
--    Author:
--            Fanuc Robotics North America
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--    2016-06-14 marchaka Set macro table to 200
--    2016-09-02 marchaka Add protection for duplicate setting up of file_apbck
--                        if it is already done
--    2016-10-13 marchaka Add more applications to application bit setup.
--                        User alarms that were too long were updated.
--    2016-10-20 marchaka Fix process_def and proces_name setting for SPR.
--                        Fix PMC app bit settings for SPR.
--    2016-11-08 marchaka Reset num_errors to 0.
--    2016-11-15 marchaka Add g_multiapp configuration.
--    2016-12-05 marchaka Add gm_ffr_man and gmsgman
--    2016-12-12 marchaka Remove PDF loading.  They will only be loaded
--                        on FRS.  FD is handling this.
--    2017-1-27  kosaskiR added the gmwizlog.dt, and atcustom to file app backup and
--
--    2017-02-13 marchaka Removed $dev_path setting.  This is handled in gmmain1 now.
--    2017-02-24 friededr Reserved User Alarms #180-200 for PaintShop.
--    2017/03/12 marchaka Modifications to support ArcTool wizard
--    2017/03/24 marchaka Modifications so that mfg_area check doesn't cause ArcTool wizard to crash
--    2017/03/27 marchaka Added setting for custommenu for menu edit webscreens (custook, custooyn, custolst)
--    2017/03/28 marchaka Initialize Karel variable settings for custook, custoyn, custolst
--    2017/04/10 marchaka Change location of tool change web screen from status menu to menu favourites.  Add ATI
--                        logo to menu favourites button.
--    2017/06/24 marchaka Add all menu favourite setup for all applications and shops into one common routine
--    2017/07/03 marchaka Added copying of press web screen images
--    2017/10/03  kosaskrr Added the call to AECTRL after auto exit enable so user does not have to (apply) manually
--    2018/02/26 marchaka Do not load lpt1m.gif if ArcTool.  Added user alarm 80
--    2018/04/09 kosaskrr Added HOMEUTIL and HOMEFIND to the application backup
--    2018/04/08 marchaka Add paintshop webscreen for TCU.  Add production path enable variable.
--    2018/04/04 schoensm V8.33P05 updates
--    2018/04/23 marchaka Move the copy of wizinst.stm to setwebscreen from set_imenu.  This will fix an issue with 
--                        older versions being used after an auto update
--    2018/04/27 marchaka Do not setup homeutil and homefind in fileapbck for ArcTool
--    2018/07/02 baker    Removed loading of gmlogo.gif and lpt1.gif from any directories that are not
--                        /frh/gui/
--    2018/08/03 baker    Added setting of MACRTPDSBEX
--    2018/10/11 marchaka Only setup auto exit if the option is installed on the robot.  Valid GM laser configurations
--                        do not use this option.
--    2019/05/15 marchaka Add ZDT variable settings
--    2019/08/02 marchaka Set FSAC variables to read only.
--    2019/11/01 schoensm FTP server configurations
--    2019/08/12 marchaka Add $spoteqsetup[x].$endwld4paus to 0.  This variable is now being used in v833 product and want the default to be 0.
--                        VAR exists on all SpotTool+ robots, so set it for all robots.
--    2019/08/14 marchaka Added atshcust.vr for file backup for ArcTool
--    2019/10/17 marchaka Temporarily remove fsac settings per GM's request.  Need other settings before these can be applied
--    2020/03/23 marchaka Fixed element in array in FOR loop logic for hosts_cfg setting
--    2020/09/22 schoensm V8.33P10 update -- set stack size to 600 due to overflow issues. Servo Off time = 60 sec
--    2020/12/14 Kosaskrr V8.33P10 update so $AUTOEX_CNF2.$CLOSEST_ENB  is set to one for PT applications
--    2021/01/13 Kosaskrr Had to change $AUTOEX_CNF2.$CLOSEST_ENB switched to use boolen routine
----------------------------------------------------------
PROGRAM GMCELLVR
-----------------------------------------------------------------------------

%NOLOCKGROUP
%INVISIBLE
%RWACCESS

%ENVIRONMENT REGOPE -- required for register builtins
--%ENVIRONMENT proddef -- Required for the $FEATURE.$MOD[i] variable
%ENVIRONMENT mnmcdef
%ENVIRONMENT sysdef
%ENVIRONMENT iosetup
%ENVIRONMENT ioblt
%ENVIRONMENT MULTI -- Needed for the run task command
%ENVIRONMENT HOSTDEF -- Needed for FTP configuration


%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
%INCLUDE kliotyps

%INCLUDE gmcfgerr  -- has the structures for the error tracking
%INCLUDE gmcfgcel  -- has the workcell variable settings for configuration
%INCLUDE gmcfgbdy  -- has the body shop variable settings for configuration
%INCLUDE gmcfgpnt  -- Contains GM PaintShop configuration settings.
%INCLUDE gmcfgdsp  -- has the dispense variable settings for configuration
%INCLUDE gmcfgtlc  -- has the dispense variable settings for configuration
%INCLUDE gmcfgpwr  -- has GM powertrain variable settings for configuration
%INCLUDE gmcfgfds  -- has GM FDS variable settings for configuration
%INCLUDE gmcfgspr  -- has GM SPR variable settings for configuration
%INCLUDE gmcfgspt  -- has GM spot application variables for configuration
%INCLUDE gmcfgpjw  -- has GM projection weld variables for configuration
%INCLUDE gmcfgdmp  -- has GM dimpler variables for configuration
%INCLUDE gmcfgvis  -- has GM vision variables for configuration
%INCLUDE gm_var    --GM variables

%INCLUDE atconst -- required for the constants for the "shell_check" variable array
%INCLUDE gmcfgstd  -- GM wizard variables for Stud Applications

CONST
Revision='2020-12-14'
%INCLUDE gmcnstnt  -- Constant file for GM

VAR
  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  num_errors   : INTEGER -- Number of Errors during Execution

  gm_status    : INTEGER
  l_stat       : INTEGER
  l_status     : INTEGER

  shell_check  IN SHADOW FROM ATSHELL  : ARRAY[MAX_CHECKS,MAX_CONDS] of BOOLEAN
  StrtinErs  : INTEGER  -- How many errors I/O error counter had when the program started

  CellVarsDone  IN SHADOW : BOOLEAN -- used to track if the inputs hve been previsously setup

  g_multiapp    IN CMOS   FROM GMCUSTO :BOOLEAN

  press_shop   : BOOLEAN

  LPT IN SHADOW FROM GMCFGPRS : BOOLEAN

  srvo_td_opt  IN SHADOW FROM GMCUSTO: BOOLEAN --servo tip dress option loaded

%INCLUDE klrdutil
%INCLUDE gmrdutil --GM common routines
ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
ROUTINE set_std_var FROM gmsetvar --set up GM Karel variables
ROUTINE arc_loaded FROM gmmain1 --ArcTool option
ROUTINE menu_scrn_ok FROM custook --intialize menu selections for custook
ROUTINE menuscrn_lst FROM custolst --intialize menu selections for custolst
ROUTINE menu_scrn_yn FROM custoyn --initialize menu selections for custoyn
-----------------------------------------------------------------------------
ROUTINE SetUpFileBck
-- PURPOSE: to setup the files to be backed up on a file backup
--
--  "ChkIfBckedup" is the routine in GMUTILITY and  will scan all the fileappbck variables and
--  make sure the file is not already in a location, returning a Boolean of its success
--
--  If not already setup, then "SetBackUpLoc" will determine which location has an empty
--  location to place the name in, it returns a string with the Fileappbck[#] to be added
--  to the secondary element of the var to be set.
--
-----------------------------------------------------------------------------
VAR

CurntAppLoc : STRING[32] -- used for setting fileappbck variable

BEGIN

-- Setup so Custom data file gets saved on backup
  IF ChkIfBckedup('gmcusto') THEN -- check if already in setup
    writeLog('  gmcusto is already setup in FILE APP BACKUP' , FALSE)
  ELSE -- Not already in file_appbck
    CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
    IF CurntAppLoc <> 'NONE' THEN
      Set_S_sVar(CurntAppLoc + '.$file_name','gmcusto.vr')
      Set_S_sVar(CurntAppLoc + '.$prog_name','gmcusto')
      Set_I_sVar(CurntAppLoc + '.$func_code',0)
      Set_I_sVar(CurntAppLoc + '.$modifier',0)
      Set_S_sVar(CurntAppLoc + '.$comment','Custom File')
      writeLog(' ' + CurntAppLoc + '.$prog_name set to gmcusto' , FALSE)
    ELSE
      writeLog('** No FILE BACKUP Opening for gmcusto to be set to. **' , TRUE)
    ENDIF
  ENDIF

-- Setup so all wizard configuration data files get saved on backup
  IF ChkIfBckedup('gmcfg*') THEN -- check if already in setup
    writeLog('  gmcfg* is already setup in FILE APP BACKUP' , FALSE)
  ELSE -- Not already in file_appbck
    CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
    IF CurntAppLoc <> 'NONE' THEN
      Set_S_sVar(CurntAppLoc + '.$file_name','gmcfg*.vr')
      Set_S_sVar(CurntAppLoc + '.$prog_name','gmcfg*')
      Set_I_sVar(CurntAppLoc + '.$func_code',0)
      Set_I_sVar(CurntAppLoc + '.$modifier',0)
      Set_S_sVar(CurntAppLoc + '.$comment','Wizard Configs')
      writeLog(' ' + CurntAppLoc + '.$prog_name set to gmcfg*' , FALSE)
    ELSE
      writeLog('** No FILE BACKUP Opening for gmcfg* to be set to. **' , TRUE)
    ENDIF
  ENDIF

-- Setup so pounce data file gets saved on backup
  IF ChkIfBckedup('gmpncdta') THEN -- check if already in setup
    writeLog('  gmpncdta is already setup in FILE APP BACKUP' , FALSE)
  ELSE -- Not already in file_appbck
    CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
    IF CurntAppLoc <> 'NONE' THEN
      Set_S_sVar(CurntAppLoc + '.$file_name','gmpncdta.vr')
      Set_S_sVar(CurntAppLoc + '.$prog_name','gmpncdta')
      Set_I_sVar(CurntAppLoc + '.$func_code',0)
      Set_I_sVar(CurntAppLoc + '.$modifier',0)
      Set_S_sVar(CurntAppLoc + '.$comment','Pounce Data')
      writeLog(' ' + CurntAppLoc + '.$prog_name set to gmpncdta' , FALSE)
    ELSE
      writeLog('** No FILE BACKUP Opening for gmpncdta to be set to. **' , TRUE)
    ENDIF
  ENDIF

-- Setup so wizard Log file gets saved on backup
  IF ChkIfBckedup('FR:\GMWIZLOG.DT') THEN -- check if already in setup
    writeLog('  GMWIZLOG.DT is already setup in FILE APP BACKUP' , FALSE)
  ELSE -- Not already in file_appbck
    CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
    IF CurntAppLoc <> 'NONE' THEN
      Set_S_sVar(CurntAppLoc + '.$file_name','GMWIZLOG.DT')
      Set_S_sVar(CurntAppLoc + '.$prog_name','FR:\GMWIZLOG.DT')
      Set_I_sVar(CurntAppLoc + '.$func_code',11)
      Set_I_sVar(CurntAppLoc + '.$modifier',0)
      Set_S_sVar(CurntAppLoc + '.$comment','Wizard Log File')
      writeLog(' ' + CurntAppLoc + '.$prog_name set to FR:\GMWIZLOG.DT' , FALSE)
    ELSE
      writeLog('** No FILE BACKUP Opening for GMWIZLOG.DT to be set to. **' , TRUE)
    ENDIF
  ENDIF

-- Setup so the atcustom is saved on Backup
  IF ChkIfBckedup('atcustom') THEN -- check if already in setup
    writeLog('  ATCUSTOM is already setup in FILE APP BACKUP' , FALSE)
  ELSE -- Not already in file_appbck
    CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
    IF CurntAppLoc <> 'NONE' THEN
      Set_S_sVar(CurntAppLoc + '.$file_name','atcustom.vr')
      Set_S_sVar(CurntAppLoc + '.$prog_name','atcustom')
      Set_I_sVar(CurntAppLoc + '.$func_code',0)
      Set_I_sVar(CurntAppLoc + '.$modifier',0)
      Set_S_sVar(CurntAppLoc + '.$comment','Customization GRS4')
      writeLog(' ' + CurntAppLoc + '.$prog_name set to atcustom' , FALSE)
    ELSE
      writeLog('** No FILE BACKUP Opening for ATCUSTOM to be set to. **' , TRUE)
    ENDIF
  ENDIF

  IF (arc_optn = FALSE) THEN --SpotTool
    -- Setup so the atcustom is saved on Backup
    IF ChkIfBckedup('homefind') THEN -- check if already in setup
      writeLog('  HOMEFIND is already setup in FILE APP BACKUP' , FALSE)
    ELSE -- Not already in file_appbck
      CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
      IF CurntAppLoc <> 'NONE' THEN
        Set_S_sVar(CurntAppLoc + '.$file_name','homefind.vr')
        Set_S_sVar(CurntAppLoc + '.$prog_name','homefind')
        Set_I_sVar(CurntAppLoc + '.$func_code',0)
        Set_I_sVar(CurntAppLoc + '.$modifier',0)
        Set_S_sVar(CurntAppLoc + '.$comment','Home Find Utilitiy')
        writeLog(' ' + CurntAppLoc + '.$prog_name set to homefind' , FALSE)
      ELSE
        writeLog('** No FILE BACKUP Opening for HOMEFIND to be set to. **' , TRUE)
      ENDIF
    ENDIF

  -- Setup so the atcustom is saved on Backup
    IF ChkIfBckedup('homeutil') THEN -- check if already in setup
      writeLog('  HOMEUTIL is already setup in FILE APP BACKUP' , FALSE)
    ELSE -- Not already in file_appbck
      CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
      IF CurntAppLoc <> 'NONE' THEN
        Set_S_sVar(CurntAppLoc + '.$file_name','homeutil.vr')
        Set_S_sVar(CurntAppLoc + '.$prog_name','homeutil')
        Set_I_sVar(CurntAppLoc + '.$func_code',0)
        Set_I_sVar(CurntAppLoc + '.$modifier',0)
        Set_S_sVar(CurntAppLoc + '.$comment','Home Robot Utility')
        writeLog(' ' + CurntAppLoc + '.$prog_name set to homeutil' , FALSE)
      ELSE
        writeLog('** No FILE BACKUP Opening for HOMEUTIL to be set to. **' , TRUE)
      ENDIF
    ENDIF

  ELSE --ArcTool

    -- Setup so the atshcust is saved on Backup
    IF ChkIfBckedup('atshcust') THEN -- check if already in setup
      writeLog('  ATSHCUST is already setup in FILE APP BACKUP' , FALSE)
    ELSE -- Not already in file_appbck
      CurntAppLoc = SetBackUpLoc -- Call routine to return available variable location
      IF CurntAppLoc <> 'NONE' THEN
        Set_S_sVar(CurntAppLoc + '.$file_name','atshcust.vr')
        Set_S_sVar(CurntAppLoc + '.$prog_name','atshcust')
        Set_I_sVar(CurntAppLoc + '.$func_code',0)
        Set_I_sVar(CurntAppLoc + '.$modifier',0)
        Set_S_sVar(CurntAppLoc + '.$comment','Arc Customization GRS4')
        writeLog(' ' + CurntAppLoc + '.$prog_name set to atshcust' , FALSE)
      ELSE
        writeLog('** No FILE BACKUP Opening for ATSHCUST to be set to. **' , TRUE)
      ENDIF
    ENDIF

  ENDIF --tool package specific settings


END SetUpFileBck
-----------------------------------------------------------------------------
ROUTINE Set_CellVars
-- PURPOSE:  this routine will set the Varibles for the Cell
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR

i,x         : INTEGER
l_dummy       : INTEGER
l_psve        : INTEGER
l_status	  : INTEGER
index      :INTEGER
l_boolean  :BOOLEAN
file_done  :BOOLEAN
a  : STRING[4]


BEGIN

  --Clear application select, ap_selap will get set when application configuration is done
  Set_B_sVar('$ap_selap[2]',FALSE)  --spot
  Set_B_sVar('$ap_selap[4]',FALSE)  --MH
  Set_B_sVar('$ap_selap[6]',FALSE)  --dispense

  --Clear process_def and process_name, these will get set when the application configuration is done
  FOR i = 1 to 5 DO
    proces_name[i] = ''
    process_def[i] = ''
  ENDFOR

IF UNINIT(eip_oct1) THEN
  eip_oct1 = 0
  WriteLog('eip_oct1 is wrong at' +int2str(eip_oct1),TRUE)
ENDIF

IF UNINIT(eip_oct2) THEN
  eip_oct2 = 0
  WriteLog('eip_oct2 is wrong at' +int2str(eip_oct2),TRUE)
ENDIF

IF UNINIT(eip_oct3) THEN
  eip_oct3 = 0
  WriteLog('eip_oct3 is wrong at' +int2str(eip_oct3),TRUE)
ENDIF
IF UNINIT(eip_oct4) THEN
  eip_oct1 = 0
  WriteLog('eip_oct4 is wrong at' +int2str(eip_oct4),TRUE)
ENDIF
IF UNINIT(eip_rtr_oct) THEN
  eip_rtr_oct = 1
ENDIF

Cell_ip = int2str(eip_oct1) + '.' + int2str(eip_oct2) + '.' + int2str(eip_oct3) +'.'+ int2str(eip_oct4)
Router_ip = int2str(eip_oct1) + '.' + int2str(eip_oct2) + '.' + int2str(eip_oct3) +'.'+ int2str(eip_rtr_oct)

IF (Cell_IP = '0.0.0.0') THEN
  WriteLog('CELL_IP is NOT CORRECT' + Cell_IP,TRUE)
ENDIF

IF (Router_IP = '0.0.0.0') THEN
  WriteLog('Router_IP is NOT CORRECT' + Router_IP,TRUE)
ENDIF

IF UNINIT(robotname) THEN
  robotname = 'Robot'
ENDIF

  --Auto negotiate settings for ENET
  Set_I_sVar('$enetmode[1].$speed',2)
  Set_I_sVar('$enetmode[2].$speed',2)

--Setup the Cell comunication port
--Port 1 Cell Network for communications for Cell communications
  Set_S_Svar('$HOSTENT[17].$H_NAME',robotname)
  Set_S_Svar('$HOSTENT[17].$H_ADDR',Cell_IP)
  WriteLog('Set Cell IP to '+Cell_IP,FALSE)

  Set_I_Svar('$HOSTENT[17].$H_ADDRTYPE',2)
  Set_I_Svar('$HOSTENT[17].$H_LENGTH',7)

  --Port 2 Local Network for communications for all enet port #2 communications
  Set_S_sVar('$HOSTENT[18].$H_NAME','')
  Set_S_sVar('$HOSTENT[18].$H_ADDR','192.168.1.2')
  WriteLog('Set ENet Port#2 to 192.168.1.2',FALSE)

  Set_I_sVar('$HOSTENT[18].$H_ADDRTYPE',2)
  Set_I_sVar('$HOSTENT[18].$H_LENGTH',7)

-- Cell Network Router for communications
  Set_S_Svar('$HOSTENT[20].$H_NAME','Router')
  Set_S_Svar('$HOSTENT[20].$H_ADDR',Router_IP)
  WriteLog('Set Router IP to '+Router_IP,FALSE)

  Set_I_Svar('$HOSTENT[20].$H_ADDRTYPE',2)
  Set_I_Svar('$HOSTENT[20].$H_LENGTH',7)

 -- Set Registers to 999
  Set_I_PVar('*NUMREG*','$MAXREGNUM',999)

 -- Set String Registers to 99
  Set_I_PVar('*STRREG*','$MAXSREGNUM',99) 

 -- Set Position Registers to 200
  Set_I_PVar('*POSREG*','$MAXPREGNUM',200) 

  -- Set Macro to 200
  Set_I_sVar('$MACRO_MAXNU',200)

  -- Weld Menu No Commenting for DI's/DO's
  Set_B_sVar('$shell_cfg.$set_iocmnt',FALSE)

  -- Timout Value
  Set_I_sVar('$WAITTMOUT',300)

  -- Hand broken
  Set_B_sVar('$SCR_GRP[1].$HBK_ENBL',TRUE)

  -- User alarm table size
  Set_I_sVar('$maxualrmnum',200)

  -- UFrames
  Set_I_sVar('$scr.$maxnumufram',20)

  -- UTools
  Set_I_sVar('$scr.$maxnumutool',20)

  IF (arc_optn = FALSE) THEN --SpotTool
    Set_B_sVar('$spotcell.$shell_poll',FALSE)
    Set_B_sVar('$spotcell.$pb_noweld',FALSE)
    Set_B_sVar('$spotcell.$pb_nostroke',FALSE)
    -- Hide Weld Sim
    Set_B_sVar('$spotconfig.$sim_hide',TRUE)

    Set_I_sVar('$SPOTCONFIG.$CUSTOM',55) --inorder to run swcustom.kl
    Set_I_sVar('$shell_cfg.$custom',2) --inorder to run atcustom which is gmatcstm.kl

    --setup cell programs to run from gmatcstm
    --production run speed
    Set_B_PVar('ATCUSTOM' , 'Prgs2RunCell[2].NeedToRun',TRUE)
    Set_B_PVar('ATCUSTOM' , 'Prgs2RunCell[2].NeedForProd',TRUE)
    Set_S_PVar('ATCUSTOM' , 'Prgs2RunCell[2].Prog_Name','gmaspd')

    -- Set Varaible so software allows recovery to be enabled for all shops
    -- GMPT will prompt user to see if the clamp error recovery for grippers is used
    Set_B_PVar('GMCFGPWR','EnblIgnrFlts',TRUE)

    -- Set Varaible so software will have user prompted for gripper cycleing
    Set_B_PVar('GMCFGPWR','PromptToOpen',TRUE)

    --Force message set to disable = 1
    IF (mfg_area <> mfg_area_ps) THEN --set for all shops but press
      Set_I_sVar('$automessage',1)
    ENDIF

    --endwld4paus --new variable for existing feature on v833p08, set to default for all
    --applications. Variable exists on all robots.
    FOR i = 1 TO 5 DO
      a = int_to_strg(i)
      Set_I_sVar('$spoteqsetup[' + a + '].$endwld4paus', 0)
    ENDFOR

  ENDIF --SpotTool

  --Clear application select, ap_selap will get set when application configuration is done
  Set_B_sVar('$ap_selap[4]',FALSE)  --MH
  Set_B_sVar('$ap_selap[6]',FALSE)  --dispense

  -- Machine Locking
  Set_B_sVar('$shell_chk[6].$enable',TRUE)
  Set_B_sVar('$shell_chk[6].$resume',TRUE)
  Set_B_sVar('$shell_chk[6].$prompt',TRUE)
  shell_check[6,1] = FALSE
  shell_check[6,2] = FALSE
  shell_check[6,3] = FALSE

  -- At Home Checking
  Set_B_sVar('$shell_chk[1].$enable',TRUE)
  Set_B_sVar('$shell_chk[1].$prompt',TRUE)
  Set_B_sVar('$shell_chk[1].$errpost',TRUE)
  shell_check[1,1] = FALSE
  shell_check[1,2] = FALSE
  shell_check[1,3] = FALSE

  -- Simulated I/O
  Set_B_sVar('$shell_chk[3].$enable',TRUE)
  Set_B_sVar('$shell_chk[3].$prompt',TRUE)
  Set_B_sVar('$shell_chk[3].$resume',TRUE)

  --Start Mode
  Set_I_sVar('$shell_cfg.$start_mode',6)
  Set_I_sVar('$shell_cfg.$prod_mode',2)

  -- Also set the type so that common shell does NOT reset index
  Set_I_sVar('$shell_cfg.$prod_mode',1)

  -- Set Style Table Array
  Set_I_sVar('$style_count',255)

  -- Step mode setting
  Set_I_sVar('$SSR.$STEPSTMTTYP',3)

  -- Sleep mode iPendant
  Set_I_sVar('$UI_CONFIG.$BLNK_TIMER',5)
  Set_B_sVar('$UI_CONFIG.$BLNK_ENABLE',TRUE)

  -- Time_Before and Distance_Before Settings for RS4-Global
  -- Product defaults are ver = 4, and tts = 1.
  Set_I_sVar('$timebf_ver',2)
  Set_I_sVar('$timebf_tts',1)
  Set_I_sVar('$distbf_ver',2)
  Set_I_sVar('$distbf_tts',1)
  IF (press_shop = TRUE) THEN  --press shop
    Set_I_sVar('$distbf_ver',1)
  ENDIF

  --Hard stop protection
  GET_VAR(l_psve, '*system*', '$mcsp.$cldpop_enb', l_boolean,  l_status)
  IF l_status = 0 THEN
    Set_B_sVar('$mcsp.$cldpop_enb',TRUE)
    Set_B_sVar('$mcsp.$trqlim_enb',TRUE)
    Set_B_sVar('$mcsp.$joglim_enb',TRUE)
  ENDIF

  --Shift Speed
  Set_I_sVar('$shftov_enb',1)

  --Disable Function and User Fav's
  Set_B_sVar('$ui_config.$enb_fctnfav',FALSE)
  Set_B_sVar('$ui_config.$enb_userfav',FALSE)

  -- Set Macro Enable Running on MF Screen
  Set_B_sVar('$MACRTPDSBEX',TRUE)

  -- Weld Menu No Commenting for DI's/DO's
  Set_B_sVar('$shell_cfg.$set_iocmnt',FALSE)

  -- Timout Value
  Set_I_sVar('$WAITTMOUT', 300)

  -- Collision Guard Variables
  l_psve = 0
  GET_VAR(l_psve, '*system*', '$hscdmngrp[1].$coll_mode', l_boolean,  gm_status)
    IF gm_status = 0 THEN
      Set_B_sVar('$hscdmngrp[1].$coll_mode',TRUE)
      Set_I_sVar('$hscdmngrp[1].$macro_reg',hscd_macreg)
    ELSE
      POST_ERR(38000, '[*SYSTEM*].$hscdmngrp[1].$coll_mode FAILED', gm_status, 0) --
      num_errors = num_errors + 1
    ENDIF

  Set_I_Svar('$thrtablenum[3]',64) -- Set DI/DO interconnects to 64

  Set_B_sVar('$SHELL_WRK.$KAREL_IOUOP',TRUE)
  Set_B_sVar('$BLAL_OUT.$BATALM_OR',TRUE)

  --Prompt Boxes
  $PRMPDSPOUT = prmp_sdout      -- DO prompt displayed

  -- Disable EIP brodcast signal every 10 minutes
  -- GM's Weld controllers can NOT deal with it.
  l_psve = 0
  GET_VAR(l_psve, '*system*', '$rdm_cfg.$disable', l_boolean,  l_status)
  IF l_status = 0 THEN
    Set_B_sVar('$rdm_cfg.$disable',TRUE)
  ENDIF

  IF (arc_optn = FALSE) THEN --SpotTool
    IF (mfg_area <> mfg_area_ps) THEN --Not Press Shop
      Set_I_sVar('$RSMFST_SV.$FFAST_DO.$PORT_NUM',ffr_dout)
      SELECT bshop_proc1 OF
        CASE(spotappl, studappl, projappl):
          -- FFR Configuration
          Set_B_sVar('$RSMFST_SV.$FFAST_ENBL',TRUE)
          Set_I_sVar('$RSMPRG_SV.$SVPRG_ENBLE',3)
          Set_B_sVar('$SVPRG_ENB',TRUE)
        ELSE:
      ENDSELECT
      SELECT bshop_proc2 OF
        CASE(spotappl, studappl, projappl):
          -- FFR Configuration
          Set_B_sVar('$RSMFST_SV.$FFAST_ENBL',TRUE)
          Set_I_sVar('$RSMPRG_SV.$SVPRG_ENBLE',3)
          Set_B_sVar('$SVPRG_ENB',TRUE)
        ELSE:
      ENDSELECT
    ENDIF
  ELSE --ArcTool
    Set_I_sVar('$RSMFST_SV.$FFAST_DO.$PORT_NUM',ffr_dout)
    Set_B_sVar('$RSMFST_SV.$FFAST_ENBL',TRUE)
    Set_I_sVar('$RSMPRG_SV.$SVPRG_ENBLE',3)
    Set_B_sVar('$SVPRG_ENB',TRUE)
  ENDIF 



  Set_B_sVar('$ASBN_CONFIG.$POS_CHECK',FALSE) --allows LS files to be loaded with uninitalized taught points

  Set_I_sVar('$INVISTP_ENB',1) --enable Use No-display Sub-Program

 IF Chk_Feature('J573') THEN -- if LVC not load dont set the variable
   Set_R_sVar('$LVGRP[1].$LVC_FLTER[6]', 202.000)
 ENDIF

--IF (mfg_area = mfg_area_pt) THEN -- Only Shop added 10-03-17

  IF Chk_Feature('R861') THEN --auto exit is installed on the robot

    Set_I_sVar('$AUTOEX_CONF.$ENABLE',1) -- ENABLE EXIT PATH-- should be in product
    Set_B_sVar('$AUTOEX_CNF2.$CLOSEST_ENB',TRUE) -- ENABLE find closest node EXIT PATH-- RK-12-14-2020  RK 1-18-2021 switched to boolen routine

    RUN_TASK('AECTRL',0,FALSE,FALSE,0,gm_status)-- added 10-03-17 due to two controlled starts
     IF gm_status <> 0 THEN                       -- required when enabling without user doing manually and
       POST_ERR(38000,'AECTRL FAILED TO START', gm_status,0) -- pressing the apply
       WriteLog('AECTRL FAILED TO START',TRUE)
       DELAY 2000
     ENDIF

  ENDIF --only install if auto exit is installed on the robot
--ENDIF

  Set_I_sVar('$SFZN_CFG.$ENABLE',1) --Enable J2 protection

  Set_B_sVar('$MACRTPDSBEX', FALSE)

  --Fanuc Server Access Control set to read only
  --Set_I_sVar('$fsac_enable', 1)
  --Set_I_sVar('$fsac_def_lv', 0)

--schoensm 11-1-2019 FTP connection change
  FOR i = 2 TO 4 DO
    a = int_to_strg(i)
    Set_S_sVar('$HOSTS_CFG[' + a + '].$COMMENT','') 
    Set_S_sVar('$HOSTS_CFG[' + a + '].$PROTOCOL','') 
    Set_I_sVar('$HOSTS_CFG[' + a + '].$OPER',0)
    Set_I_sVar('$HOSTS_CFG[' + a + '].$STATE',1)
    Set_I_sVar('$HOSTS_CFG[' + a + '].$TIMEOUT',4)
  ENDFOR
    
  --V8.33P10 Set Stack Size to 600, 9-21-2020 schoensm
  Set_I_sVar('$extstksiz', 600)  

  --V8.33P10 Servo Off Time to 60sec, 10-02-2020 schoensm	
  GET_VAR(l_psve, '*system*', '$SCR_GRP[1].$NUM_AXES', l_dummy,  l_status)  
  FOR i = 1 TO l_dummy DO
    a = int_to_strg(i)
    Set_I_sVar('$PARAM_GROUP[1].$SV_OFF_TIME[' + a + ']',60000)
    Set_B_sVar('$PARAM_GROUP[1].$SV_OFF_ENB[' + a + ']', TRUE)
  ENDFOR	

END Set_CellVars
-----------------------------------------------------------------------------
ROUTINE set_zdt
-- PURPOSE:  this routine sets ZDT variables, runs going to cold due to
--           group settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
i,l_grp: INTEGER
a  : STRING[4]

BEGIN

  --ZDT Standard
  Set_B_sVar('$RCMCFG.$TPLOG_ENB', TRUE)
  Set_B_sVar('$RCMCFG.$VARLOG_ENB', TRUE)

  --Application Status
  Set_B_sVar('$IRCA_CFG[1].$ENABLE', TRUE)

  --iRDiagnostics
  Set_I_sVar('$SERV_MAIL', 1)
  Set_I_sVar('$PRGNS_CFG.$MAILEVENT', 1)
  Set_I_sVar('$CONDET_CFG.$ENABLE', 1)  
  FOR l_grp = 1 to $SCR.$NUM_GROUP DO
    CNV_INT_STR(l_grp, 1, 0, a)
    a = SUB_STR(a, 2, 3)
    Set_I_sVar('$CONDET_GRP[' + a + '].$ENABLE', 1)
    Set_I_sVar('$CONDET_GRP[' + a + '].$DATA_TYPE', 7)
  ENDFOR

  --production path
  Set_B_sVar('$mfrq_cfg.$enable', TRUE)

  --Flex Data
  Set_I_sVar('$CONDET_CFG.$EXT_MASK', 63) 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[1].$PROG_NAME', '*SYSTEM*')
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[1].$VAR_NAME', '$SFZN_CFG.$ENABLE') 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[1].$REG_NUM', 0) 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[1].$STYLE', 0) 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[2].$PROG_NAME', '*SYSTEM*') 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[2].$VAR_NAME', '$MNUFRAMENUM[1]') 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[2].$REG_NUM', 0) 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[2].$STYLE', 0) 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[3].$PROG_NAME', '*SYSTEM*') 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[3].$VAR_NAME', '$MNUTOOLNUM[1]') 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[3].$REG_NUM', 0) 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[3].$STYLE', 0) 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[4].$PROG_NAME', '*SYSTEM*') 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[4].$VAR_NAME', '$HSCDMNGRP[1].$THRESHOLD') 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[4].$REG_NUM', 0) 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[4].$STYLE', 0) 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[5].$PROG_NAME', '*SYSTEM*')
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[5].$VAR_NAME', '$MCR.$GENOVERRIDE') 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[5].$REG_NUM', 0) 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[5].$STYLE', 0) 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[6].$PROG_NAME', '') 
  Set_S_sVar('$CONDET_CFG.$EXT_DATA[6].$VAR_NAME', '')
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[6].$REG_NUM', 50) 
  Set_I_sVar('$CONDET_CFG.$EXT_DATA[6].$STYLE', 0) 

  --H607 R2000iB/100P, H730 R2000iC/100P, H630 M900iA/200P
  IF (Chk_Feature('H630')) OR (Chk_Feature('H607')) OR (Chk_Feature('H730')) THEN  
    Set_I_sVar('$CONDET_CFG.$ENABLE', 1)
    Set_I_sVar('$CONDET_CFG.$MODE', 28)  	  
    Set_I_sVar('$CONDET_TRIG.$IO_TYPE', 2)  	
    Set_I_sVar('$CONDET_TRIG.$IO_PORT', 313)
    Set_I_sVar('$CONDET_TRIG.$IO_STYLE', 0)
    Set_I_sVar('$CONDET_TRIG.$DELAY', 10)
    Set_I_sVar('$CONDET_TRIG.$STYLE_TYPE', 18)
    Set_I_sVar('$CONDET_TRIG.$STYLE_PORT', 1)

    --Flex Data, added loop to shrink pc size during V8.33P10
    FOR i = 1 to 6 DO
      Set_I_sVar('$CONDET_CFG.$EXT_DATA[i].$STYLE', 2)
    ENDFOR
  ENDIF

END set_zdt
-----------------------------------------------------------------------------
ROUTINE set_usralrm
-- PURPOSE:  this routine sets up the user alarms
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
  i: INTEGER

BEGIN

  -- All robots user alarms
  Set_S_sVar('$UALRM_MSG[1]','INVALID ARGUMENT RECEIVED')
  Set_I_sVar('$UALRM_SEV[1]',2) --pause program

  Set_S_sVar('$UALRM_MSG[2]','INVALID DECISION CODE')
  Set_I_sVar('$UALRM_SEV[2]',0)  --no action

  Set_S_sVar('$UALRM_MSG[3]','WAITING FOR MAINTENANCE')
  Set_I_sVar('$UALRM_SEV[3]',6) --pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[4]','Tip Dresser 1 Disconnect Off')
  Set_I_sVar('$UALRM_SEV[4]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[5]','Tip Dresser 1 Jammed')
  Set_I_sVar('$UALRM_SEV[5]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[6]','Tip Dress G1 Current Too Low')
  Set_I_sVar('$UALRM_SEV[6]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[7]','Tipdresser(s) Not in Auto')
  Set_I_sVar('$UALRM_SEV[7]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[8]','TipDress 1 Motor Not Started')
  Set_I_sVar('$UALRM_SEV[8]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[9]','TipDress 1 Motor Not Stopped')
  Set_I_sVar('$UALRM_SEV[9]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[10]','STEPPER NOT RESET')
  Set_I_sVar('$UALRM_SEV[10]',6) --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[11]','Watersaver 1 Unable To Reset')
  Set_I_sVar('$UALRM_SEV[11]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[12]','Watersaver 2 Unable To Reset')
  Set_I_sVar('$UALRM_SEV[12]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[13]','Tip Dresser 1 Phase Loss')
  Set_I_sVar('$UALRM_SEV[13]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[14]','TipDress Not Acnowledged WC1')
  Set_I_sVar('$UALRM_SEV[14]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[15]','TipDress Not Acnowledged WC2')
  Set_I_sVar('$UALRM_SEV[15]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[16]','Tip Dresser 2 Disconnect Off')
  Set_I_sVar('$UALRM_SEV[16]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[17]','Tip Dresser 2 Jammed')
  Set_I_sVar('$UALRM_SEV[17]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[18]','Tip Dress G2 Current Too Low')
  Set_I_sVar('$UALRM_SEV[18]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[19]','TipDress 2 Motor Not Started')
  Set_I_sVar('$UALRM_SEV[19]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[20]','TipDress 2 Motor Not Stopped')
  Set_I_sVar('$UALRM_SEV[20]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[21]','Tip Dresser 2 Phase Loss')
  Set_I_sVar('$UALRM_SEV[21]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[23]','WTR 1: WATER NOT OFF')
  Set_I_sVar('$UALRM_SEV[23]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[24]','WTR 2: WATER NOT OFF')
  Set_I_sVar('$UALRM_SEV[24]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[25]','TipDresG1 Dump Not Advanced')
  Set_I_sVar('$UALRM_SEV[25]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[26]','TipDresG1 Dump Not Retracted')
  Set_I_sVar('$UALRM_SEV[26]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[27]','TipDressG2 Dump Not Advanced')
  Set_I_sVar('$UALRM_SEV[27]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[28]','TipDresG2 Dump Not Retracted')
  Set_I_sVar('$UALRM_SEV[28]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[29]','TipDressG3 Dump Not Advanced')
  Set_I_sVar('$UALRM_SEV[29]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[30]','TipDresG3 Dump Not Retracted')
  Set_I_sVar('$UALRM_SEV[30]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[31]','TipDressG4 Dump Not Advanced')
  Set_I_sVar('$UALRM_SEV[31]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[32]','TipDresG4 Dump Not Retracted')
  Set_I_sVar('$UALRM_SEV[32]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[34]','Tip Dresser 3 Disconnect Off')
  Set_I_sVar('$UALRM_SEV[34]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[35]','Tip Dresser 3 Jammed')
  Set_I_sVar('$UALRM_SEV[35]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[36]','Tip Dress G3 Current Too Low')
  Set_I_sVar('$UALRM_SEV[36]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[37]','TipDress 3 Motor Not Started')
  Set_I_sVar('$UALRM_SEV[37]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[38]','TipDress 3 Motor Not Stopped')
  Set_I_sVar('$UALRM_SEV[38]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[39]','Tip Dresser 3 Phase Loss')
  Set_I_sVar('$UALRM_SEV[39]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[40]','Tip Dresser 4 Disconnect Off')
  Set_I_sVar('$UALRM_SEV[40]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[41]','Tip Dresser 4 Jammed')
  Set_I_sVar('$UALRM_SEV[41]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[42]','Tip Dress G4 Current Too Low')
  Set_I_sVar('$UALRM_SEV[42]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[43]','TipDress 4 Motor Not Started')
  Set_I_sVar('$UALRM_SEV[43]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[44]','TipDress 4 Motor Not Stopped')
  Set_I_sVar('$UALRM_SEV[44]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[45]','Tip Dresser 4 Phase Loss')
  Set_I_sVar('$UALRM_SEV[45]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[46]','Check Tipdress Dump Pin(s)')
  Set_I_sVar('$UALRM_SEV[46]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[47]','Tipdress Equalizer Fault')
  Set_I_sVar('$UALRM_SEV[47]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[48]','TipDresser Current High')
  Set_I_sVar('$UALRM_SEV[48]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[49]','Cap Change ERROR')
  Set_I_sVar('$UALRM_SEV[49]',38)  --Pause

  Set_S_sVar('$UALRM_MSG[50]','Tool Changer Fault')
  Set_I_sVar('$UALRM_SEV[50]',6 ) --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[51]','Part Count Fault')
  Set_I_sVar('$UALRM_SEV[51]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[52]','Find Count Fault')
  Set_I_sVar('$UALRM_SEV[52]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[53]','2D Fault')
  Set_I_sVar('$UALRM_SEV[53]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[54]','3D Fault')
  Set_I_sVar('$UALRM_SEV[54]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[55]','Part Present Fault')
  Set_I_sVar('$UALRM_SEV[55]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[56]','Search Sensor Fault')
  Set_I_sVar('$UALRM_SEV[56]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[57]','End of Search Fault')
  Set_I_sVar('$UALRM_SEV[57]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[58]','Over Travel Fault')
  Set_I_sVar('$UALRM_SEV[58]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[59]','Anti Crash Fault')
  Set_I_sVar('$UALRM_SEV[59]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[60]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[60]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[61]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[61]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[62]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[62]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[63]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[63]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[64]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[64]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[65]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[65]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[66]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[66]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[67]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[67]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[68]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[68]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[69]','iRVis Reserved')
  Set_I_sVar('$UALRM_SEV[69]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[70]','Key Switch NOT in AUTO')
  Set_I_sVar('$UALRM_SEV[70]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[71]','Gun/Backup NOT OPEN')
  Set_I_sVar('$UALRM_SEV[71]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[73]','Cap off detected')
  Set_I_sVar('$UALRM_SEV[73]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[74]','Caps not in the cartridge')
  Set_I_sVar('$UALRM_SEV[74]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[75]','Cap not removed/installed')
  Set_I_sVAr('$UALRM_SEV[75]',6)  --Pause program and stop its motion

  Set_S_sVar('$UALRM_MSG[76]','Adapt. Resistance Chk Failed')
  Set_I_SVar('$UALRM_SEV[76]',38)

  Set_S_sVar('$UALRM_MSG[77]','TD Verification Chk Failed')
  Set_I_sVar('$UALRM_SEV[77]',38)

  Set_S_sVar('$UALRM_MSG[78]','Caps not same as detached')
  Set_I_sVar('$UALRM_SEV[78]',11) --abort program and cancel its motion

  Set_S_sVar('$UALRM_MSG[80]','TP Program or DISP_SEQ Error')
  Set_I_sVar('$UALRM_SEV[80]',6) --Pause program and stop its motion

  FOR i = 180 TO 200 DO
    Set_S_sVar('$UALRM_MSG[' + int2str(i) + ']','PaintShop Reserved')
    Set_I_sVar('$UALRM_SEV[' + int2str(i) + ']',6) --abort program and cancel its motion      
  ENDFOR

END set_usralrm
-----------------------------------------------------------------------------
ROUTINE set_process
-- PURPOSE:  this routine will set the process definition and names
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
i: INTEGER

BEGIN

  FOR i = 1 TO 5 DO
    process_def[i] = ''
    proces_name[i] = ''
  ENDFOR

  IF (num_proc = 0) THEN --No processes
    FOR i = 1 TO 2 DO
      process_def[i] = 'None'
    ENDFOR
    FOR i = 1 TO 5 DO
      proces_name[i] = '(NONE)'
    ENDFOR
  ENDIF

  IF (numwldctrl = 1) THEN --process 1 is a spotwelder
    num_process = 1
    process_def[1] = 'Spot'
    proces_name[1] = '(SPOT1)'
  ENDIF

  IF (numwldctrl = 2) THEN --process 1 and 2 is a spotwelder
    num_process = 2
    process_def[1] = 'Spot'
    process_def[2] = 'Spot'
    proces_name[1] = '(SPOT1)'  
    proces_name[2] = '(SPOT2)'  
  ENDIF

  IF ((numstudctrl = 1) AND (bshop_proc1 = studappl)) THEN
    process_def[1] = 'Stud'
    proces_name[1] = '(STUD1)'
  ENDIF

  IF ((numstudctrl = 1) AND (bshop_proc2 = studappl)) THEN
    process_def[2] = 'Stud'
    proces_name[2] = '(STUD2)'
  ENDIF

  IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND ((bshop_proc1 = dispappl) OR (Use_Dispense) OR (pnt_dsp_used)))) THEN --controller 1 setup can be executed
    process_def[1] = 'Dispense'
    proces_name[1] = '(DISP1)'
  ENDIF

 IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND (bshop_proc2 = dispappl))) THEN
    process_def[2] = 'Dispense'
    proces_name[2] = '(DISP2)'
 ENDIF

 IF ((numfdsctrl = 1) AND (bshop_proc1 = fdsappl)) THEN --FDS application on process 1
    process_def[1]= 'FDS'
    proces_name[1] = '(FDS1)'
 ENDIF

 IF ((numfdsctrl = 1) AND (bshop_proc2 = fdsappl)) THEN --FDS application on process 2
    process_def[2]= 'FDS'
    proces_name[2] = '(FDS2)'
 ENDIF

 IF ((numsprctrl = 2) OR ((numsprctrl = 1) AND (bshop_proc1 = sprappl))) THEN 
    process_def[1]= 'SPR'
    proces_name[1] = '(SPR1)'  
 ENDIF  
 IF ((numsprctrl = 2) OR ((numsprctrl = 1) AND (bshop_proc2 = sprappl))) THEN
    process_def[2]= 'SPR'
    proces_name[2] = '(SPR2)'  
 ENDIF   

 IF ((numprojctrl = 1) AND (bshop_proc1 = projappl)) THEN -- process 1 is a projection welder
    process_def[1] = 'Spot'    --must be spot for spot functionality
    proces_name[1] = '(PROJ1)'
 ENDIF
 IF ((numprojctrl = 1) AND (bshop_proc2 = projappl)) THEN -- process 2 is a projection welder
    process_def[2] = 'Spot'    --must be spot for spot functionality
    proces_name[2] = '(PROJ2)'
 ENDIF

 IF ((numdimpctrl = 1) AND (bshop_proc1 = dimpappl)) THEN -- process 1 is a dimpler
    process_def[1] = 'Dimp'    
    proces_name[1] = '(DIMP1)'
 ENDIF
 IF ((numdimpctrl = 1) AND (bshop_proc2 = dimpappl)) THEN -- process 2 is a dimpler
    process_def[2] = 'Dimp'    
    proces_name[2] = '(DIMP2)'
 ENDIF

 --Multiapp Variable Configuration
 SELECT mfg_area OF --manufacturing area, only bodyshop has multi-apps
   CASE(mfg_area_bs):  --bodyshop
     SELECT num_proc OF --number of body shop applications
       CASE(0,1):  --single or no process
         g_multiapp = FALSE
       CASE(2):  --multiprocess
         IF (((bshop_proc1 = spotappl) AND (bshop_proc2 = spotappl)) OR ((bshop_proc1 = dispappl) AND (bshop_proc1 = dispappl)) OR ((bshop_proc1 = sprappl) AND (bshop_proc2 = sprappl))) THEN --not combo
           g_multiapp = FALSE
         ELSE --combo
           g_multiapp = TRUE
         ENDIF
       ELSE:
     ENDSELECT --number of body shop processes   
   ELSE:
     g_multiapp = FALSE
  ENDSELECT -- manufacturing area

END set_process
-----------------------------------------------------------------------------
ROUTINE SetWebScreen
-- PURPOSE:  this routine sets up the web screen
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR

 i   :INTEGER
 a   :STRING[4]
 tip_drs:  BOOLEAN
 LPT_loaded: BOOLEAN

BEGIN

  SPRUNCMD ('frclrpr', gm_status)

  --Clear menu favourites
  FOR i = 1 to 10 DO
    CNV_INT_STR(i, 1, 0, a)
    a = SUB_STR(a, 2, 3)
    Set_S_sVAR('$UI_CONFIG.$MENU_FAVS[' + a + ']','')
  ENDFOR

  -- Clear Function Fav's if someone Enables
  FOR i = 1 to 10 DO
    CNV_INT_STR(i, 1, 0, a)
    a = SUB_STR(a, 2, 3)
    Set_I_sVar('$UI_FCTNFAV[' + a + '].$PRESS_PTR',0)
    Set_S_sVar('$UI_FCTNFAV[' + a + '].$RELEAS_TEXT','')
    Set_S_sVar('$UI_FCTNFAV[' + a + '].$PRESS_ICON','')
    Set_I_sVar('$UI_FCTNFAV[' + a + '].$RELEAS_PTR',0)
  ENDFOR

  --Disable Function and User Fav's
  Set_B_sVar('$ui_config.$enb_fctnfav',FALSE)
  Set_B_sVar('$ui_config.$enb_userfav',FALSE)

  SPRUNCfile('FRH:\cgtp\wizinst.stm', 'FR:\wizinst.stm')
  SPRUNCMD('COPY FRH:\cgtp\ProdHome.stm FR:\ProdHome.stm', gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy ProdHome.stm to FR', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRH:\cgtp\PrdSpd.stm FR:\PrdSpd.stm', gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy PrdSpd.stm to FR', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRH:\cgtp\GM_lib.stm FR:\GM_lib.stm', gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy GM_lib.stm to FR', 0,0)
    ENDIF
  SPRUNCMD('COPY FRH:\cgtp\speedhelp.stm FR:\speedhelp.stm', gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy speedhelp.stm to FR', 0,0)
    ENDIF

  SPRUNCMD('COPY FRH:\cgtp\pointing.gif FRH:\gui\h17d0a.gif', gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy h17d0a.gif to FRH', 0, 0)
    ENDIF
  SPRUNCMD('COPY FRH:\gui\spd.jpg FR:\spd.jpg', gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy spd.jpg to FR', 0, 0)
    ENDIF

  Set_S_sVar('$TX_SCREEN[1].$DESTINATION', 'ProdHome.stm')
  Set_S_sVar('$TX_SCREEN[1].$SCREEN_NAME', 'PROD HOME')
  Set_S_sVar('$UI_CONFIG.$MENU_FAVS[1]','/SOFTPART/GENLINK?current=menupage,381,10')

  --Vision
  IF Use_Vision THEN  --vision
    SELECT VisSys_Type OF --launch setup based on vision application
      CASE(vis_irvis):  --Fanuc iRVision
        SPRUNCMD('COPY FRH:\cgtp\static_rslt.stm FR:\staticresults.stm', gm_status)   
          IF (gm_status <> 0) THEN
            POST_ERR(38000, 'Failed to copy staticresults.stm to FR', 0, 0)
          ENDIF
        SPRUNCMD('COPY FRH:\gui\MONISTA.gif FRH:\gui\h17d11.gif', gm_status)   
          IF (gm_status <> 0) THEN
            POST_ERR(38000, 'Failed to copy monista.gif to FRH', 0, 0)
          ENDIF
        Set_S_sVar('$TX_SCREEN[8].$DESTINATION', '/fr/staticresults.stm')
        Set_S_sVar('$TX_SCREEN[8].$SCREEN_NAME', 'VIS STATS')
        Set_S_sVar('$UI_CONFIG.$MENU_FAVS[9]', '/SOFTPART/GENLINK?current=menupage,381,17')  --staticresults
        Set_S_sVar('$UI_CONFIG.$MENU_FAVS[10]', '/SOFTPART/GENLINK?current=menupage,1527,1')  --vision setup link      
      ELSE:
    ENDSELECT
  ENDIF --vision

  IF (arc_optn = FALSE) THEN --SpotTool
    -- Spot Weld Fav.
    Set_S_sVar('$UI_CONFIG.$MENU_FAVS[2]','/SOFTPART/GENLINK?current=menupage,952,1')

    IF UNINIT(UseToolChngr) THEN
      UseToolChngr = FALSE
    ENDIF

    IF (((UseToolChngr = TRUE) AND (mfg_area <> mfg_area_ps)) OR ((mfg_area = mfg_area_bs) AND ((STUD1_BACKUP = wizans_yes) OR (STUD2_BACKUP = wizans_yes)))) THEN  --ATI webpage set up differently for press
      Set_S_sVar('$TX_SCREEN[7].$DESTINATION', 'gmtcstat.stm')
      Set_S_sVar('$TX_SCREEN[7].$SCREEN_NAME', 'ToolChanger')
      Set_S_sVar('$UI_CONFIG.$MENU_FAVS[8]', '/SOFTPART/GENLINK?current=menupage,381,16')    
      SPRUNCMD('COPY FRH:\cgtp\ati_h17d0e.gif FRH:\gui\h17d10.gif', gm_status)   
        IF (gm_status <> 0) THEN
          POST_ERR(38000, 'Failed to copy h17d10.gif to FRH', 0, 0)
        ENDIF
    ENDIF

    --Dispense Application
    IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND ((bshop_proc1 = dispappl) OR (Use_Dispense) OR (pnt_dsp_used)))) THEN --controller 1 setup can be executed
      Set_S_sVar('$TX_SCREEN[3].$DESTINATION', 'gmsca1.stm')
      Set_S_sVar('$TX_SCREEN[3].$SCREEN_NAME', 'SCA#1')
      Set_S_sVar('$UI_CONFIG.$MENU_FAVS[3]', '/SOFTPART/GENLINK?current=menupage,381,12')
      SPRUNCMD('COPY FRH:\cgtp\h17d0c_disp.gif FRH:\gui\h17d0c.gif', gm_status) 
        IF (gm_status <> 0) THEN
          POST_ERR(38000, 'Failed to copy h17d0c.gif to FRH', 0, 0)
        ENDIF       
    ENDIF
    IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND (bshop_proc2 = dispappl))) THEN --controller 2 setup can be executed
      Set_S_sVar('$TX_SCREEN[6].$DESTINATION', 'gmsca2.stm')
      Set_S_sVar('$TX_SCREEN[6].$SCREEN_NAME', 'SCA#2')
      Set_S_sVar('$UI_CONFIG.$MENU_FAVS[6]', '/SOFTPART/GENLINK?current=menupage,381,15')
      SPRUNCMD('COPY FRH:\cgtp\h17d0f_disp.gif FRH:\gui\h17d0f.gif', gm_status)
        IF (gm_status <> 0) THEN
          POST_ERR(38000, 'Failed to copy h17d0f.gif to FRH', 0, 0)
        ENDIF
    ENDIF  --Dispense application

    SELECT mfg_area OF  --shop specific web screen setup
      CASE(mfg_area_ps):  --press shop
        LPT_loaded = FALSE -- set to false and both options load will make TRUE
        IF (Chk_Feature('R885')) THEN -- check to see if LPT option is Loaded
          IF (Chk_Feature('H630')) THEN -- will return true if "M-900iA/200P " found in feature List
            LPT_loaded = TRUE
          ENDIF
        ENDIF
        IF (LPT_loaded = TRUE) THEN --LPT
          SPRUNCfile('FRH:\cgtp\lpt1_man.stm', 'FR:\lpt1_man.stm')  --correct lpt1_man.stm
          SPRUNCfile('FRH:\cgtp\lpt1_odm.stm', 'FR:\lpt1_odm.stm')
          SPRUNCfile('FRH:\cgtp\h17d0c_press.gif', 'FRH:\gui\h17d0c.gif')-- this is wrench and screw driver
          SPRUNCfile('FRH:\cgtp\h17d0d_press.gif', 'FRH:\gui\h17d0d.gif')-- this is the odomenter
          SPRUNCfile('FRH:\gui\lpt1m.gif', 'FRH:\lpt1m.gif')
          SPRUNCfile('FRH:\gui\gmlogo.jpg', 'FRH:\CGTP\gmlogo.jpg')
          Set_S_sVar('$UI_CONFIG.$MENU_FAVS[4]','/SOFTPART/GENLINK?current=menupage,381,12')
          Set_S_sVar('$TX_SCREEN[4].$DESTINATION','lpt1_odm.stm')
          Set_S_sVar('$TX_SCREEN[4].$SCREEN_NAME','LPT (km)')
          Set_S_sVar('$UI_CONFIG.$MENU_FAVS[3]','/SOFTPART/GENLINK?current=menupage,381,13')
          Set_S_sVar('$TX_SCREEN[3].$DESTINATION','lpt1_man.stm')
          Set_S_sVar('$TX_SCREEN[3].$SCREEN_NAME','LPT Man')
        ENDIF --LPT
        -- added for the ATI short cut
        SPRUNCfile('FRH:\cgtp\ati_h17d0e.gif','FRH:\gui\h17d0e.gif')-- updated 12/7/16  JPG to GIF
        SPRUNCfile('FRH:\cgtp\gmatired.stm','FR:\gmatired.stm')
        Set_S_sVar('$UI_CONFIG.$MENU_FAVS[5]','/SOFTPART/GENLINK?current=menupage,381,14')
        Set_S_sVar('$TX_SCREEN[5].$DESTINATION','http://192.168.1.54')--was GMATIRED.STM 12-6-16
        Set_S_sVar('$TX_SCREEN[5].$SCREEN_NAME','ATI TC')

      CASE(mfg_area_bs):  --bodyshop
        IF (numwldctrl <> 0) THEN  --spot welding application
          Set_S_sVar('$TX_SCREEN[3].$DESTINATION', 'gmwtc1.stm')
          Set_S_sVar('$TX_SCREEN[3].$SCREEN_NAME', 'WTC#1')
          Set_S_sVar('$UI_CONFIG.$MENU_FAVS[4]', '/SOFTPART/GENLINK?current=menupage,381,12')    
          SPRUNCMD('COPY FRH:\cgtp\h17d0c_wtc.gif FRH:\gui\h17d0c.gif', gm_status)   
            IF (gm_status <> 0) THEN
              POST_ERR(38000, 'Failed to copy h17d0c.gif to FRH', 0, 0)
            ENDIF  
          IF (wldapp[1].wld_wtreip = wizans_yes) THEN --setup water saver
            Set_S_sVar('$TX_SCREEN[2].$DESTINATION', 'http://192.168.1.48')
            Set_S_sVar('$TX_SCREEN[2].$SCREEN_NAME', 'Pro. WS#1')
            Set_S_sVar('$UI_CONFIG.$MENU_FAVS[3]', '/SOFTPART/GENLINK?current=menupage,381,11')
          ENDIF --water saver
          IF (numwldctrl = 2) THEN --spot weld process 2   
            Set_S_sVar('$TX_SCREEN[6].$DESTINATION', 'gmwtc2.stm')
            Set_S_sVar('$TX_SCREEN[6].$SCREEN_NAME', 'WTC#2')
            Set_S_sVar('$UI_CONFIG.$MENU_FAVS[7]', '/SOFTPART/GENLINK?current=menupage,381,15')    
            SPRUNCMD('COPY FRH:\cgtp\h17d0f_wtc.gif FRH:\gui\h17d0f.gif', gm_status)  
              IF (gm_status <> 0) THEN
                POST_ERR(38000, 'Failed to copy h17d0f.gif to FRH', 0, 0)
              ENDIF
            IF (wldapp[2].wld_wtreip = wizans_yes) THEN --setup water saver
              Set_S_sVar('$TX_SCREEN[5].$DESTINATION', 'http://192.168.1.50')
              Set_S_sVar('$TX_SCREEN[5].$SCREEN_NAME', 'Pro. WS#2')
              Set_S_sVar('$UI_CONFIG.$MENU_FAVS[6]', '/SOFTPART/GENLINK?current=menupage,381,14') 
            ENDIF --water saver        
          ENDIF  --spot weld process 2

          --tip dress
          sp_eqnum = 1       --initialize equipment setup for wizard to equipment 1
          sp_gnnum = 1       --initialize gun setup for wizard questions to gun 1	
          sp_eqgn_num = spttl_eq1gn  --initialize guns per equipment tracker
          tip_drs = FALSE  --initialize to false
          FOR sp_eqnum = 1 TO sp_ttl_eq DO
            FOR sp_gnnum = 1 TO sp_eqgn_num DO    
              IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_td = wizans_yes) THEN --tipdress
                tip_drs = TRUE
              ENDIF --tip dress
            ENDFOR
            IF (spttl_eq2gn = 2) THEN --reinitialize variables for equipment 2 gun setup
              sp_eqgn_num = sp_ttl_gn
            ENDIF
          ENDFOR 
          IF (tip_drs = TRUE) THEN --tipdress on robot
            IF (servotipdrs = wizans_yes) THEN
              Set_S_sVar('$TX_SCREEN[4].$DESTINATION', 'gmstd1.stm')
              Set_S_sVar('$TX_SCREEN[4].$SCREEN_NAME', 'Servo Tip dress')
            ELSE
              Set_S_sVar('$TX_SCREEN[4].$DESTINATION', 'gmtd1.stm')
              Set_S_sVar('$TX_SCREEN[4].$SCREEN_NAME', 'Tip dress')
            ENDIF --servo tipdress
          Set_S_sVar('$UI_CONFIG.$MENU_FAVS[5]', '/SOFTPART/GENLINK?current=menupage,381,13')
          ENDIF --tipdress
        ENDIF --spot welding application

        IF (numprojctrl <> 0) THEN --application has projection welding
          IF ((bshop_proc1 = projappl) OR (((bshop_proc1 = spotappl) AND (wld1_app = wld1app_cg)) AND ((bshop_proc2 = projappl) AND (proj1_app = pjw1app_cg)))) THEN  --proc1 is proj OR combo cg swg + cg proj TC
            IF (projwldapp[1].proj_ctrl = pjw_wtc) THEN --WTC weld controller is used 
              Set_S_sVar('$TX_SCREEN[3].$DESTINATION', 'gmwtc1.stm')
              Set_S_sVar('$TX_SCREEN[3].$SCREEN_NAME', 'WTC#1')
              Set_S_sVar('$UI_CONFIG.$MENU_FAVS[4]', '/SOFTPART/GENLINK?current=menupage,381,12')    
              SPRUNCMD('COPY FRH:\cgtp\h17d0c_wtc.gif FRH:\gui\h17d0c.gif', gm_status)   
                IF (gm_status <> 0) THEN
                  POST_ERR(38000, 'Failed to copy h17d0c.gif to FRH', 0, 0)
                ENDIF
            ENDIF --WTC weld controller is used
          ENDIF  --proc1 is proj OR combo cg swg + cg proj TC
          IF (((bshop_proc1 = spotappl) AND (wld1_app = wld1app_pg)) AND ((bshop_proc2 = projappl) AND (proj1_app = pjw1app_pg))) THEN  -- combo ped swg + ped proj 
            IF (projwldapp[1].proj_ctrl = pjw_wtc) THEN --WTC weld controller is used
              Set_S_sVar('$TX_SCREEN[6].$DESTINATION', 'gmwtc2.stm')
              Set_S_sVar('$TX_SCREEN[6].$SCREEN_NAME', 'WTC#2')
              Set_S_sVar('$UI_CONFIG.$MENU_FAVS[7]', '/SOFTPART/GENLINK?current=menupage,381,15')    
              SPRUNCMD('COPY FRH:\cgtp\h17d0f_wtc.gif FRH:\gui\h17d0f.gif', gm_status)  
                IF (gm_status <> 0) THEN
                  POST_ERR(38000, 'Failed to copy h17d0f.gif to FRH', 0, 0)
                ENDIF
            ENDIF --WTC weld controller is used
          ENDIF -- combo ped swg + ped proj
        ENDIF --projection welder

      CASE(mfg_area_pn):  --paintshop
        IF (appl_type = antichip) THEN --anti-chip paint application
          Set_S_sVar('$TX_SCREEN[4].$DESTINATION', 'tcu_status.stm')
          Set_S_sVar('$TX_SCREEN[4].$SCREEN_NAME', 'TCU Status')
          Set_S_sVar('$UI_CONFIG.$MENU_FAVS[4]', '/SOFTPART/GENLINK?current=menupage,381,13')    
          SPRUNCfile('FRH:\cgtp\gmpnt_temp.gif', 'FRH:\gui\h17d0d.gif')   
        ENDIF --anti-chip 
      
      ELSE:
    ENDSELECT --shop specific web screen setup

  ENDIF --SpotTool

  --Menu Edit WebScreens  --slot 10 puts it on the Utilities menu
  Set_S_svar('$custommenu[10].$title', 'Cus Menu Edit')
  Set_S_sVar('$custommenu[10].$prog_name', 'custoyn.stm')
  Set_I_sVar('$custommenu[10].$option', 31236)
  --Initialize selections in custook, custolst, custoyn
  menu_scrn_ok  --custoook
  menuscrn_lst --custolst
  menu_scrn_yn --custoyn

END SetWebScreen

-----------------------------------------------------------------------------
ROUTINE Set_iMenu
-- PURPOSE:  this routine sets up the iMenu
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  Set_S_sVar('$UI_TOPMENU[1].$ICON[1]','/wizinst.stm')
  Set_S_sVar('$UI_TOPMENU[1].$ICON[3]','h58E01.gif')

  Set_S_sVar('$UI_TOPMENU[5].$LABEL','GM_SETUP')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[1]','*default')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[2]','*default')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[3]','*default')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[4]','Load Simulation')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[5]','Apply DCS IO')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[6]','')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[7]','')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[8]','')
  Set_S_sVar('$UI_TOPMENU[5].$TEXT[9]','')

  Set_S_sVar('$UI_TOPMENU[5].$ICON[1]','/FR/CSTRT.JPG')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[2]','menu5.gif')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[3]','menu6.gif')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[4]','menu7.gif')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[5]','menu15.gif')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[6]','')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[7]','')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[8]','')
  Set_S_sVar('$UI_TOPMENU[5].$ICON[9]','')

  Set_S_sVar('$UI_TOPMENU[5].$URL[1]','config=SINGLE&prim=menupage,381,19')
  Set_S_sVar('$UI_TOPMENU[5].$URL[2]','config=SINGLE&prim=menupage,1062,1')
  Set_S_sVar('$UI_TOPMENU[5].$URL[3]','config=SINGLE&prim=menupage,195,1')
  Set_S_sVar('$UI_TOPMENU[5].$URL[4]','config=DOUBLE&prim=menupage,74,1&dual=menupage,71,1')
  Set_S_sVar('$UI_TOPMENU[5].$URL[5]','config=SINGLE&prim=menupage,1133,1')

  Set_S_sVar('$UI_TOPMENU[6].$LABEL','GM Docs')
  Set_S_sVar('$UI_TOPMENU[6].$TEXT[1]','*default')

  Set_S_sVar('$UI_TOPMENU[6].$ICON[1]','menu7.gif')

  Set_S_sVar('$UI_TOPMENU[6].$URL[1]','config=SINGLE&prim=menupage,74,1')

  SPRUNCMD ('COPY FRH:\gui\mhsetup.jpg FR:\mhsetup.jpg',gm_status)
  IF (gm_status <> 0) THEN
    POST_ERR(38000, 'Failed to copy mhsetup.jpg to FR', 0,0)
  ENDIF

  IF (arc_optn = FALSE) THEN --SpotTool
    SPRUNCMD ('COPY FRH:\gui\lpt1m.gif FRH:\lpt1m.gif',gm_status)
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy lpt1m.gif to FR', 0,0)
    ENDIF
  ENDIF --SpotTool

  Set_S_sVar('$TX_SCREEN[10].$DESTINATION','/wizinst.stm')
  Set_S_sVar('$TX_SCREEN[10].$SCREEN_NAME','Wizard Top Menu')


END Set_iMenu
-----------------------------------------------------------------------------
ROUTINE load_menu
-- PURPOSE:  Load GM specific menus
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (arc_optn = FALSE) THEN --SpotTool+
    SPRUNCMD ('COPY FRS:sw22r4eg.dt FRSU:\io22r4eg.dt',gm_status) --copy Cell I/O Menu
      IF (gm_status <> 0) THEN
        POST_ERR(38000, 'Failed to copy io22r4eg.dt to FRSU', 0, 0)
      ENDIF
  ENDIF --SpotTool+

END load_menu
-----------------------------------------------------------------------------
ROUTINE load_gmfile
-- PURPOSE:  Load GM specific files
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  SPRUNCMD ('COPY FRS:dcdtext.cm FR:\dcdtext.cm',gm_status) --copy dcdtext setup file
    IF (gm_status <> 0) THEN
      POST_ERR(38000, 'Failed to copy dcdtext.cm to FR', 0, 0)
    ENDIF

END load_gmfile
-----------------------------------------------------------------------------
ROUTINE App_Shop_Bit
-- PURPOSE:  Sets up application and shop bits
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:  set_std_ctrl in gmmain1
--
--
-----------------------------------------------------------------------------

VAR
  app_count   : INTEGER
  l_value,
  l_status    : INTEGER
  mfgarea_cnt  : INTEGER

BEGIN


-- ROBOT GROUP
-- OUTPUT 	    BIT WORTH	Description
------------------------------------------
-- 10001		1	MH App
-- 10001		2       Spot1Proc1App
-- 10001		4	Spot2Proc2App
-- 10001		8	Disp1Proc1App
-- 10001		16	Disp2Proc2App
-- 10001		32	Stud1Proc1App
-- 10001		64	Stud2Proc2App
-- 10001		128	SPR1Proc1App
-- 10001		248	SPR2Proc2App
-- 10001		512	Proj1Proc1App
-- 10001		1024	Proj2Proc2App
-- 10001		2048	Dimp1Proc1App
-- 10001		4096	Dimp2Proc2App
-- 10001		8192	FDS1Proc1App
-- 10001		16384	Reserved App
-- 10001		32768	Reserved App


-- 10003		1	BodyShop
-- 10003		2	PressShop
-- 10003		4	Powertrain
-- 10003		8	PaintShop
-- 10003		16	Reserved
-- 10003		32	Reserved
-- 10003		64	Reserved
-- 10003		128	Reserved
-- 10003		256	Reserved
-- 10003		512	Reserved
-- 10003		1024	Reserved
-- 10003		2048	Reserved
-- 10003		4096	Reserved
-- 10003		8192	Reserved
-- 10003		16384	Reserved
-- 10003		32768	Reserved

  app_count = 0

  IF ($ap_selap[4] = TRUE) THEN -- MH App
    app_count = app_count + 1
  ENDIF
  IF (bshop_proc1 = spotappl) THEN  --Spot1Proc1App  --Spot is always process 1 with combinations
    app_count = app_count + 2
  ENDIF
  IF (bshop_proc2 = spotappl) THEN  --Spot2Proc2App  --Only time spot is process 2 for combo is when it is combined with spot as process 1
    app_count = app_count + 4
  ENDIF
  IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND ((bshop_proc1 = dispappl) OR (Use_Dispense) OR (pnt_dsp_used)))) THEN  --Disp1Proc1App
   app_count = app_count + 8
  ENDIF
  IF ((numdispctrl = 2) OR ((numdispctrl = 1) AND (bshop_proc2 = dispappl))) THEN  --Disp2Proc2App
    app_count = app_count + 16
  ENDIF
  IF ((numstudctrl = 2) OR ((numstudctrl =1) AND (bshop_proc1 = studappl))) THEN  --Stud1Proc1App
   app_count = app_count + 32
  ENDIF
  IF ((numstudctrl =2) OR ((numstudctrl = 1) AND (bshop_proc2 = studappl))) THEN  --Stud2Proc2App 
    app_count = app_count + 64
  ENDIF
  IF ((numsprctrl = 2) OR ((numsprctrl = 1) AND (bshop_proc1 = sprappl))) THEN  --SPR1Proc1App
   app_count = app_count + 128
  ENDIF
  IF ((numsprctrl = 2) OR ((numsprctrl = 1) AND (bshop_proc2 = sprappl))) THEN  --SPR2Proc2App
    app_count = app_count + 256
  ENDIF
  IF ((numprojctrl = 2) OR ((numprojctrl = 1) AND (bshop_proc1 = projappl))) THEN  --Proj1Proc1App
   app_count = app_count + 512
  ENDIF
  IF ((numprojctrl = 2) OR ((numprojctrl = 1) AND (bshop_proc2 = projappl))) THEN  --Proj2Proc2App
    app_count = app_count + 1024
  ENDIF
  IF ((numdimpctrl = 2) OR ((numdimpctrl = 1) AND (bshop_proc1 = dimpappl))) THEN  --Dimp1Proc1App
   app_count = app_count + 2048
  ENDIF
  IF ((numdimpctrl = 2) OR ((numdimpctrl = 1) AND (bshop_proc2 = dimpappl))) THEN  --Dimp2Proc2App
    app_count = app_count + 4096
  ENDIF
  IF (bshop_proc1 = fdsappl) THEN --FDS1Proc1App --FDS is never combined with anything, only exists as process 1
    app_count = app_count + 8192
  ENDIF

  GET_PORT_VAL(19, 10001, l_value, l_status)
  IF (l_status = 0) THEN --0=success
    l_value = app_count  --Robot Application Bits
    l_status = iovalset(19, 10001, l_value)
  ENDIF

  mfgarea_cnt = 0

  IF (mfg_area = mfg_area_bs) THEN --BodyShop
    mfgarea_cnt = mfgarea_cnt + 1
  ENDIF
  IF (mfg_area = mfg_area_ps) THEN  --PressShop
    mfgarea_cnt = mfgarea_cnt + 2
  ENDIF
  IF (mfg_area = mfg_area_pt) THEN  --Powertrain
    mfgarea_cnt = mfgarea_cnt + 4
  ENDIF
  IF (mfg_area = mfg_area_pn) THEN  --PaintShop
    mfgarea_cnt = mfgarea_cnt + 8
  ENDIF

  GET_PORT_VAL(19, 10003, l_value, l_status)
  IF (l_status = 0) THEN --0=success
    l_value = mfgarea_cnt  --Manufacturing Area Bits
    l_status = iovalset(19, 10003, l_value)
  ENDIF

END App_Shop_Bit
-----------------------------------------------------------------------------
ROUTINE set_cellvar
-- PURPOSE:  Sets up cell system variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(arc_optn) THEN --ArcTool
  arc_loaded
ENDIF

IF (arc_optn = FALSE) THEN --SpotTool
  IF (mfg_area <> mfg_area_ps) THEN  --check if press shop
    press_shop = FALSE
  ELSE --press shop
    press_shop = TRUE
  ENDIF
ELSE  --ArcTool
  press_shop = FALSE  --no shops in Arc, therefore FALSE
ENDIF

IF UNINIT(Reset_Cell) THEN
  Reset_Cell = FALSE
ENDIF
IF UNINIT(CellVarsDone) THEN
  CellVarsDone = FALSE
ENDIF

num_errors = 0  --reset number of execution errors to 0

   WriteLog('Start of GMCELLVR Setup', FALSE)

  set_std_var  --Setup GM Karel variables

  IF (CellVarsDone = TRUE) THEN -- setup has already been setup
      WriteLog('Workcell Variables Already Setup', FALSE)
    IF ExecSetupAgn('Workcell Variables') THEN -- ask user if they want to setup again
      CellVarsDone = FALSE
    ELSE
      WriteLog('Cell Vars already Complete', FALSE)
      WriteLog('GMCELLVR Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

 StrtinErs = ErrsInCell.ErrorsVarbls -- grab current error count
 ClrUtltyErrs -- Clear all errors in utility program to be used when done

 StrtinErs = ErrsInCell.ErrorsVarbls -- grab curent error count

 WriteLog('Start of Cell Variables Routine', FALSE)

IF Reset_Cell = TRUE THEN

  Set_CellVars -- Setup Cell Variables
  set_usralrm

  IF (arc_optn = FALSE) THEN --SpotTool
    set_process  --Sets process def and names
  ENDIF

  SetWebScreen --Setup Web Screens 
  Set_iMenu    --Setup the iMenu
  load_menu    --Load GM specific menus
  load_gmfile    --Load GM files that aren't programs
  SetUpFileBck -- Setup the files that should be backed up all robots

ELSE -- Not Resetting Cell so No CHanges
  POST_ERR(38000, 'No Cell Variables Changed', 0, 0) --
  DELAY 600
ENDIF

 ErrsInCell.ErrorsVarbls =  ErrsInCell.ErrorsVarbls + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInCell.ErrorsVarbls - StrtinErs) > 0 THEN -- check for I/O setup errors
   POST_ERR(38000, 'GMCELLVR had '+int2str((ErrsInCell.ErrorsVarbls - StrtinErs))+' while executing',0, 0) --
   WriteLog('set_cellvar routine in GMCELLVR had ' + int2str((ErrsInCell.ErrorsVarbls- StrtinErs))+' errors', TRUE)
 ELSE
   WriteLog('set_cellvar Setup Succesfully Program completed', FALSE)
   CellVarsDone = TRUE
 ENDIF

 WriteLog('', FALSE)

END set_cellvar
-----------------------------------------------------------------------------
BEGIN

set_cellvar

END GMCELLVR

