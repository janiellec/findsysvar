--
--    This material is the joint property of Fanuc America Corporation  and
--    FANUC  LTD  Japan,and  must  be  returned  to  either Fanuc America
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             Fanuc America Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             Fanuc America Corporation
--    +
--    Program:  gmwizard
--
--    Description:
--
--    gmwizard includes the questions required to configure the robot
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
-------------------------------------------------------------------------------------------------------------
--
--    Language: KAREL
--
--    Source File: swwizard.kls    01-JUN-99   03:33PM
--
--    Author: Fanuc America Corporation
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--
--           2016/02/09   marchaka -wizard, original creation for G4
--           2016/03/23   kosaski  -wizard, cleanup and added stuff
--           2016/05/16   kosaski  -wizard cleanup
--           2016/12/04   kosaski  -Added spinTop reset to "Setup_Reset" routine
--           2016/12/05   kosaski  -- added press display prior to executing setup
--
--           2016/07/25   marchaka -only call MH app for SPR if pedestal
--           2016/08/04   marchaka -removed bodyshop questions, placed in gmbodysh and gmwizbsh
--           2016/09/06   marchaka -added a check for the first group output for DCS total signature,
--                                  only if it is configured, allow GM_SaftyDone to be set to TRUE
--           2016/10/06	  marchaka -initialize projection welding and dimpler variables
--           2016/10/28   marchaka set_span moved from gmlang1 to gmlang2
--           2016/11/01   marchaka add check if servo gun option or servo tip dress option loaded
--           2016/11/11   marchaka initialze spotctrl[x].spot_gun[y].sg_maxpr ONLY if uninitialized
--           2016/11/12   friededr -Minor updates to support Paintshop.
--           2016/12/04   marchaka -initialize servotipdrs variable
--           2017/01/26   marchaka Add cap_chnger to initgmwizvar routine to be initialized
--           2017/01/29   kosaski  -added loadsaveperm variable so user can load or save files
--           2017/02/05   marchaka Initialize DisplayStat to TRUE so wizard will display setup on user screen
--                                 by default
--           2017/4/30    Kosaski  added variable "DispctIsDone" for if GMDISPCT program has executed
--                                 also fixed wizard ending unexpectedly without user pressing exit
--           2017/05/01   marchaka Modification to allow ghost strokes to run again if user chooses to run 
--                                 the wizard again
--           2017/07/09	  marchaka Added config_comp variable.  This variable will be used to determine when
--                                 robot configuration that happens outside of gmwizard execution (e.g. 
--                                 servo gun motor setup, cold start setup) can occur.
--           2018/17/01   Kosaski  chenged to be able to display GMPT menu form for P05
--           2018/04/02   marchaka Add miscellaneous tools menu.  Add external i/o interlock setup.
--           2018/09/04   marchaka Added new items to miscellaneous tools menu. 
--           2018/09/10   marchaka Per GM's request for v833p06, ONLY setup DCS if the user answers "yes"
--                                 during wizard execution.  Most DCS setup occurs automatically during 
--                                 software installation, so there shouldn't be an issue with this.  Added 
--                                 text to state that a DCS APPLY will need to be done if the user answer's yes.
--                                 Add initializiation of new cap changer type variable cap_chngtype.  Add reset logic
--                                 for new wizard program gmspotvr5.
--           2019/08/01   marchaka Moved the variable initialization of config_comp from ChkitisInit to the run_config routine.
--                                 On auto updated units that didn't have this variable previously, just the action of entering
--                                 and then exiting the wizard will cause servo gun motor setup to occur and cold start setup.
--                                 Putting it in run_config ensures that it will only get initialized if the user wants to setup the robot.
--                                 Logic already exists elsewhere that if they select no after the display it gets set to false anyways.
--           2019/08/01   marchaka Initialize dual_proc variable initgmwizvar routine.  This will fix an issue with display on robots
--                                 updated from versions that didn't have this. 
--           2019/08/02   marchaka Moved the variable initialization of DispCtIsDone from ChkitisInit to the run_config routine.
--                                 On auto updated units that didn't have this variable previously, just the action of entering
--                                 and then exiting the wizard will cause the dispense auto keystroks to occur.  Puttting it into
--                                 run_config ensures that it will only get initialized if the user wants to setup teh robot.  Logic already
--                                 exists elsewhere that if they select no after the display it gets set to false anyways.
--           2019/05/07   schoensm Added variable initialization of swgtcnumguns(GMCFGSPT) to the initgmwizvar routine.
--           2020/09/30   schoensm Added variable initialization of ispare3(GMCFGSPT) to the initgmwizvar, V8.33P10
-------------------------------------------------------------------------------------------------------------
PROGRAM gmwizard
-------------------------------------------------------------------------------------------------------------
-- Softpart built-ins

%COMMENT = 'GM Wizard V4.8'

%ALPHABETIZE

%STACKSIZE = 5000

%ENVIRONMENT TIM -- required for the time builtins
%ENVIRONMENT ATCLDEF
%ENVIRONMENT IOSETUP
%ENVIRONMENT celldef
%ENVIRONMENT DNSVDEF
%ENVIRONMENT MNMCDEF
%ENVIRONMENT MULTI
%ENVIRONMENT SLDEF
%ENVIRONMENT SWGDEF
%ENVIRONMENT SYSDEF
%ENVIRONMENT tpthrdef
%ENVIRONMENT REGOPE
%ENVIRONMENT proddef
%ENVIRONMENT FDEV
%ENVIRONMENT TPE
%ENVIRONMENT SYCRDEF
%ENVIRONMENT ioblt  --required for iovalrd

%NOLOCKGROUP
%INVISIBLE
%RWACCESS

%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE klevkmsk
%INCLUDE kltpctrl
%INCLUDE klevkeys
%INCLUDE kliotyps
%INCLUDE swdcshui
%INCLUDE klevutil
%INCLUDE gmevrlng  --Required forthe constants for GM Language constants

-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

-- variables declares for Shop specifics
%INCLUDE gmcfgbdy  -- GM wizard variables for body shop Applications
%INCLUDE gmcfgpnt  -- GM wizard variables for Paint Applications
%INCLUDE gmcfgpwr  -- GM wizard variables for powertrain Applications
%INCLUDE gmcfgprs  -- GM wizard variables for press Applications

-- Variables declared for Applications
%INCLUDE gmcfgdsp  -- GM wizard variables for Dispense Applications
%INCLUDE gmcfgmh   -- GM wizard variables for MH Applications
%INCLUDE gmcfgtlc  -- GM wizard variables for tool changer Applications
%INCLUDE gmcfgvis  -- GM wizard variables for Vision Applications
%INCLUDE gmcfgspt  -- GM wizard variables for Spot Applications
%INCLUDE gmcfgstd  -- GM wizard variables for Stud Applications
%INCLUDE gmcfgfds  -- GM wizard variables for Flow Drill Screw Applications
%INCLUDE gmcfgspr  -- GM wizard variables for SPRApplications
%INCLUDE gmcfgpjw  -- GM wizard variables for projection weld applications
%INCLUDE gmcfgdmp  -- GM wizard variables for dimpler applications

%INCLUDE gm_var    --GM variables
%INCLUDE KLEVCCDF  -- Required for TPERROR instruction

CONST
Revision = '2020-09-30'
ISAFTotlSGOA = 93  -- Used for "Total" Safety Signature GOUT 1 of 2

%INCLUDE gmcnstnt  -- Constant file for GM

VAR
  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  Errs_ans,
  main_ans      : INTEGER                  --answer for wizard main menu
  entry,i,        -- used in the Get_var builtin
  ans           :INTEGER
  gm_status     :INTEGER
  pop_index     :INTEGER
  screen        :STRING[4]
  gm_value      :INTEGER
  disp_only     :BOOLEAN --5-4-2018 "display only"

  Cur_Shop_Str IN SHADOW : STRING[16] -- used for sting the shop represents

Cur_Proc_Typ,  -- Used in for loop for the current process to execute wizard questions
TotalErrors  : INTEGER -- Used for total count of errors

ConStartStat IN CMOS : INTEGER -- used for the controller state 1= Control,2= Cold
Reset_Errs,  -- Used to reset all the error counters   -- $SYS_CONFIG.$STARTMD
Exec_Wizard : BOOLEAN

LoadSavePerm,                  -- This boolean set to FALSE while we work on load save feature
display_exec IN CMOS : BOOLEAN -- used for if the display has been executed

RunngWizard IN CMOS:BOOLEAN -- used for the While loop in main wizard, set to FALSE AND it will end
config_comp IN CMOS: BOOLEAN -- used to allow robot configuration that happens during cold start and outside of gmwizard
DispctIsDone IN CMOS : BOOLEAN -- Used for if GMDISPCT program is done for GHOST stokes for dispense setup
RunngSetup  IN CMOS:BOOLEAN -- used for the While Loop hook
Lang_set IN CMOS : BOOLEAN -- Used for if language has ever been set used to display text prompts

StrtFrmWizrd :BOOLEAN  -- The menu was started from wizard.
CurrProc_Str : STRING[25]-- used for displaying differant text in the menu

WizSetTimStr IN CMOS : STRING[20] -- time and date when wizard ran
WizStrTimStr IN CMOS : STRING[20] -- time and date when wizard was Ended
WizEndTimStr IN CMOS : STRING[20] -- time and date when the wizard was Ended
Wiz_StrtTime IN CMOS : INTEGER    -- the timestamp when the wizard was ran started
Wiz_RunTime  IN CMOS : INTEGER    -- the timestamp how long the wizard was ran start to finish
Wiz_StupTime IN CMOS : INTEGER    -- the timestamp when the wizard Ran the SETUP portion.
Wiz_EndTime  IN CMOS : INTEGER    -- the timestamp when the wizard finished
GM_SaftyDone IN SHADOW FROM GMSAFEIO: BOOLEAN -- Used for tracking if the Saftey has been setup
                                              -- safety should be setup at install and not enabled??

-- Below used for load media functions HAD to remove from GMWZLDSV because it is loaded, and these vars changed

From_Path    IN SHADOW : STRING[75] -- used for the the deviceName and Subdirectory to load from
To_Path      IN SHADOW : STRING[75] -- Used for the destination location that files will be sent to
Storage_Loc  IN SHADOW : STRING[80] -- the name of where GMPT files are stored at ASI load and
Cur_Device   IN SHADOW : STRING[10] -- used as the reply for get var $device
Cur_Path     IN SHADOW : STRING[80] -- Used as the reply from teh get var $DEV_PATH variable
Current_Dir  IN SHADOW : STRING[80] -- Used as the reply from path for file operation variable
Dsply_Device IN SHADOW : STRING[80] -- Used as the DISPLAY of path this may not be the correct path.


quest_val   IN CMOS FROM TUNEDIAG : INTEGER

srvo_td_opt  IN SHADOW FROM GMCUSTO  : BOOLEAN --servo tip dresser option loaded on the robot

 -- below are needed for the act_form to kill the form manager from SWCFSCRN
  form_data FROM SWCFSCRN :    WORK_T
  term_char FROM SWCFSCRN :    INTEGER
  def_item  FROM SWCFSCRN :    INTEGER

%INCLUDE klrdutil
%INCLUDE gmrdutil --GM common routines

ROUTINE set_english  FROM gmlang1
ROUTINE set_span     FROM gmlang2
ROUTINE set_german   FROM gmlang1
ROUTINE GMPT_Config  FROM gmpwrtn
ROUTINE Press_Config FROM gmpress -- Used for Wizard questions Specific to Press Shop
ROUTINE body_config  FROM gmbodysh --Used for wizard questions specific to bodyshop
ROUTINE Paint_Config FROM gmpaint  -- Used for wizard questions specific to PaintShop
ROUTINE set_std_ctrl FROM gmmain1
ROUTINE bshop_dsply FROM gmbsdata -- Used to Display the Body shop current setup
ROUTINE PressDisplay FROM gmpress -- Used to display the Press shop current setup-- RK CHANGED NAME 12-5-16
ROUTINE pwrtrnDisply FROM gmpwrtn -- Used to display the Powertrain shop current setup
ROUTINE paint_Disply FROM gmpaint -- Used to display the Paint shop current setup
ROUTINE USERPAGE FROM USERPAGE  -- forces user screen to pendant

ROUTINE Setup_Log(P_ShopLog: STRING) FROM GMWIZLOG --4-2-16 RK
ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG --3-28-16 RK
ROUTINE Finish_Log FROM GMWIZLOG --4-2-16 RK
ROUTINE set_std_var FROM gmsetvar
ROUTINE srvo_optn FROM gmwizspt --servo gun option installed on robot
ROUTINE srvotd_optn FROM gmwizspt --servo tip dress option installed on the robot
ROUTINE  Set2Disprs FROM gmdispct
ROUTINE gmwzldsv FROM gmwzldsv -- Program used for laoding and saving of programs
ROUTINE idns_menu FROM gmwizmis --IDNS Safety Menu
ROUTINE stndaln_menu FROM gmwizmis --standalone single configuration menu
ROUTINE addprg_menu FROM gmwizmis --additional programs and template menu
ROUTINE swgset_menu FROM gmwizmis --additional servo gun setup menu
-----------------------------------------------------------------------------------
ROUTINE sel_lang
--  This routine contains language setup
-----------------------------------------------------------------------------------
BEGIN

  REPEAT
    -- Select Language for Wizard
    -- setup questions and error text
    -- Run-Wizard to Configure Robot
    -- or COLD START after selection.

    CLR_STND_SCR(gm_status)
    WRITE (CR,CR,m40_gmdata,CR)   -- Select Language for Wizard
    WRITE (m41_gmdata,CR)
    WRITE (m42_gmdata,CR)
    WRITE (m43_gmdata,CR)
    WRITE ('1. ',m44_gmdata,CR)     -- 1. English
    WRITE ('2. ',m45_gmdata,CR)     -- 2. Spanish
    WRITE ('3. ',m46_gmdata,CR)     -- 3. German
    WRITE (gdata_ans,'(1-3):')      -- Answer(1-3):
    READ (ans)
  UNTIL (Verify_Answr(Ans,1,3))-- Verify Answer
    wiz_lang = ans

  SELECT (ans) OF --
    CASE (wiz_lang_eg):  -- Set English
      set_english
    CASE (wiz_lang_sp):  -- Set Spanish
      set_span
    CASE (wiz_lang_gm):  -- Set German
      set_german
    ELSE: --
      POST_ERR(38000, 'Language Selection' +int2str(ans)+' is INVALID, in GMWIZARD', 0, 0) --
      set_english
  ENDSELECT --

END sel_lang
-----------------------------------------------------------------------------
ROUTINE ChkItIsInit
-- PURPOSE: to make sure any variables are initialized
--          do not RESET vars in here, only initilization.
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

VAR

v : INTEGER -- used for the FOR loop

BEGIN

  Current_Ver = Revision -- save version for reference in backups

  IF UNINIT(LoadSavePerm) THEN
    LoadSavePerm = TRUE
  ENDIF

  IF UNINIT(Reset_Cell) THEN  -- this has to be at top, vars below will use to reset when true
    Reset_Cell  = TRUE               --Setup all cell settings
  ENDIF

  IF UNINIT(display_exec) THEN  -- sets if user has ever checked the display
    display_exec = FALSE
  ENDIF

  -- Check for Language Initialization
  IF UNINIT(wiz_lang) THEN
    set_english
    wiz_lang = 1
  ENDIF

  IF UNINIT(m1_gmdata) THEN
   set_english
   wiz_lang = 1
  ENDIF

  IF UNINIT(Lang_set) THEN
    Set_english -- 1st Run must set language to english
    Lang_set = TRUE
  ENDIF

  USING WizardStatus DO -- set the wizard status so can look into history of wizard
    IF UNINIT(Cnfg_Is_Done) THEN
      Cnfg_Is_Done = FALSE
    ENDIF
    IF UNINIT(Cnfg_Status) THEN
      Cnfg_Status = 0
    ENDIF
    IF UNINIT(DsplyIs_Done) THEN
      DsplyIs_Done = FALSE
    ENDIF
    IF UNINIT(Dsply_Status) THEN
      Dsply_Status = 0
    ENDIF
    IF UNINIT(LodedIs_Done) THEN
      LodedIs_Done = FALSE
    ENDIF
    IF UNINIT(Loded_Status) THEN
      Loded_Status = 0
    ENDIF
    IF UNINIT(SaveIs_Done) THEN
      SaveIs_Done = FALSE
    ENDIF
    IF UNINIT(Save_Status) THEN
      Save_Status = 0
    ENDIF
    IF UNINIT(SetupIs_Done) THEN
      SetupIs_Done = FALSE
    ENDIF
    IF UNINIT(Setup_Status) THEN
      Setup_Status = 0
    ENDIF
  ENDUSING -- end of WizardStatus structure "using"

  --Material Handling
  IF UNINIT(Use_MH_Tool)  THEN
    Use_MH_Tool  = FALSE          -- When True using the MHGRIP routines
  ENDIF
  IF UNINIT(Updt_MH_Arry) THEN
    Updt_MH_Arry = FALSE          -- When True MHGRIP Array Sizes need to be done update was g_cfg_mh
  ENDIF
  IF UNINIT(EOATCommType) THEN
    EOATCommType = 89             -- Tool Communication types 82=devicenet,89=Ethernet
  ENDIF

  IF UNINIT(NumEOATInBlk) THEN
    NumEOATInBlk = 0              -- Number of input blocks
  ENDIF

  IF UNINIT(EOATUseAnlog)  THEN
    EOATUseAnlog = FALSE          -- Use analog Input for gripper sensor
  ENDIF
  IF UNINIT(NumEOATOtMan)  THEN
    NumEOATOtMan = 0              -- Number of Output Manifolds
  ENDIF
  IF UNINIT(NumAnlogInpt)  THEN
    NumAnlogInpt = 0              -- If Analog for Powertrain
  ENDIF
  IF UNINIT(NumAnlogOtpt) THEN
    NumAnlogOtpt = 0              -- for future development
  ENDIF

  IF UNINIT(UseToolChngr) THEN
    UseToolChngr = FALSE          -- If Tool Changer on Tool
  ENDIF
  IF UNINIT(TC_Comm_Type)  THEN
    TC_Comm_Type = 89              -- Communication  Type Device Ethernet 89, DeviceNet 82
  ENDIF
  IF UNINIT(Num_ToolStnd)  THEN
    Num_ToolStnd = 0              -- Number of tool Stands 4 max
  ENDIF

  FOR v = 1 TO 4 DO               --Used for the tool stand(s) type 1 is single, 2 double
    IF UNINIT(ToolStndType[v]) THEN
      ToolStndType[v] = 0
    ENDIF
  ENDFOR

  IF UNINIT(Use_Vacuum)  THEN
    Use_Vacuum   = FALSE          -- WHen True using the Vacuum is used
  ENDIF
  IF UNINIT(NumVacPumps)  THEN
    NumVacPumps  = 0              -- Number of Vacuum Pumps
  ENDIF
  IF UNINIT(VacPumpType)  THEN
    VacPumpType  = 0              -- Type of Vacuum Pumps
  ENDIF

  --Other applications

  --Vision
  IF UNINIT(Use_Vision) THEN
    Use_Vision   = FALSE          -- If a cell Has vision
  ENDIF
  IF UNINIT(VisSys_Type) THEN
    VisSys_Type  = 0              -- Vision SYstem Type iRvision = 1, Cognex =2 , Spin-Top =3
  ENDIF
  IF UNINIT(iRType) THEN
    iRType       = 0              -- Vision iRvision Type
  ENDIF
  IF UNINIT(FanuciR) THEN
    FanuciR      = FALSE          --
  ENDIF
  IF UNINIT(Fanuc3dl) THEN
    Fanuc3dl     = FALSE          --
  ENDIF

  IF UNINIT(VisLghtType) THEN
    VisLghtType  = 0              -- What Type of Vision Lighting Rbt=1 Fix=2 Rbt&Fix=3
  ENDIF
  IF UNINIT(Use_Spin_Top) THEN
    Use_Spin_Top = FALSE          -- If a cell Has Spin top for Vision
  ENDIF

  --GMPT Setup Information
  IF UNINIT(Use_GMPT_Log) THEN
    Use_GMPT_Log = FALSE          -- will create a log for the completed setup
  ENDIF

  IF UNINIT(EnblIgnrFlts) THEN
    EnblIgnrFlts = FALSE          -- Allow IGNORE faults in Alarm recovery for MH Grip Errors
  ENDIF
  IF UNINIT(Use_Prog_Mon) THEN
    Use_Prog_Mon = FALSE          -- If Program monitoring is used
  ENDIF

  IF UNINIT(Use_RZIC) THEN
    Use_RZIC     = FALSE          -- Indicator the Rail Zone Interference Checking required
  ENDIF
  IF UNINIT(RZIC_Type) THEN
    RZIC_Type    = 0              -- determine rail robot hand Left=1, Right =1
  ENDIF

  IF UNINIT(Use_Dispense) THEN
    Use_Dispense = FALSE          -- Indicated the Dispense application is required
  ENDIF

  IF UNINIT(pnt_dsp_used) THEN
    pnt_dsp_used = FALSE  	  -- Indicate dispense application required
  ENDIF

  IF UNINIT(DisplayStat) THEN
    DisplayStat  = TRUE          -- Used for if during Routine Execution should display messages TPERROR
  ENDIF
  IF UNINIT(DisplayDely) THEN
    DisplayDely  = 0              -- Used for how long to delay to allow a user to see DIsplay Messages
  ENDIF

 IF UNINIT(eip_oct1) THEN
    eip_oct1     = 0		  --First octet of I/P address
  ENDIF
  IF UNINIT(eip_oct2) THEN
    eip_oct2     = 0              --Second octet of I/P address
  ENDIF
  IF UNINIT(eip_oct3) THEN
    eip_oct3     = 0              --Third octet of I/P address
  ENDIF
  IF UNINIT(eip_oct4) THEN
    eip_oct4     = 0              --Fourth octet of I/P address
  ENDIF

  IF UNINIT(chk_repwr) THEN
    chk_repwr = FALSE	           --Controller requires power required
  ENDIF
  IF UNINIT(mfg_area) THEN
    mfg_area = 0
  ENDIF

  IF UNINIT(Reset_Errs) THEN
    Reset_Errs = TRUE
  ENDIF

  Reset_Errs = TRUE  -- always reset error counts at start of wizard

  USING ErrsinShop DO -- -- Check the Shop specific Errors
      ErrorsPrgrms = 0
      ErrorsRgstrs = 0
      ErrorsVarbls = 0
      ErrorsIOCom = 0
  ENDUSING --

  USING ErrsInCell DO -- Check the Workcell Errors
      ErrorsPrgrms = 0
      ErrorsRgstrs = 0
      ErrorsVarbls = 0
      ErrorsIOCom = 0
  ENDUSING --

  IF UNINIT(Enable_Log) THEN
    Enable_Log = FALSE
  ENDIF

  Reset_Errs = FALSE

  IF UNINIT(shop_str ) THEN
    shop_str  = '   '
  ENDIF
  IF UNINIT(CellSlotNmbr) THEN -- default cell Slot number for GI/GO interface
    CellSlotNmbr = 1
  ENDIF

  IF UNINIT(GM_SaftyDone) THEN
    GM_SaftyDone = FALSE
  ENDIF

END ChkItIsInit
-----------------------------------------------------------------------------
ROUTINE chk_for_errs:BOOLEAN
-- PURPOSE: to display the errors the wizard has
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN

RETURN(FALSE)  -- added so people quit complaining RK

TotalErrors = 0

  -- get the Cell specific errors
  TotalErrors = TotalErrors + ErrsInCell.ErrorsVarbls
  TotalErrors = TotalErrors + ErrsInCell.ErrorsIOCom
  TotalErrors = TotalErrors + ErrsInCell.ErrorsPrgrms
  TotalErrors = TotalErrors + ErrsInCell.ErrorsRgstrs
  -- get the shop specific errors
  TotalErrors = TotalErrors + ErrsInShop.ErrorsVarbls
  TotalErrors = TotalErrors + ErrsInShop.ErrorsIOCom
  TotalErrors = TotalErrors + ErrsInShop.ErrorsPrgrms
  TotalErrors = TotalErrors + ErrsInShop.ErrorsRgstrs

IF TotalErrors = 0 THEN
  RETURN(FALSE)
ENDIF

  SELECT mfg_area OF -- launch the Display Setup set by wizard or load feature
    CASE(mfg_area_bs):  shop_str = 'Body Shop'
    CASE(mfg_area_ps):  shop_str = 'Press Shop'
    CASE(mfg_area_pt):  shop_str = 'Powertrain'
    CASE(mfg_area_pn):  shop_str = 'Paint Shop'
  ELSE:
    POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in chk_for_errs routine in GMUTILITY', 0, 0) --
    shop_str = 'Unknown'
  ENDSELECT

  CLR_STND_SCR(gm_status)
  DELAY 500

  WriteLog('The Workcell Setup Errors:', FALSE)

   IF ErrsInCell.ErrorsVarbls>0 THEN
     WriteLog('  Workcell Variable Setup:  ' +int2str(ErrsInCell.ErrorsVarbls) + ' Errors', FALSE)
   ENDIF
   IF ErrsInCell.ErrorsIOCom>0 THEN
     WriteLog('  WorkCell I/O Setup:       ' + int2str(ErrsInCell.ErrorsIOCom) + ' Errors', FALSE)
   ENDIF
   IF ErrsInCell.ErrorsPrgrms>0 THEN
     WriteLog('  Workcell Program Setup:   ' + int2str(ErrsInCell.ErrorsPrgrms) + ' Errors', FALSE)
   ENDIF
   IF ErrsInCell.ErrorsRgstrs>0 THEN
     WriteLog('  Workcell Register Setup:  ' + int2str(ErrsInCell.ErrorsRgstrs) + ' Errors', FALSE)
   ENDIF

    WriteLog('',FALSE)

  WriteLog('The '+shop_str+' Cell Setup Errors:', FALSE)

   IF ErrsInShop.ErrorsVarbls>0 THEN
     WriteLog('  ' +shop_str + ' Variable Setup: ' + int2str(ErrsInShop.ErrorsVarbls) + ' Errors', FALSE)
   ENDIF
   IF ErrsInShop.ErrorsIOCom>0 THEN
     WriteLog('  ' +shop_str + ' I/O Setup:      '+int2str(ErrsInShop.ErrorsIOCom) + ' Errors', FALSE)
   ENDIF
   IF ErrsInShop.ErrorsPrgrms>0 THEN
     WriteLog('  ' +shop_str + ' Program Setup:  ' + int2str(ErrsInShop.ErrorsPrgrms) + ' Errors', FALSE)
   ENDIF
   IF ErrsInShop.ErrorsRgstrs>0 THEN
     WriteLog('  ' +shop_str + ' Register Setup: ' + int2str(ErrsInShop.ErrorsRgstrs) + ' Errors', FALSE)
   ENDIF
    WriteLog('',FALSE)

  WriteLog('The Vision Process Setup Errors:', FALSE)

   IF ErrsInVision.ErrorsVarbls>0 THEN
     WriteLog('  Vision Variable Setup: ' + int2str(ErrsInVision.ErrorsVarbls) + ' Errors', FALSE)
   ENDIF
   IF ErrsInVision.ErrorsIOCom>0 THEN
     WriteLog('  Vision I/O Setup:      '+int2str(ErrsInVision.ErrorsIOCom) + ' Errors', FALSE)
   ENDIF
   IF ErrsInVision.ErrorsPrgrms>0 THEN
     WriteLog('  Vision Program Setup:  ' + int2str(ErrsInVision.ErrorsPrgrms) + ' Errors', FALSE)
   ENDIF
   IF ErrsInVision.ErrorsRgstrs>0 THEN
     WriteLog('  Vision Register Setup: ' + int2str(ErrsInVision.ErrorsRgstrs) + ' Errors', FALSE)
   ENDIF
    WriteLog('',FALSE)

    delay 500
-- if here had at least one error
  RETURN(TRUE)

END chk_for_errs
-----------------------------------------------------------------------------------
ROUTINE initgmwizvar
--  This routine clears some and checks some if initated for GM wizard variables
-----------------------------------------------------------------------------------
VAR
  v, w, x, y, z:  INTEGER

BEGIN

  ChkItIsInit -- chk var to be unitialized

  srvo_optn --check if servo gun option is installed
  srvotd_optn --check if servo tip dresser option is installed

  --General setup
  wiz_exec     = FALSE		   --Execute Wizard
  set_eip      = 0                --Set ethernet I/P address

  setrbtnm     = 0		   --Set robot name
  mfg_area     = 0                --Manufacturing area
  num_proc     = 0                --Number of processes
  bshop_proc1  = 0                --Bodyshop application process 1
  bshop_proc2  = 0                --Bodyshop application process 2
  dual_proc    = 0                --Used in display logic for process 2
  stndalncfg   = 0                --Bodyshop standalone configuration application

  --Spot
  numwldctrl    = 0                --Number of spot weld controllers
  sp_ttl_eq     = 0                --Spotweld total number of equipments
  sp_ttl_gn     = 0                --Spotweld total number of guns
  spttl_eq1gn   = 0                --Spotweld total number of guns for equipment 1
  spttl_eq2gn   = 0                --Spotweld total number of guns for equipment 2
  sp_eqnum      = 0                --Wizard equipment number for execution
  sp_eqgn_num   = 0                --Wizard equipment guns per equipment tracking
  sp_gnnum      = 0                --Wizard gun number for execution
  wld_ctrl      = 0                --Wizard weld equipment for execution
  wld1_app      = 0                --One weld controller application
  wld2_app      = 0                --Two weld controllers applciation
  servotipdrs   = 0                --Servo Tip Dressing is Used
  quest_val     = 0                --Used for tunediag log during auto tuning
  cap_chnger    = 0                --Is a cap changer used
  cap_chngtype  = 0                --Type of cap changer used
  swgtcnumguns  = 0                --added during V8.33P09 causing GMAUTOUP to blow errors on non TC apps.

   FOR x = 1 TO 2 DO                                  --Clear all equipment
    FOR y = 1 TO 5 DO                                 --Clear all guns
      spotapp_eq[x].spotgun[y].sp_srvogn     = 0      --gun is a servo gun
      spotapp_eq[x].spotgun[y].sg_ax_setup   = 0      --setup servo gun axis data
      spotapp_eq[x].spotgun[y].sg_motr       = 0      --servo gun motor selection
      spotapp_eq[x].spotgun[y].sg_mot2       = 0      --servo gun motor selection menu rollover selection
      spotapp_eq[x].spotgun[y].sg_maxpr      = 0      --servo gun maximum pressure
      spotapp_eq[x].spotgun[y].sg_guntyp     = 0      --servo gun type (C or X)
      spotapp_eq[x].spotgun[y].sg_ampno      = 0      --servo gun amp number
      spotapp_eq[x].spotgun[y].sg_prs_set    = 0      --servo gun pressure/backup/distance data setup
      spotapp_eq[x].spotgun[y].sp_xfot       = 0      --transformer overtemp
      spotapp_eq[x].spotgun[y].sp_td         = 0      --tip dresser
      spotapp_eq[x].spotgun[y].sp_srvo_td    = 0      --servo tip dresser
      spotapp_eq[x].spotgun[y].sp_td_lp      = 0      --tip dresser safety locking pin
      spotapp_eq[x].spotgun[y].sp_dvg        = 0      --dress verification
      spotapp_eq[x].spotgun[y].ag_vlv        = 0      --air gun valve type
      spotapp_eq[x].spotgun[y].ag_denspk     = 0      --air gun dense pack
      spotapp_eq[x].spotgun[y].ag_retstrk    = 0      --air gun retract stroke
      spotapp_eq[x].spotgun[y].ag_gun_opn    = 0      --air gun gun open detect
      spotapp_eq[x].spotgun[y].ag_gun_rtrc   = 0      --air gun retract open detect
      spotapp_eq[x].spotgun[y].ag_soft_tch   = 0      --air gun soft touch
      spotapp_eq[x].spotgun[y].ag_eql_prss   = 0      --air gun equalization pressure
      spotapp_eq[x].spotgun[y].ispare3       = 0      --aluminum welding V8.33P10    
    ENDFOR
  ENDFOR

  FOR z = 1 TO 2 Do
    wldapp[z].wld_eip      = 0  --weld controller load EIP parameters
    wldapp[z].wld_wtreip   = 0  --weld controller load water saver EIP parameters
  ENDFOR

  FOR x = 1 TO 2 DO				       --Clear all equipment
    FOR y = 1 to 5 DO				       --Clear all guns
      IF UNINIT(spotctrl[x].spot_gun[y].sg_maxpr) THEN --Initialize max pressure storage variable
        spotctrl[x].spot_gun[y].sg_maxpr = 0
      ENDIF
    ENDFOR
  ENDFOR

  --Dispense
  numdispctrl   = 0                --Number of dispense controllers
  disp_ctrl     = 0                --Wizard dispense equipment for execution
  disp1_app     = 0                --Dispense controller 1 application
  disp2_app     = 0                --Dispense controller 2 application

  FOR w = 1 TO 2 Do
    dispapp[w].disp_eqty = 0		--dispense controller type
    dispapp[w].disp_ldsc = 0		--dispense controller load dispense schedules
    dispapp[w].disp_dozr = 0		--dispense controller dozer
    dispapp[w].ispare1   = 0            --dispense 1K = 1 2K = 2
  ENDFOR

  --Projection Welding
  numprojctrl   = 0		   --number of projection weld controllers
  proj1_app     = 0		   --projection weld controller 1 application

  FOR w = 1 TO 2 DO
    projwldapp[w].proj_ctrl = 0    --projection weld controller type
  ENDFOR

  --Dimpler
  numdimpctrl   = 0		   --number of dimpler controllers
  dimp1_app     = 0                --dimpler controller 1 application

  --Stud
  numstudctrl   = 0                --Number of stud controllers
  stud_ctrl     = 0                --Wizard stud equipment for execution
  stud1_app     = 0                --Stud controller 1 application
  stud2_app     = 0                --Stud controller 2 application
  stud1_backup  = 0                --Stud controller 1 application backup
  stud2_backup  = 0                --Stud controller 1 application backup
  stud1_slide   = 0                --Stud controller 1 tool slide
  stud2_slide   = 0                --Stud controller 1 tool slide
--  studapp       = 0                 --Stud application

  --FDS
  numfdsctrl   = 0                --Number of controllers
  fds_ctrl     = 0                --Wizard equipment for execution
  fds1_app     = 0                --controller 1 application
  fds2_app     = 0                --controller 2 application

  --SPR
  numsprctrl   = 0                --Number of controllers
  spr_ctrl     = 0                --Wizard equipment for execution
  spr1_app     = 0                --controller 1 application
  spr2_app     = 0                --controller 2 application

  IF UNINIT(chk_repwr) THEN
    chk_repwr = FALSE	           --Controller requires power required
  ENDIF

END initgmwizvar
-----------------------------------------------------------------------------------
ROUTINE repwr_msg
--  Posts a notification to the user if the robot must repower.
-----------------------------------------------------------------------------------
VAR
  status : INTEGER
BEGIN
  IF (chk_repwr) THEN

    CLR_STND_SCR(status)
    WRITE (CR,repwr1_gm, CR)             -- The robot must now re-power to
    WRITE (repwr2_gm, CR)                -- controlled start.  Please wait until
    WRITE (repwr3_gm, CR)                -- the re-power has finished before
    WRITE (repwr4_gm, CR)                -- performing a COLD-START.
    WRITE TPPROMPT (CR, enter_gmdata,'.')-- ***Press ENTER to continue***
  ENDIF
END repwr_msg
-----------------------------------------------------------------------------
ROUTINE Setup_Reset
-- PURPOSE: to reset all the prompts for the user. this executes when the user has
--          answered yes in the RUN_SETUP routine
--
-----------------------------------------------------------------------------

BEGIN

Reset_Cell = TRUE  -- this resets alot Cell I/O Variables

-- RK added 12-4-16   to reset teh SpinTop setup
set_B_PVar('GMSPINIO','Spin_IO_Done',FALSE)
set_B_PVar('GMSPINPG','SpinPrgsDone',FALSE)
set_B_PVar('GMSPINRG','SpinRegsDone',FALSE)
set_B_PVar('GMSPINVR','SpinVarsDone',FALSE)

-- Reset all the Cell I/O that the user has setup
set_B_PVar('GMCELLIO','Cell_IO_Done',FALSE)

set_B_PVar('GMCELLPG','StylTblDone',FALSE)
set_B_PVar('GMCELLPG','CellMacDone',FALSE)
set_B_PVar('GMCELLPG','CellPrgsDone',FALSE)

set_B_PVar('GMCELLRG','CellRegsDone',FALSE)

set_B_PVar('GMCELLVR','CellVarsDone',FALSE)

set_B_PVar('GMCOLBIO','ColbIO_Setup',FALSE)
set_B_PVar('GMCOLBVR','ColbVR_Setup',FALSE)
set_B_PVar('GMCOLBPG','ColbPG_Setup',FALSE)


IF Use_MH_Tool THEN
  set_B_PVar('GMMHPRGS','SmrtP1McroDn',FALSE)
  set_B_PVar('GMMHPRGS','SmrtP2McroDn',FALSE)
  set_B_PVar('GMMHPRGS','Prg_MH_Setup',FALSE)
  set_B_PVar('GMMHPRGS','MH_McrosDone',FALSE)
  set_B_PVar('GMMHPRGS','OutMacSetup[1]',FALSE)
  set_B_PVar('GMMHPRGS','OutMacSetup[2]',FALSE)
  set_B_PVar('GMMHPRGS','OutMacSetup[3]',FALSE)

  set_B_PVar('GMMHGPIO','IO_MH_Setup',FALSE)

  FOR i = 1 TO Max_In_Blks DO
   set_B_PVar('GMMHGPIO','InBlockSetup['+int2str(i)+']',FALSE)
  ENDFOR --
  FOR i = 1 TO Max_OutBlks DO
   set_B_PVar('GMMHGPIO','OutVlvSetup['+int2str(i)+']',FALSE)
  ENDFOR --
   set_B_PVar('GMMHGPIO','AnalgInSetup[1]',FALSE)
   set_B_PVar('GMMHGPIO','AnalgInSetup[2]',FALSE)
   set_B_PVar('GMMHGPIO','AnalgInSetup[3]',FALSE)
   set_B_PVar('GMMHGPIO','AnalgInSetup[4]',FALSE)

   set_B_PVar('GMMHREGS','Reg_MH_Setup',FALSE)

   set_B_PVar('GMMHVARS','Var_MH_Setup',FALSE)

ENDIF

IF UseToolChngr THEN
  set_B_PVar('GMTLCHIO','TC_Is_Setup',FALSE)
  set_B_PVar('GMTLCHIO','TS_is_Setup',FALSE)
  set_B_PVar('GMTLCHIO','StndisSetup[1]',FALSE)
  set_B_PVar('GMTLCHIO','StndisSetup[2]',FALSE)
  set_B_PVar('GMTLCHIO','StndisSetup[3]',FALSE)
  set_B_PVar('GMTLCHIO','StndisSetup[4]',FALSE)
ENDIF

IF Use_Vision THEN
  set_B_PVar('GMVISNIO','Visn_IO_Done',FALSE)
  set_B_PVar('GMVISPRG','VisnPrgsDone',FALSE)
  set_B_PVar('GMVISREG','VisnRegsDone',FALSE)
  set_B_PVar('GMVISVAR','VisnVarsDone',FALSE)
ENDIF

SELECT (mfg_area) OF --
  CASE(mfg_area_bs): -- Body Shop
    set_B_PVar('GMBODYRG', 'GMBSRegsDone',FALSE)

    set_B_PVar('GMDIMPIO','DimpIO_Setup',FALSE)
    set_B_PVar('GMDIMPPG','DimpPG_Setup',FALSE)
    set_B_PVar('GMDIMPRG','DimpRG_Setup',FALSE)
    set_B_PVar('GMDIMPVR','DimpVR_Setup',FALSE)

    --dispense not included, most setup occurs on power up

    set_B_PVar('GMFDSIO','FDSIO_Setup',FALSE)
    set_B_PVar('GMFDSPG','FDSPG_Setup',FALSE)
    set_B_PVar('GMFDSRG','FDSRG_Setup',FALSE)
    set_B_PVar('GMFDSVR','FDSVR_Setup',FALSE)

    set_B_PVar('GMPROJIO','ProjIO_Setup',FALSE)
    set_B_PVar('GMPROJIO2','ProjIO2Setup',FALSE)
    set_B_PVar('GMPROJPG','ProjPG_Setup',FALSE)
    set_B_PVar('GMPROJRG','ProjRG_Setup',FALSE)
    set_B_PVar('GMPROJVR','ProjVR_Setup',FALSE)

    set_B_PVar('GMSPOTIO','SpotIO_Setup',FALSE)
    set_B_PVar('GMSPOTIO2','SpotIO2Setup',FALSE)
    set_B_PVar('GMSPOTIO3','SpotIO3Setup',FALSE)
    set_B_PVar('GMSPOTPG','SpotPG_Setup',FALSE)
    set_B_PVar('GMSPOTPG2','SpotPG2Setup',FALSE)
    set_B_PVar('GMSPOTRG','SpotRG_Setup',FALSE)
    set_B_PVar('GMSPOTRG2','SpotRG2Setup',FALSE)
    set_B_PVar('GMSPOTVR','SpotVR_Setup',FALSE)
    set_B_PVar('GMSPOTVR2','SpotVR2Setup',FALSE)
    --gmspotvr3 not included, motor config, no prompts!
    set_B_PVar('GMSPOTVR4','SpotVR4Setup',FALSE)
    --gmspotvr5 not included, servo tip dress motor config, no prompts!

    set_B_PVar('GMSPRIO','SPRIO_Setup',FALSE)
    set_B_PVar('GMSPRPG','SPRPG_Setup',FALSE)
    set_B_PVar('GMSPRRG','SPRRG_Setup',FALSE)
    set_B_PVar('GMSPRVR','SPRVR_Setup',FALSE)

    set_B_PVar('GMSTUDIO','StudIO_Setup',FALSE)
    set_B_PVar('GMSTUDPG','StudPG_Setup',FALSE)
    set_B_PVar('GMSTUDRG','StudRG_Setup',FALSE)
    set_B_PVar('GMSTUDVR','StudVR_Setup',FALSE)

  CASE(mfg_area_ps): -- Press Shop

    set_B_PVar('GMPRESIO','Pres_IO_Done',FALSE)
    set_B_PVar('GMPRESPG','PresPrgsDone',FALSE)
    set_B_PVar('GMPRESRG','PresRegsDone',FALSE)
    set_B_PVar('GMPRESVR','PresVarsDone',FALSE)

  CASE(mfg_area_pt): -- Powertrain Shop

    set_B_PVar('GMPT_IO','GMPT_IO_Done',FALSE)
    set_B_PVar('GMPTPRGS','GMPTPrgsDone',FALSE)
    set_B_PVar('GMPTREGS','GMPTRegsDone',FALSE)
    set_B_PVar('GMPTVARS','GMPTVarsDone',FALSE)

  CASE(mfg_area_pn): -- Paint Shop
  ELSE: -- unknown

ENDSELECT --

END Setup_Reset
-----------------------------------------------------------------------------
ROUTINE run_setup
-- PURPOSE: this routine will execute the setup as users selected. it can be ran from the menu
--          or it can be ran from the load screen
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(WizSetTimStr) THEN
  WizSetTimStr = 'Never'
ENDIF

IF (WizardStatus.SetupIs_Done =TRUE) THEN -- setup so it is known that the Setup is Completed

  REPEAT
    CLR_STND_SCR(gm_status)

    WRITE(cr,'Worckcell SETUP has already',cr)
    WRITE('been executed on: ',WizSetTimStr,cr)
    WRITE('User prompts to acknowledge each device',cr)
    WRITE('reset will be displayed. To reset all',cr)
    WRITE('devices without using prompts, enter 1',cr)
    WRITE('to execute setup WITHOUT prompts.',cr)
    WRITE(cr,'Enter 1 to RESET Cell, 0 to use Prompts.',cr)
    READ(ans)
  UNTIL (Verify_Answr(Ans,0,1))-- Verify Answer is between 0&4

    CLR_STND_SCR(gm_status)

   IF Ans=1 THEN
     POST_ERR(38000,'Previous Cell SETUP Reset by User', 0, 0) --
     WriteLog('Previous WorkCell Reset by User',FALSE)
     WriteLog('Overwriting '+WizSetTimStr+' Setup',FALSE)
     Setup_Reset -- call routine to reset all the prompts a user would be asked.
   ENDIF
ENDIF   -- endif for if the Setup has been already ran

  WizardStatus.SetupIs_Done =FALSE -- setup so it is known that the Setup is started

--Perform the robot setup based on all the questions just answered
  CLR_STND_SCR(gm_status)
  WRITE (CR)
  WRITE (rbtcfg1_gm,CR)-- Please wait while the robot is',CR)
  WRITE (rbtcfg2_gm,CR)-- configured...',CR)

  set_std_ctrl
 -- repwr_msg --Post repower message if req THIS IS IN GMMAIN1 set_std_ctrl

  GET_TIME(Wiz_StupTime) -- Save the wizard end time stamp
  CNV_TIME_STR(Wiz_StupTime,WizSetTimStr)

  WizardStatus.SetupIs_Done =TRUE -- setup so it is known that the Setup is Completed

END run_setup
-----------------------------------------------------------------------------------
ROUTINE displaycfg
--  This routine displays the current robot configuration
-----------------------------------------------------------------------------------
BEGIN

IF UNINIT(WizardStatus.Cnfg_Is_Done) THEN
  WizardStatus.Cnfg_Is_Done = FALSE
ENDIF

IF WizardStatus.Cnfg_Is_Done = FALSE  THEN -- if the wizard was never ran  wiz_exec = FALSE
  WriteLog('Display selected BEFORE wizard execution',FALSE)
  CLR_STND_SCR(gm_status)
  WRITE (CR, 'The Configuration wizard has')
  WRITE (CR, 'NOT been executed to display the ')
  WRITE (CR, 'the current Setup.',CR,CR)

  WRITE('Enter 1 to Return to Main Menu then',CR)
  WRITE ('Execute "',m18_gmdata,'"',CR)
  WRITE(gdata_ans,'(1): ')
  READ TPPROMPT(ans)
  RETURN -- go back to main screen
ENDIF

display_exec = FALSE

WizardStatus.DsplyIs_Done = FALSE -- set user retruned from Display mode

REPEAT -- Repeat until answered and Verified
  CLR_STND_SCR(gm_status)
  SELECT mfg_area OF -- launch the Display Setup set by wizard or load feature
    CASE(mfg_area_bs): -- Body Shop
      IF ($sleqnum = 1) AND (numdispctrl = 2) THEN  --skip showing display until after rerun
        WriteLog('Display Config skipped to rerun wizard',FALSE)
      ELSE  
        bshop_dsply
      ENDIF
    CASE(mfg_area_ps): -- Press Shop
      PressDisplay
      IF disp_only = TRUE THEN  --display only
        REPEAT -- Repeat until answered and Verified
          WRITE(CR,'Enter 0 to Return',CR)
          --WRITE(gdata_ans,'(0): ')
          READ TPPROMPT (ans)
        UNTIL (Verify_Answr(Ans,0,0))-- Verify Answer is 0  			
      ENDIF        
    CASE(mfg_area_pt): -- Powertrain Shop
        ACT_SCREEN ('TPSC', screen, gm_status) -- add to display form otherwise form ran, but not displayed in User#2
          IF gm_status<>0 THEN
            POST_ERR(38000, 'ACT_SCREEN TPSC failed', gm_status, 0) --
          ELSE
            FORCE_SPMENU(tp_panel,962,1)-- Put the menu2 so Form can display
            PwrtrnDisply -- call routine to launch GMPTDATA form
          ENDIF
        ACT_SCREEN ('T_SC', screen, gm_status)-- add to display the User menu#1 which has Write menu from Base wizard
    CASE(mfg_area_pn): -- Paint Shop
      paint_Disply
    ELSE:
      --POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in DISPLAYCFG routine in GMWIZARD', 0, 0) 
  ENDSELECT --

  IF disp_only = TRUE THEN  --display only
    RETURN  --return without asking to execute setup
  ENDIF  
  
  -- WRITE (CR, 'Select to Return to Configuration or',CR)
  -- WRITE ('Execute setup of current Configuration?',CR)
    WRITE(CR,'Enter 0 to Return, 1 to Execute Setup ',CR)
    WRITE(gdata_ans,'(0-1): ')
    READ TPPROMPT (ans)
  UNTIL (Verify_Answr(Ans,0,1))-- Verify Answer is 1 use prompt else NO
  IF ans = 1 THEN
    display_exec = TRUE
    wiz_exec = TRUE
    DispctIsDone = FALSE  --re execute ghost strokes
    config_comp = FALSE --allow additional robot setup 
  ELSE
    display_exec = FALSE
    --wiz_exec = FALSE  
  ENDIF

-- If display is complete, user has to select if run the wizard again or execute

    IF display_exec = TRUE THEN
      writeLog('Wizard Display Config completed ', FALSE)
      WizardStatus.DsplyIs_Done = TRUE -- set user retruned from Display mode
      run_setup -- run setup routine to complete, when done return back to main screen
      WizardStatus.Cnfg_Is_Done = TRUE -- if Setup done, then Configuration had to be done or loaded

    -- Below makes the wizard END NO questions asked PER B Kroll
  --    Exec_Wizard = FALSE
      wiz_exec = TRUE -- set flag wizard has finished to be used to know
                      -- the wizard was completed.
    ELSE
      --wiz_exec = FALSE
      --RETURN
    ENDIF

END displaycfg

-----------------------------------------------------------------------------------
ROUTINE bshop_cfg
--  This routine contains the wizard questions for bodyshop applications
-----------------------------------------------------------------------------------
BEGIN

 -- Need to ensure gmbodysh is loaded and available for use
  IF (Chk_loaded('gmbodysh')) THEN
    body_config --execute GM bodyshop configuration
  ELSE
    POST_ERR(38000, 'GMBODYSH program not LOADED', 0, 0) --
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
  ENDIF

  -- Set the wizard Confgiguration  to be all good
  WizardStatus.Cnfg_Status = 0
  WizardStatus.Cnfg_Is_Done = TRUE -- set true so next stage, display, can execute.

END bshop_cfg
-----------------------------------------------------------------------------------
ROUTINE press_cfg
-- This routine contains the wizard questions for powertrain configurations-
-- all questions for the rest of the wizard are done in this protion of the
-- wizard and upon returning should be completed, unless they accidently selected
-- and the first question asked was are you sure you want to run the powertrain wizzard
-- then the main waizard needs to be executed again.
-----------------------------------------------------------------------------------
BEGIN

 -- Need to ensure GMPWRTN is loaded and available for use
  IF (Chk_loaded('gmpress')) THEN
    Press_Config--execute GM Press configuration
  ELSE
    POST_ERR(38000, 'GMPRESS program not LOADED', 0, 0) --
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
  ENDIF

END press_cfg
-----------------------------------------------------------------------------------
ROUTINE pwrtrn_cfg
-- This routine contains the wizard questions for powertrain configurations-
-- all questions for the rest of the wizard are done in this protion of the
-- wizard and upon returning should be completed, unless they accidently selected
-- and the first question asked was are you sure you want to run the powertrain wizzard
-- then the main waizard needs to be executed again.
-----------------------------------------------------------------------------------
BEGIN

 -- Need to ensure GMPWRTN is loaded and available for use
  IF (Chk_loaded('gmpwrtn')) THEN
    GMPT_Config --execute GM Powertrain configuration
  ELSE
    POST_ERR(38000, 'GMPWRTN program not LOADED', 0, 0) --
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
  ENDIF

END pwrtrn_cfg
-----------------------------------------------------------------------------------
ROUTINE paint_cfg
-- This routine contains the wizard questions for Paintshop configurations.
-- All questions for the rest of the wizard are done in this portion of the
-- wizard and upon returning should be completed, unless they accidently selected
-- and the first question asked was are you sure you want to run the powertrain wizzard
-- then the main waizard needs to be executed again.
-----------------------------------------------------------------------------------
BEGIN

 -- Need to ensure GMPAINT is loaded and available for use
  IF (Chk_loaded('gmpaint')) THEN
    Paint_Config --execute GM Paintshop configuration
  ELSE
    POST_ERR(38000, 'GMPAINT program not LOADED', 0, 0) --
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1 -- indicated Cell Wizard has missing files
  ENDIF

END paint_cfg
-----------------------------------------------------------------------------
ROUTINE Set_eipData
-- PURPOSE: to Prompt user to enter the EIP settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR

Num_of_loops :INTEGER -- Used for loop counter to determine if Wizard status should be executed
                      -- should only execute the wizard status on teh first loop, if user got it
                      -- wrong and runs again do not increment.

BEGIN

  set_eip = 1 -- set answer to yes to get it to run

  Num_of_loops = 0

  WHILE (set_eip = 1) DO --
    REPEAT  -- ask for EIP settings
      CLR_STND_SCR(gm_status)
      WRITE(CR, eip_host_na7,CR) -- 'The IP Address is the following:
      WRITE(eip_oct1, '.',eip_oct2, '.',eip_oct3, '.',eip_oct4,CR) -- 'eip_oct1,'.',eip_oct2,'.',eip_oct3,'.',eip_oct4
      WRITE(CR,eip_host_n10 ,'?' ,CR)  -- 'Change Robot IP Address?'
      WRITE('1.', yes_gmdata,CR)       -- '1. YES
      WRITE('2.', no_gmdata,CR)        -- '2. NO
      WRITE(gdata_ans,'(1-2):')        -- 'Answer(1-2):
      READ(set_eip)
    UNTIL (Verify_Answr(set_eip,1,2))

    IF (set_eip = wizans_no) THEN  --Enter IP Address
      WriteLog('NO Change to EIP Settings by user',FALSE)
      WriteLog('Using '+ int2str(eip_oct1) + '.' + int2str(eip_oct2) + '.' + int2str(eip_oct3) +'.'+ int2str(eip_oct4),FALSE)
      RETURN
    ENDIF

    Num_of_loops = Num_of_loops + 1

    REPEAT -- get first octet
      CLR_STND_SCR(gm_status)
      WRITE(CR, eip_host_na2,CR)
      WRITE(eip_host_na3,'?',CR)
      IF (eip_oct1 = 0) THEN
        WRITE(gdata_ans,'  :???.',eip_oct2, '.',eip_oct3, '.',eip_oct4,': ',CR)
      ELSE
        WRITE(gdata_ans,'  :"',eip_oct1,'".',eip_oct2, '.',eip_oct3, '.',eip_oct4,': ',CR)
      ENDIF
      READ(ans)
    UNTIL(Verify_Answr(ans,1,255))
    eip_oct1 = ans -- user confirm EIP now save

    IF Num_of_loops = 1 THEN -- dont keep logging if they have already done
      WizardStatus.Cnfg_Status = WizardStatus.Cnfg_Status + 1
    ENDIF

    REPEAT -- get second octet
      CLR_STND_SCR(gm_status)
      WRITE(CR, eip_host_na2,CR)
      WRITE(eip_host_na4,'?',CR)

     IF (eip_oct2 = 0) THEN -- if a value has been entered display it
       WRITE(gdata_ans,'  :',eip_oct1,'.???.',eip_oct3, '.',eip_oct4,': ',CR) -- 'eip_oct1,'.',eip_oct2,'.',eip_oct3,'.',eip_oct4
      ELSE
        WRITE(gdata_ans,'  :',eip_oct1,'."',eip_oct2, '".',eip_oct3, '.',eip_oct4,': ',CR)
      ENDIF
    READ(ans)
    UNTIL(Verify_Answr(ans,1,255))
    eip_oct2 = ans -- user confirm EIP now save

    IF Num_of_loops = 1 THEN -- dont keep logging if they have already done
      WizardStatus.Cnfg_Status = WizardStatus.Cnfg_Status + 1
    ENDIF

    REPEAT -- get third octet
      CLR_STND_SCR(gm_status)
      WRITE(CR, eip_host_na2,CR)
      WRITE(eip_host_na5,'?',CR)
      IF (eip_oct3 = 0) THEN -- if a value has been entered display it
        WRITE(gdata_ans,'  :',eip_oct1,'.',eip_oct2,'.???.',eip_oct4,': ',CR)
      ELSE
        WRITE(gdata_ans,'  :',eip_oct1,'.',eip_oct2, '."',eip_oct3, '".',eip_oct4,': ',CR)
      ENDIF
      READ(ans)
    UNTIL(Verify_Answr(ans,1,255))
    eip_oct3 = ans -- user confirm EIP now save

    IF Num_of_loops = 1 THEN -- dont keep logging if they have already done
      WizardStatus.Cnfg_Status = WizardStatus.Cnfg_Status + 1
    ENDIF

   REPEAT -- get fourth octet
     CLR_STND_SCR(gm_status)
     WRITE(CR, eip_host_na2,CR)
     WRITE(eip_host_na6,'?',CR)
     IF (eip_oct4 = 0) THEN -- if a value has been entered display it
       WRITE(gdata_ans,'  :',eip_oct1,'.',eip_oct2,'.',eip_oct3,'.???: ',CR)
     ELSE
       WRITE(gdata_ans,'  :',eip_oct1,'.',eip_oct2, '.',eip_oct3, '."',eip_oct4,'": ',CR)
     ENDIF

   READ(ans)
   UNTIL(Verify_Answr(ans,1,255))
   eip_oct4 = ans -- user confirm EIP now save

   IF Num_of_loops = 1 THEN -- dont keep logging if they have already done
     WizardStatus.Cnfg_Status = WizardStatus.Cnfg_Status + 1
   ENDIF

  ENDWHILE --

END Set_eipData
-----------------------------------------------------------------------------------
ROUTINE run_config
--  This routine contains the wizard questions for the robot configuration wizard
-----------------------------------------------------------------------------------
BEGIN

  REPEAT

     CLR_STND_SCR(gm_status)
     WRITE(CR,run_gmwiz,CR)     -- Robot Wizard Settings Will be Reset
     WRITE(gmwizcont,'?',CR)    -- Do you want to continue?
     WRITE('1.', yes_gmdata,CR) -- 1. YES
     WRITE('2.', no_gmdata,CR)  -- 2. NO
     WRITE(gdata_ans,'(1-2):')  -- Answer(1-2):
     READ(ans)
  UNTIL(Verify_Answr(ans,1,2))

  IF (ans = wizans_no) THEN
  --  GOTO end_config
    RETURN
  ENDIF

  WizardStatus.Cnfg_Status = 0
  WizardStatus.Cnfg_Is_Done = FALSE -- wizard is starting

  initgmwizvar

  IF UNINIT(config_comp) THEN --used to allow robot configuration for robot config that
			     --happens outside of gmwizard (e.g. cold start, servo gun motor)
    config_comp = FALSE
  ENDIF
  IF UNINIT(DispctIsDone) THEN -- RK Added 4-29-17 to indicate the GMDISPCT program
    DispctIsDone = FALSE       -- has executed, if needed. This does the ghosting
  ENDIF                        -- stokes for setup after wizard ends.

  --Setup DCS question
  REPEAT
    CLR_STND_SCR(gm_status)
    WRITE(CR,safeio_gm2,'?',CR) -- Initialized DCS Settings  safeio_gm1
    WRITE('1.', yes_gmdata,CR)  -- 1. YES
    WRITE('2.', no_gmdata,CR)   -- 2. NO
    WRITE(CR,safeio_gm3,',',CR)     --If answer is yes,
    WRITe(safeio_gm4,CR)        --DCS APPLY is required 
    WRITE(CR,gdata_ans,'(1-2):')   -- Answer(1-2):
    READ(ans)
  UNTIL(Verify_Answr(ans,1,2))
  set_safeio = ans

  WizardStatus.Cnfg_Status = WizardStatus.Cnfg_Status + 1

  Set_eipData -- Call routine to Enter the EIP data and ask if changes required

--  WHILE (wiz_exec = FALSE) DO --loop until user completes the wizard for the selected shop
    chk_repwr = FALSE -- RK Added 5-25-16 incase user setup a shop, then returned and chose another and
                      -- doesnt need the dispense or REPOWER because the setup was changed before.
    REPEAT
      CLR_STND_SCR(gm_status)
      WRITE(CR,mfg_gmdata,'?',CR)     -- Select Manufacturing Area?
      WRITE(' 1. ',byd_gmdata,CR)     -- 1. Bodyshop
      WRITE(' 2. ',mf_gmdata,CR)      -- 2. Metal Forming
      WRITE(' 3. ',pt_gmdata,CR)      -- 3. Powertrain
      WRITE(' 4. ',ps_gmdata,CR)      -- 4. Paintshop (Sealing)
      WRITE(CR, gdata_ans,'(1-4):  ') -- gdata_ans,'(1-4):
      READ(ans)
    UNTIL (Verify_Answr(ans,1,4))
    mfg_area = ans

    WizardStatus.Cnfg_Status = WizardStatus.Cnfg_Status + 1

    SELECT mfg_area OF

      CASE(mfg_area_bs):
        Cur_Shop_Str = 'Body Shop'
        bshop_cfg

      CASE(mfg_area_ps):
        numdispctrl = 0 -- Cannot have dispense in Press, reset incase user had setup
                        -- then ran this piece
        Cur_Shop_Str = 'Press Shop'
        press_cfg

      CASE(mfg_area_pt):
        Cur_Shop_Str = 'Powertrain'
        pwrtrn_cfg

      CASE(mfg_area_pn):
        Cur_Shop_Str = 'Paint Shop'
        paint_cfg
      ELSE:
        POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in RUN_CONFIG routine in GMWIZARD', 0, 0) --
    ENDSELECT
--  ENDWHILE

  -- Per Bill Kroll must run Display after wizard automatically, dont agree but customer is always right?

-- if Setup done, then Configuration had to be done or loaded
  IF (exec_wizard = TRUE) THEN
    IF WizardStatus.Cnfg_Is_Done = TRUE THEN  -- specific app must set this to true at the end of the application
      displaycfg
    ENDIF
  ELSE
    RETURN
  ENDIF
  -- run_setup routine to setup all the questions already answered.

END run_config
-----------------------------------------------------------------------------------
ROUTINE load_cfg
--  This routine contains loads the robot configuration from file
-----------------------------------------------------------------------------------
BEGIN

IF (LoadSavePerm = TRUE) THEN  -- RK added 1-29-17
  IF (chk_loaded('gmwzldsv')) THEN -- Call program for loading and saving of variables
    WriteLog('  Launching the Load and Save Routine',FALSE)
    gmwzldsv -- Call program to load and save
    WriteLog('  Load and Save Routine Completed',FALSE)
  ELSE
    WriteLog('GMWZLDSV is not loaded for use',TRUE)
  ENDIF

ELSE -- Loading and saving is disabled

  CLR_STND_SCR(gm_status)
  WRITE (CR, 'LOAD Configuration Menu',CR)
  WRITE (CR,'The Load configuration files is')
  WRITE (CR,'under development. This allows')
  WRITE (CR,'loading a previously used wizard.')
  WRITE (CR, 'Please look for in a Future Release!',CR)

  WRITE TPPROMPT (CR, enter_gmdata,'.')
  READ TPPROMPT (CR)

ENDIF

END load_cfg
-----------------------------------------------------------------------------
ROUTINE misc_tool
-- PURPOSE: Miscellaneous tools menu
--
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
misc_ans:  INTEGER

BEGIN

--Initialize variables
  -- Check for Language Initialization
  IF UNINIT(wiz_lang) THEN
    set_english
    wiz_lang = 1
  ENDIF

  IF UNINIT(m1_gmdata) THEN
   set_english
   wiz_lang = 1
  ENDIF

  IF UNINIT(Lang_set) THEN
    Set_english -- 1st Run must set language to english
    Lang_set = TRUE
  ENDIF


  IF (mfg_area = mfg_area_bs) THEN --bodyshop only

    REPEAT
      CLR_STND_SCR(gm_status)

      WRITE(CR,misc_gmdata,CR)      -- Miscellaneous Tools
      WRITE ('1. ',misc_idnsopt ,CR) -- 1. IDNS Safety Options
      WRITE ('2. ',clrcfg_gm_1 ,CR) -- 2. Clear Config
      WRITE ('3. ',misc_stndaln ,CR) -- 3. Standalone Single Configurations
      WRITE ('4. ',misc_addprg ,CR) -- 4. Additional Programs and Templates
      WRITE ('5. ',misc_swgset ,CR) -- 5. Additional Servo Gun App Setup      
      WRITE ('0. ',exit_gmdata ,CR) -- 0. Exit
      WRITE (m31_gmdata,' 0-5:  ') -- Enter Selection 0-5:
      READ (misc_ans)
    UNTIL (Verify_Answr(misc_ans,0,5)) 

  ELSE --all other shops or no shop

    REPEAT
      CLR_STND_SCR(gm_status)

      WRITE(CR,misc_gmdata,CR)      -- Miscellaneous Tools
      WRITE ('1. ',misc_idnsopt ,CR) -- 1. IDNS Safety Options
      WRITE ('2. ',clrcfg_gm_1 ,CR) -- 2. Clear Config
      WRITE ('3. ',misc_stndaln ,CR) -- 3. Standalone Single Configurations
      WRITE ('4. ',misc_addprg ,CR) -- 4. Additional Programs and Templates      
      WRITE ('0. ',exit_gmdata ,CR) -- 0. Exit
      WRITE (m31_gmdata,' 0-4:  ') -- Enter Selection 0-5:
      READ (misc_ans)
    UNTIL (Verify_Answr(misc_ans,0,4))

  ENDIF --body shop    

  SELECT misc_ans OF
    CASE(wiz_idnsopt):

      idns_menu --IDNS menu

    CASE(wiz_clr_cfg):

      REPEAT
        CLR_STND_SCR(gm_status) 

	WRITE (CR,'****** Clear Customization *******',CR)
	WRITE ('To clear out all wizard settings from',CR)
	WRITE ('the robot first backup the mastering',CR)
	WRITE ('files and record $FNO as these will',CR)
	WRITE ('have to be restored. Then preform an',CR)
	WRITE ('Init Start.',CR,CR)
		        
	WRITE ('Answer 1 to Exit :')
	READ (ans)
	WRITE (CR)
      UNTIL (Verify_Answr(ans,1,1))

    CASE(wiz_stndalne):

      stndaln_menu  --standalone single config menu

    CASE(wiz_addprog):

      addprg_menu   --add program menu

    CASE(wiz_swgsetup):

      swgset_menu  --additional servo gun setup menu

    CASE(0):  --Exit

    ELSE:
  ENDSELECT

END misc_tool
-----------------------------------------------------------------------------
ROUTINE Confirm_Exit:BOOLEAN
-- PURPOSE: to prompt the operator it ensure they want to exit. it will also
--          confirm that they are not exiting without ever completing a setup
--          on one of the applications. They can exit, but we will log that they end
--          and never completed the setup.
--
--
-- INPUT:
--            -
-- OUTPUT:   returns if the user has confirm to exit
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
User_Confirm  : BOOLEAN -- Used for what the user desires to do end or not
Conf_string   : STRING[32] -- Will display Configuration completion status
SetupString   : STRING[32] -- Will display setup completion status
BEGIN

User_Confirm = FALSE

     IF (WizardStatus.SetupIs_Done) AND (WizardStatus.Cnfg_Is_Done) THEN   -- check user has finished
        RETURN(TRUE)
     ENDIF

   REPEAT
     CLR_STND_SCR(gm_status)
     WRITE (CR,'Confirm to Exit the Wizard ?',CR,CR)
     WRITE ('You have selected to Exit,' ,CR)
     IF (WizardStatus.Cnfg_Is_Done) THEN -- check user has atleast finish the
       Conf_String = '"Configuration" is Complete'
       --WRITE ('Configuration is Completed' ,CR)     -- Configuration setup once.
     ELSE
       Conf_String = 'CONFIGURATION NOT DONE and' -- If configuration not done
       --WRITE ('CONFIGURATION NOT DONE' ,CR)     -- Setup CANNOT be done because
     ENDIF                                        -- can't setup if not configured


     IF (WizardStatus.SetupIs_Done) THEN   -- check user has at least finished the
       SetupString = '"Setup" is Completed'
    --   WRITE ('Setup is Completed' ,CR)  -- application setup once, to ensure
     ELSE                                  -- they are exiting and it has been done
       IF (WizardStatus.Cnfg_Is_Done) THEN
         Conf_String = Conf_String + ',but'
       ENDIF
       SetupString = 'SETUP HAS NOT BEEN DONE !!'
     ENDIF

     WRITE (Conf_String,CR)
     WRITE (SetupString,CR)

     WRITE (CR,'Enter 1 to Exit wizard' ,CR)
     WRITE ('Enter 0 to Cancel Exit',CR,CR)
     WRITE(gdata_ans,':  ')
     READ (Ans)
   UNTIL Verify_Answr(Ans,0,1)

   IF (ans = 1) THEN -- if exiting, log if something never done completly
     IF NOT (WizardStatus.Cnfg_Is_Done) THEN
       POST_ERR(38000, 'Wizard CONFIG Incomplete by user', 0, 0) --
     ENDIF
     IF NOT (WizardStatus.SetupIs_Done) THEN
       POST_ERR(38000, 'Wizard SETUP Incomplete by user', 0, 0) --
     ENDIF
     User_Confirm = TRUE

      CLR_STND_SCR(gm_status)
      WRITE(m32_gmdata,CR)  -- Exiting Wizard

      DELAY DisplayDely
      CLR_STND_SCR(gm_status)

   ENDIF

    REPEAT
      Errs_ans = 0
      IF (chk_for_errs) THEN -- Go display number of errors for user
          WRITE (CR,'Enter 1=Exit,0= Cancel Exit')
          WRITE(CR,gdata_ans,':  ')
          READ (Errs_ans)
      ELSE
        Errs_ans = 1 -- no errors no question needed
      ENDIF
      IF Errs_ans = 0 THEN
        User_Confirm = FALSE
      ENDIF
    UNTIL Verify_Answr(Errs_ans,0,1)

  RETURN(User_Confirm)

END Confirm_Exit

-----------------------------------------------------------------------------------
--                      Main Body of GMWizard                                    --
-----------------------------------------------------------------------------------
BEGIN  -- gmwwizard

  set_std_var -- initialize GM Karel variables

  ChkItIsInit -- check vars are initialized NO resetting in this routine

  PUSH_KEY_RD('TPKB', 255, pop_index, gm_status)
  ATT_STND_WIN(gm_status)  -- in klutils
  CLR_STND_SCR(gm_status)
  ACT_SCREEN ('T_SC', screen, gm_status)

  GET_VAR(entry, '*SYSTEM*' , '$SYS_CONFIG.$STARTMD', ConStartStat, gm_status)
   IF gm_status <> 0 THEN
     POST_ERR(38000, '[*SYSTEM*].$SYS_CONFIG.$STARTMD FAILED', gm_status, 0) --
     ConStartStat = cold_state -- force at cold_state
   ENDIF

  IF UNINIT(ConStartStat) THEN --make sure code can run
    ConStartStat = Cold_State
  ENDIF

  IF UNINIT(StrtFrmWizrd) THEN
    StrtFrmWizrd = FALSE
  ENDIF

  IF UNINIT(disp_only) THEN
    disp_only = FALSE
  ENDIF
    
  Exec_Wizard = TRUE -- Set the wizard WHILE loop variable will End when False

  Setup_Log('GM Global 4') -- create and open the log file

  GET_TIME(Wiz_StrtTime)
  CNV_TIME_STR(Wiz_StrtTime,WizStrTimStr)-- set teh strart time of wizard

WHILE (Exec_Wizard) DO --

  REPEAT
    CLR_STND_SCR(gm_status)

    WRITE(CR,m30_gmdata,CR)      -- GRS-4 Global#4 Customization
    WRITE ('1. ',m4_gmdata ,CR)  -- 1. Select Language
    WRITE ('2. ',m17_gmdata ,CR) -- 2. Display Current Robot Configuration
    WRITE ('3. ',m18_gmdata ,CR) -- 3. Run Robot Configuration Tool
    WRITE ('4. ',m19_gmdata ,CR) -- 4. Load Robot Configuration from File
    WRITE ('5. ',misc_gmdata,CR) -- 5. Miscellaneous Tools
    WRITE ('6. ',exit_gmdata,CR) -- 6. Exit
    WRITE (m31_gmdata,' 1-6:  ') -- Enter Selection 1-6:
    READ (main_ans)
  UNTIL (Verify_Answr(main_ans,1,6))

ReDisplay :: -- RK added 1-29-17 to allow below to force things without an answer

  SELECT main_ans OF

    CASE(wiz_sel_lng):
      WRITE TPERROR(CHR(cc_clear_win))-- clear any text from error window
      writeLog('User selected Language Setup', FALSE)
      sel_lang
      writeLog('Language Setup Complete', FALSE)

    CASE(wiz_disp_cfg):
      writeLog('User selected Display Config ', FALSE)
      WRITE TPERROR(CHR(cc_clear_win))-- clear any text from error window
      WizardStatus.DsplyIs_Done = FALSE -- Set user went into display mode
      WizardStatus.Dsply_Status = 0  -- reset this currently no function 3-23-16
      disp_only = TRUE --sms added to use as a return hook
      displaycfg -- start the display of the setup
      disp_only = FALSE

    CASE(wiz_run_set):
      WRITE TPERROR(CHR(cc_clear_win))-- clear any text from error window
      writeLog('User selected Configuration wizard', FALSE)
      WizardStatus.Cnfg_Is_Done = FALSE -- reset Configuration complete
      WizardStatus.Cnfg_Status  = 0     -- set status to zero to be checked when returning

      -- Language Question Setting
      SELECT wiz_lang OF
        CASE(wiz_lang_eg):
          set_english       --English
        CASE(wiz_lang_sp):
          set_english       -- Spanish not supported yet
        CASE(wiz_lang_gm):
          set_german        -- German
        ELSE:
          set_english
      ENDSELECT

      run_config


      

      IF WizardStatus.Cnfg_Status = 0 THEN -- if returned we assume it finished without a known status
         WizardStatus.Cnfg_Is_Done = TRUE
      ELSE
        POST_ERR(38000, 'RUN_CONFIG '+Cur_Shop_Str+' Status='+int2str(WizardStatus.Cnfg_Status)+ &
                           ' Execution ', 0, 0) --
      ENDIF

    CASE(wiz_load_cfg): -- Load files from a backup or save the current configuration

        WRITE TPERROR(CHR(cc_clear_win))-- clear any text from error window
        WriteLog('  ',FALSE)
        writeLog('User selected LOAD Config ', FALSE)
        WizardStatus.LodedIs_Done = FALSE
        WizardStatus.Loded_Status = 0

        load_cfg -- execute the loading of a backup of previous valid configuration

        writeLog('Wizard Load Config completed ', FALSE)
        WriteLog('  ',FALSE)
        IF WizardStatus.Loded_Status = 0 THEN -- if returned we assume it finished
          IF (WizardStatus.LodedIs_Done = TRUE) THEN
            WizardStatus.Cnfg_Is_Done = TRUE -- loading a valid file makes config not nessacary
            main_ans = wiz_disp_cfg -- RK added to force display after Load save for viewing
            GOTO ReDisplay -- Jump up so redisplay so config will be displayed
          ENDIF
        ELSE -- Load had an issue
          POST_ERR(38000, 'LOAD_CFG routine '+int2str(WizardStatus.Loded_Status)+ &
                            ' = Status returned', 0, 0) --
        ENDIF

    CASE(wiz_misctool):  --Miscellaneous Tools
      misc_tool

    CASE(wiz_exit):
      writeLog('', FALSE)
      writeLog('User Selected to Exit Wizard', FALSE)

      IF (Confirm_Exit) THEN  -- call routine to confirm user wants to exit, also check to ensure
         Exec_Wizard = FALSE -- Wizard has ran to complete setup of something
      ELSE
         writeLog('User Did not Exit Wizard', FALSE)
      ENDIF

      --WRITE('Exiting Wizard',CR)
      CLR_STND_SCR(gm_status)
      WRITE(m32_gmdata,CR)

  ENDSELECT

 --  this is incase GM wants exit after wizard is ran, problem is once set
 --  when to you reset in case wizard is ran again???

 -- IF WizardStatus.Cnfg_Is_Done AND WizardStatus.SetupIs_Done THEN -- if totally succeful log it
 --   Exec_Wizard = FALSE
 -- ENDIF

ENDWHILE -- until variable Exec_Wizard = FALSE the WHILE will execute

  GET_TIME(Wiz_EndTime) -- Save the wizard end time stamp
  CNV_TIME_STR(Wiz_EndTime,WizEndTimStr)

  Finish_Log -- finish the log file for the wizard

-- Below maybe need for the GHOSTING KEY currently required, this is BS and
-- need to determine when it is going to trigger?? it occurs in SWCFSCRN when this
-- program returns.
IF (WizardStatus.Cnfg_Is_Done AND WizardStatus.SetupIs_Done) THEN
  wiz_exec = TRUE -- set flag wizard has finished to be used to know
                  -- the wizard was completed.
ELSE -- this is preventing the ghost key from occuring.
   wiz_exec = FALSE
ENDIF

--display text to mention ghost strokes at end of wizard running
-- DispctIsDone when true, indicates program has already been executed once

--If uninitialized, set it to TRUE so that on units that were updated, we don't go into
--the auto keystrokes
IF UNINIT (DispctIsDone) THEN
  DispctIsDone = TRUE
ENDIF
IF ((numdispctrl <> 0) AND (wiz_exec = TRUE) AND (DispctIsDone = FALSE)) THEN
  CLR_STND_SCR(gm_status)    -- Dispense setup will toggle',CR)
  WRITE(CR,dtype5gmdata,CR)  -- screens when exiting WIZARD',CR)
  WRITE(CR,dtype6gmdata,CR)  -- After hitting enter wait 30sec',CR)
  WRITE(CR,dtype7gmdata,CR)  -- ***Press ENTER to continue***')
  WRITE TPPROMPT (CR, enter_gmdata,'.')
  READ TPPROMPT (CR)
ENDIF

END gmwizard







