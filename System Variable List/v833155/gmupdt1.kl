--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             GMFanuc Robotics Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--    +
--    Program: gmupdt1
--
--    Description: This a utility program used at controlled start to load 
--                 specific programs; and set specific variables without
--                 running the wizzard. It shall be
--                 included as a utility option in the FD program for updates.
-------------------------------------------------------------------------------------------------------------
--    ROUTINES INCLUDED
--    gm_mac_rld  
-------------------------------------------------------------------------------------------------------------
--
--    gmtpld1
--
--    Language: KAREL
--
--    Source File: gmupdt1    1-AUG-03   03:33PM
--
--    Author: Lloyd Steed
--            Fanuc Robotics North America
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--       08-14-07   Steedlj BODYSHOP Update #1
-------------------------------------------------------------------------------------------------------------
PROGRAM gmupdt1
-------------------------------------------------------------------------------------------------------------
%ENVIRONMENT ATCLDEF
%ENVIRONMENT celldef
%ENVIRONMENT DNSVDEF
%ENVIRONMENT iosetup
%ENVIRONMENT mnmcdef
%ENVIRONMENT SLDEF
%ENVIRONMENT swgdef
%ENVIRONMENT SYCRDEF
%ENVIRONMENT sysdef
%ENVIRONMENT TPE
%ENVIRONMENT tpthrdef
%ENVIRONMENT FDEV 
%ENVIRONMENT REGOPE

%NOLOCKGROUP
%INVISIBLE
%RWACCESS

VAR
  gm_status  : INTEGER
  tdmac_done : BOOLEAN     -- td macros done
  cpchng_done: BOOLEAN
  gpmac_done : BOOLEAN
  ans        : INTEGER
  prog_nam   : STRING[12]
  psve       : INTEGER
  list_id    :INTEGER
  max_list   :INTEGER
  status     :INTEGER
  entry	     :INTEGER
  dv_stat    :INTEGER
  mac_id     :INTEGER
  act_dv_reg :INTEGER
  max_guns   :INTEGER
  exit	     :BOOLEAN
  v_name     :STRING [30]
  tmp_str    :STRING [3]
  
-- From other programs
  g_servog_opt  IN CMOS FROM SWWIZARD  : BOOLEAN
  fanuciR       IN SHADOW FROM SWCUSTO : BOOLEAN
  g_press       IN SHADOW FROM SWCUSTO : BOOLEAN
  g_tipdress    IN CMOS FROM SWWIZARD  : ARRAY[5,2] OF BOOLEAN
  g_ped_gun     IN CMOS FROM SWWIZARD  : ARRAY[5,2] OF BOOLEAN 
  tp_MTR        IN CMOS FROM SWCUSTO   : INTEGER
  sgunchng      IN CMOS FROM SWCUSTO   : BOOLEAN
  iRtype        IN SHADOW FROM SWCUSTO : INTEGER
  update_tps    IN SHADOW FROM SWCUSTO : BOOLEAN

-- GM RS4 routines
ROUTINE define_macro(p_mac_num:  INTEGER; p_mac_name: STRING;
                     p_mac_prog: STRING; p_asg_type: INTEGER;
                     p_asg_id:   INTEGER; p_sys_mac: INTEGER) FROM SWUTILS

%INCLUDE klrdutil

-----------------------------------------------------------------------------
ROUTINE gm_mac_rld
--
-- This Routine re-loads macro's/tp programs for the GM RS4 customization
--
------------------------------------------------------------------------------

VAR
  l_reload	 : INTEGER
  l_status	 : INTEGER
  l_stat         : INTEGER
  l_psve         : INTEGER
  l_dummy        : INTEGER
  SUCCESS        : INTEGER

CONST

  io_flag       = 35   -- Flag (F[ ])
  io_din        =  1   -- Digital input   
  io_dout       =  2   -- Digital output   

BEGIN

IF g_press = FALSE THEN

IF UNINIT(update_tps) THEN
  update_tps = TRUE
ENDIF

 IF UNINIT(iRtype) THEN
     iRtype = 0
   ENDIF

 IF UNINIT (g_servog_opt) THEN
  g_servog_opt = FALSE
 ENDIF

IF UNINIT (sgunchng) THEN
  sgunchng = FALSE
ENDIF

 IF UNINIT (g_press) THEN
  g_press = FALSE
 ENDIF

 IF UNINIT (tp_MTR) THEN
  tp_MTR = 0
 ENDIF
 
 IF UNINIT ($ap_selap[2]) THEN
  $ap_selap[2] = FALSE
 ENDIF

 IF UNINIT ($ap_selap[4]) THEN
  $ap_selap[4] = FALSE
 ENDIF

 IF UNINIT (g_ped_gun[1,1]) THEN
   g_ped_gun[1,1] = FALSE
 ENDIF

  IF UNINIT (g_ped_gun[1,2]) THEN
   g_ped_gun[1,2] = FALSE
 ENDIF

  IF UNINIT (g_ped_gun[2,1]) THEN
   g_ped_gun[2,1] = FALSE
 ENDIF 

 IF UNINIT (g_ped_gun[2,2]) THEN
   g_ped_gun[2,2] = FALSE
 ENDIF 

  -- Must set selected TP program to something other than 1 of the following or
  -- It will NOT load because it is the current program editable on the TP.
  SET_VAR(psve, '*system*', '$TP_DEFPROG', '', gm_status)
  SET_VAR(psve, '*system*', '$SHELL_WORK.$ROUT_NAME', '', gm_status)
  SPRUNCMD ('frclrpr', gm_status)
 
IF $ap_selap[2] = TRUE THEN
 CLEAR('sweqoutf',gm_status)
 LOAD('FRS:gmeqoutf.pc',0,gm_status)
 -- GM Weld I/O Menu
 CLEAR('swweldio', status)
 LOAD('FRS:gmweldio.pc',0,gm_status) 
 LOAD('FRS:TIP_RST.TP',1,gm_status)
ENDIF 

  IF $spoteqsetup[1].$studwelder = TRUE OR $spoteqsetup[2].$studwelder = TRUE THEN
    $SPOTWELDIO[1].$wld_comp_to = 4000 
    $SPOTWELDIO[1].$wld_inpr_to = 15000
    $SPOTWELDIO[2].$wld_comp_to = 4000 
    $SPOTWELDIO[2].$wld_inpr_to = 15000
  ENDIF

--Check Servo Gun To load a bunch of stuff
  GET_VAR(l_psve,'*system*','$sgcfg[1].$EQUIP_TYPE', l_dummy, l_status)
  IF l_status = 0 THEN
   SPRUNCMD ('COPY FRS:WR_UPDGM.TP FR:WR_UPDAT.TP', gm_status) 
   LOAD('FR:WR_UPDAT.TP',1,gm_status)
   LOAD('FRS:TW_UPDT.TP',1,gm_status)
   LOAD('FRS:OPNSGUN1.TP',1,gm_status)
   LOAD('FRS:OPNSGUN2.TP',1,gm_status)
   LOAD('FRS:OPNSGUN3.TP',1,gm_status)
   LOAD('FRS:OPNSGUN4.TP',1,gm_status)
   LOAD('FRS:TIP_RST.TP',1,gm_status)
   SET_VAR(psve, '*system*', '$CPCFG.$EXTRA_INT[19]', 13, gm_status)
  ENDIF

-- TipDress Stuff
-- Ped 1 
IF update_tps = TRUE THEN   -- TRUE MEANS OPEL WANTS THEM     
   IF g_ped_gun[1,1] = TRUE THEN
     SPRUNCMD ('COPY FRS:PEDGTDG1.TP FR:PED_TDG1.TP', l_stat) 
     LOAD('FR:PED_TDG1.TP',1,gm_status)
     SPRUNCMD ('COPY FRS:TDGP1CK.TP FR:TD_P1_CK.TP', l_stat)
     LOAD('FR:TD_P1_CK.TP',1,gm_status)  
     define_macro(1, 'TD_P1_CK' ,  'TD_P1_CK', 1, 0,0)
     SPRUNCMD ('COPY FRS:ADVGTDG1.TP FR:ADV_TDG1.TP', l_stat) 
     LOAD('FR:ADV_TDG1.TP',1,gm_status)    -- advance gun piv
     SET_PORT_CMT(IO_DIN,333,'diG1TDDumpPin',gm_status)
   ENDIF
   
-- Ped 2      
   IF g_ped_gun[1,2] = TRUE THEN
     SPRUNCMD ('COPY FRS:PEDGTDG2.TP FR:PED_TDG2.TP', l_stat) 
     LOAD('FR:PED_TDG2.TP',1,gm_status)
     SPRUNCMD ('COPY FRS:TDGP2CK.TP FR:TD_P2_CK.TP', l_stat)
     LOAD('FR:TD_P2_CK.TP',1,gm_status) 
     define_macro(2, 'TD_P2_CK' ,  'TD_P2_CK', 1, 0,0)
     SPRUNCMD ('COPY FRS:ADVGTDG2.TP FR:ADV_TDG2.TP', l_stat) 
     LOAD('FR:ADV_TDG2.TP',1,gm_status)    -- advance gun piv
     SET_PORT_CMT(IO_DIN,357,'diG2TDDumpPin',gm_status)
   ENDIF
   
-- Ped 3      
   IF g_ped_gun[2,1] = TRUE THEN
     SPRUNCMD ('COPY FRS:PEDGTDG3.TP FR:PED_TDG3.TP', l_stat) 
     LOAD('FR:PED_TDG3.TP',1,gm_status)
     SPRUNCMD ('COPY FRS:TDGP3CK.TP FR:TD_P3_CK.TP', l_stat)
     LOAD('FR:TD_P3_CK.TP',1,gm_status) 
     define_macro(3, 'TD_P3_CK' ,  'TD_P3_CK', 1, 0,0)
     SPRUNCMD ('COPY FRS:ADVGTDG3.TP FR:ADV_TDG3.TP', l_stat) 
     LOAD('FR:ADV_TDG3.TP',1,gm_status)    -- advance gun piv
     SET_PORT_CMT(IO_DIN,379,'diG3TDDumpPin',gm_status)
   ENDIF
   
-- Ped 4      
   IF g_ped_gun[2,2] = TRUE THEN
     SPRUNCMD ('COPY FRS:PEDGTDG4.TP FR:PED_TDG4.TP', l_stat) 
     LOAD('FR:PED_TDG4.TP',1,gm_status)
     SPRUNCMD ('COPY FRS:TDGP4CK.TP FR:TD_P4_CK.TP', l_stat)
     LOAD('FR:TD_P4_CK.TP',1,gm_status) 
     define_macro(4, 'TD_P4_CK' ,  'TD_P4_CK', 1, 0,0)
     SPRUNCMD ('COPY FRS:ADVGTDG4.TP FR:ADV_TDG4.TP', l_stat) 
     LOAD('FR:ADV_TDG4.TP',1,gm_status)    -- advance gun piv
     SET_PORT_CMT(IO_DIN,403,'diG4TDDumpPin',gm_status)
   ENDIF
ENDIF
           
-- Mass priority Fix
$CHG_PRI[1].$TASK_ID=68
$CHG_PRI[1].$PRIORITY=150

-- iRVision PC Files
IF UNINIT(fanuciR) THEN
   fanuciR = FALSE
ENDIF

IF (fanuciR = TRUE) AND (g_press = TRUE) THEN
   LOAD('FRS:IRUNFIND.PC',1,l_stat)
   LOAD('FRS:IROFFSET.PC',1,l_stat)
ENDIF

-- Register Stuff
SET_REG_CMT(35, 'RUN_FIND STATUS', gm_status)
SET_REG_CMT(43, 'OFFSET CODE', gm_status)
SET_REG_CMT(100, 'STYLE NUMBER', gm_status)
SET_PORT_CMT(IO_FLAG,6,'Vision Complete', gm_status)
SET_REG_CMT(110,  'PICK X ROT VALUE', gm_status)
SET_REG_CMT(111,  'PICK Y ROT VALUE', gm_status)
SET_REG_CMT(112,  'PICK LIFT X ROT', gm_status)
SET_REG_CMT(113,  'PICK LIFT Y ROT', gm_status)
SET_REG_CMT(148, 'BYPASS SIDE1', gm_status) 
SET_REG_CMT(149, 'BYPASS SIDE2', gm_status) 
SET_REG_CMT(151, 'Reserved', gm_status) 
SET_REG_CMT(159, 'REQ EARLY FLAG', gm_status) 
SET_REG_CMT(160, 'TL PLT FND OPTN', gm_status)
 
IF UNINIT(tp_MTR) THEN
  tp_MTR = 2
ENDIF

IF tp_MTR = 2 THEN
 SET_INT_REG(63,  3, gm_status)
 SET_INT_REG(79,   3, gm_status)
 SET_INT_REG(173, 3, gm_status)
 SET_INT_REG(188, 3, gm_status)
 SET_INT_REG(73,  10000, gm_status)
 SET_INT_REG(89,  10000, gm_status)
 SET_INT_REG(183, 10000, gm_status)
 SET_INT_REG(198, 10000, gm_status)
ENDIF
  
SET_PREG_CMT(10, '3DL Offset', gm_status)
SET_PREG_CMT(11, '2D Offset', gm_status)
SET_PREG_CMT(12, 'Null Offset', gm_status)
SET_PREG_CMT(13, 'iRVis RESERVED', gm_status)
SET_PREG_CMT(14, 'iRVis RESERVED', gm_status)
SET_PREG_CMT(15, 'iRVis RESERVED', gm_status)
SET_PREG_CMT(16, 'iRVis RESERVED', gm_status)
SET_PREG_CMT(17, 'iRVis RESERVED', gm_status)
SET_PREG_CMT(18, 'iRVis RESERVED', gm_status)
SET_PREG_CMT(19, 'iRVis RESERVED', gm_status)

$UALRM_MSG[51] = 'Part Count Fault'
$UALRM_SEV[51] = 6  --Pause
$UALRM_MSG[52] = 'Find Count Fault'
$UALRM_SEV[52] = 6  --Pause
$UALRM_MSG[53] = '2D Fault'
$UALRM_SEV[53] = 6  --Pause
$UALRM_MSG[54] = '3D Fault'
$UALRM_SEV[54] = 6  --Pause
$UALRM_MSG[55] = 'Part Present Fault'
$UALRM_SEV[55] = 6  --Pause
$UALRM_MSG[56] = 'X Out Fault'
$UALRM_SEV[56] = 6  --Pause
$UALRM_MSG[57] = 'Y Out Fault'
$UALRM_SEV[57] = 6  --Pause
$UALRM_MSG[58] = 'Z Out Fault'
$UALRM_SEV[58] = 6  --Pause
$UALRM_MSG[59] = 'W Out Fault'
$UALRM_SEV[59] = 6  --Pause
$UALRM_MSG[60] = 'P Out Fault'
$UALRM_SEV[60] = 6  --Pause
$UALRM_MSG[61] = 'R Out Fault'
$UALRM_SEV[61] = 6  --Pause
$UALRM_MSG[62] = 'iRVis Reserved'
$UALRM_SEV[62] = 6  --Pause
$UALRM_MSG[63] = 'iRVis Reserved'
$UALRM_SEV[63] = 6  --Pause
$UALRM_MSG[64] = 'iRVis Reserved'
$UALRM_SEV[64] = 6  --Pause
$UALRM_MSG[65] = 'iRVis Reserved'
$UALRM_SEV[65] = 6  --Pause
$UALRM_MSG[66] = 'iRVis Reserved'
$UALRM_SEV[66] = 6  --Pause
$UALRM_MSG[67] = 'iRVis Reserved'
$UALRM_SEV[67] = 6  --Pause
$UALRM_MSG[68] = 'iRVis Reserved'
$UALRM_SEV[68] = 6  --Pause
$UALRM_MSG[69] = 'iRVis Reserved'
$UALRM_SEV[69] = 6  --Pause

-- Template Loading
  LOAD('FRS:TEMPLA01.TP',1,gm_status) -- Must relaod standard macro
  LOAD('FRS:TEMPLA02.TP',1,gm_status) -- Must relaod standard macro
  LOAD('FRS:TEMPLA03.TP',1,gm_status) -- Must relaod standard macro
  LOAD('FRS:TEMPLA04.TP',1,gm_status) -- Must relaod standard macro

  prog_nam = 'atpounce'
  $MACROTABLE[71].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:ATPOUNCE.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[71].$SYS_LEV_MSK = 3
  define_macro(71,  'AT POUNCE' ,   'ATPOUNCE', 1, 0,3)
        
  prog_nam = 'entr1zon'
  $MACROTABLE[94].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status) 
  LOAD('FRS:ENTR1ZON.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[94].$SYS_LEV_MSK = 3
  define_macro(94,  'ENTER I-ZONE' ,   'ENTR1ZON', 1, 0,3)
        
  prog_nam = 'exit1zon'
  $MACROTABLE[95].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:EXIT1ZON.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[95].$SYS_LEV_MSK = 3
  define_macro(95,  'EXIT I-ZONE' ,   'EXIT1ZON', 1, 0,3)

  prog_nam = 'home_io'
  $MACROTABLE[10].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:HOME_IO.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[10].$SYS_LEV_MSK = 3
  define_macro(10,  'HOME I/O' ,   'HOME_IO', 1, 0,3)
 
-- New MH Macros with Motion
IF ($ap_selap[4] = TRUE) AND (g_press = FALSE) THEN -- Load MH
  LOAD('FRS:CLS_VLE1.TP',1,gm_status)
  LOAD('FRS:CLS_VLE2.TP',1,gm_status)
  LOAD('FRS:CLS_VLE3.TP',1,gm_status)
  LOAD('FRS:CLS_VLE4.TP',1,gm_status)
  LOAD('FRS:CLS_VLE5.TP',1,gm_status) 
  LOAD('FRS:OPN_VLE1.TP',1,gm_status)
  LOAD('FRS:OPN_VLE2.TP',1,gm_status)
  LOAD('FRS:OPN_VLE3.TP',1,gm_status)
  LOAD('FRS:OPN_VLE4.TP',1,gm_status)
  LOAD('FRS:OPN_VLE5.TP',1,gm_status)
  LOAD('FRS:CLS_VLE6.TP',1,gm_status)
  LOAD('FRS:CLS_VLE7.TP',1,gm_status)
  LOAD('FRS:CLS_VLE8.TP',1,gm_status)
  LOAD('FRS:CLS_VLE9.TP',1,gm_status)
  LOAD('FRS:CLS_VL10.TP',1,gm_status)
  LOAD('FRS:OPN_VLE6.TP',1,gm_status)
  LOAD('FRS:OPN_VLE7.TP',1,gm_status)
  LOAD('FRS:OPN_VLE8.TP',1,gm_status)
  LOAD('FRS:OPN_VLE9.TP',1,gm_status)
  LOAD('FRS:OPN_VL10.TP',1,gm_status)  
  LOAD('FRS:VAC_ON1.TP',1,gm_status)
  LOAD('FRS:VAC_ON2.TP',1,gm_status)
  LOAD('FRS:VAC_OFF1.TP',1,gm_status)
  LOAD('FRS:VAC_OFF2.TP',1,gm_status)
  LOAD('FRS:BLOW_OF1.TP',1,gm_status)
  LOAD('FRS:BLOW_OF2.TP',1,gm_status)
  LOAD('FRS:VAC_ON3.TP',1,gm_status)
  LOAD('FRS:VAC_ON4.TP',1,gm_status)
  LOAD('FRS:VAC_OFF3.TP',1,gm_status)
  LOAD('FRS:VAC_OFF4.TP',1,gm_status)
  LOAD('FRS:BLOW_OF3.TP',1,gm_status)
  LOAD('FRS:BLOW_OF4.TP',1,gm_status)
-- SIX KAREL TP'S
  -- Karel Gripper Custom Files  
  LOAD('FRS:DMSTAT.PC',1,gm_status)

  prog_nam = 'blowoff'
  $MACROTABLE[138].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:BLOWOFF.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[138].$SYS_LEV_MSK = 3

  prog_nam = 'vacuumon'
  $MACROTABLE[136].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:VACUUMON.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[136].$SYS_LEV_MSK = 3

  prog_nam = 'vacuumof'
  $MACROTABLE[137].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:VACUUMOF.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[137].$SYS_LEV_MSK = 3

  prog_nam = 'droppart'
  $MACROTABLE[131].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:DROPPART.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[131].$SYS_LEV_MSK = 3

  prog_nam = 'grippart'
  $MACROTABLE[130].$SYS_LEV_MSK = 0
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 1, prog_nam, gm_status)
  LOAD('FRS:GRIPPART.TP',1,gm_status) -- Must relaod standard macro
  SET_ATTR_PRG(prog_nam, AT_PROTECT, 2, prog_nam, gm_status)
  $MACROTABLE[130].$SYS_LEV_MSK = 3
ENDIF
  
-- TOGGLE WET DRY HIDE
  SPRUNCMD ('COPY FRS:gmsplus.as FRSU:splus.as',gm_status)  

ENDIF

END gm_mac_rld
------------------------------------------------------------------------------

BEGIN 

gm_mac_rld

END gmupdt1
