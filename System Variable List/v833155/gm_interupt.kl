-- -----------------------------------------------------------------------
--
--   MODULE:         GM_INTERUPT.KL
--   TITLE:          INTERUPT PROGRAM
--
--
--   WRITTEN BY:     GM
--   REVISION DATE:  2018/03/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: GM Global 4 Laser Interrupt
--                      
--                      
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--              
--
--
--
--
--------------------------------------------------------------------------
PROGRAM interupt
 
%PRIORITY = 50
%SYSTEM
%ALPHABETIZE
%NOLOCKGROUP
%RWACCESS
%NOBUSYLAMP
%NOPAUSE = ERROR + COMMAND + TPENABLE
%NOABORT = ERROR + COMMAND
%COMMENT = 'Interupt v4.0'
%NOPAUSESHFT

%ENVIRONMENT ioblt --required for iovalrd
%ENVIRONMENT iosetup --required for I/O builtin support
%ENVIRONMENT regope --registers
%ENVIRONMENT errs --err_data

%INCLUDE klevkmsk
%INCLUDE klevkeys
%INCLUDE kliotyps
%INCLUDE KLEVCCDF                -- allows use of 'cc_clear_win' command

TYPE
  Int_t FROM INTERUPT = STRUCTURE
  Enbl	:BOOLEAN
  IO_type	:INTEGER
  typ_txt	:STRING[20] --ARRAY[10] OF INTEGER
  IO_num	:INTEGER --ARRAY[10] OF INTEGER
  Flt_state  :INTEGER --ARRAY[10] OF BOOLEAN
  Curnt_val	:INTEGER	
ENDSTRUCTURE

CONST
  WLD_CH = 1
  MNU_CH = 2
  ARC_CH = 3

  %INCLUDE gmacnstn --GM ArcTool constants
 
VAR
  status,entry,success,i,ans IN SHADOW FROM INTERUPT	: INTEGER    -- returns status of attempted operation
  typ,indx,state,i_read,i_val,gm_status IN SHADOW FROM INTERUPT	:INTEGER
  proc_on_i IN SHADOW FROM INTERUPT	:INTEGER
  lasr_wldn_i,cc_warn,reweld_posbl,ffr_plc IN SHADOW FROM INTERUPT	:INTEGER
  i_enbl,HFO,Remote,rmt_trip,perch IN SHADOW FROM INTERUPT	:BOOLEAN
  Mon_set IN SHADOW FROM INTERUPT	:ARRAY[20] OF Int_t
  txt,txt_i,txt_state,io_cmt IN SHADOW FROM INTERUPT	:STRING[40]
  las_flt	:INTEGER
  c_prg	:STRING[20]
  r_flg,r_flg2	:BOOLEAN
  ri_val,ri_val2,dbg	:INTEGER
  r_val,r_val2	:REAL
  err_code,caus_code,tim_i,sev	:INTEGER
  err_str,caus_str,prg_nam	:STRING[50]
  --wizans,wizans2	IN SHADOW FROM INTERUPT	:STRING[64]

  do_athome_i  IN SHADOW FROM GMCUSTO: INTEGER
  do_prccom_i   IN SHADOW FROM GMVARS: INTEGER  --P: Process Task Okay

  laser_ctrl   IN SHADOW FROM GMCFGLAS: INTEGER   --laser controller

  do_progrun IN SHADOW FROM INTERUPT: INTEGER

  --Custoyn prompt register (not same var as in custoyn)
  prmpt_reg    IN SHADOW FROM INTERUPT: INTEGER

  --Trumpf controller
  do_tmpfreqls IN SHADOW FROM INTERUPT: INTEGER -- Interrupt REQUEST_LASER
  do_tmpfstdyn IN SHADOW FROM INTERUPT: INTEGER  -- Interrupt PSTART_DYN
  do_tmpfstat IN SHADOW FROM INTERUPT: INTEGER   -- Interrupt PSTART_STATITCAL
  do_tmpflstnd IN SHADOW FROM INTERUPT: INTEGER   -- Interrupt LASER_STANDBY
  do_tmpflsron IN SHADOW FROM INTERUPT: INTEGER  -- Interrupt LASER_ON
  do_tmpfoppan IN SHADOW FROM INTERUPT: INTEGER    -- Interrupt LOCK_OPERATING PANEL
  do_tmpfexact IN SHADOW FROM INTERUPT: INTEGER  -- Interrupt EXT_ACTIVATION
  --Laser Line controller
  do_lslnlsrq IN SHADOW FROM INTERUPT: INTEGER  --Interupt LASER REQUEST
  do_lslndypg IN SHADOW FROM INTERUPT: INTEGER  --Interupt DYNAMIC PROGRAM START
  do_lslnstpg IN SHADOW FROM INTERUPT: INTEGER  --Interupt STATIC PROGRAM START
  do_lslnlsrd IN SHADOW FROM INTERUPT: INTEGER  --Interupt LASER READY (STANDBY)
  do_lslnlson IN SHADOW FROM INTERUPT: INTEGER  --Interupt LASER CONTROLLER ON
  do_lslncnlk IN SHADOW FROM INTERUPT: INTEGER  --Interupt CONSOLE LOCKED
  do_lslnexct IN SHADOW FROM INTERUPT: INTEGER  --Interupt EXTERNAL CONTROL

%INCLUDE gmrdutil --GM common routines
ROUTINE ipg_stp FROM INTERUPT
ROUTINE arc_recv FROM INTERUPT
ROUTINE trumpf_stp FROM INTERUPT
ROUTINE lasln_stp FROM INTERUPT
------------------------------------------------------------------------------
ROUTINE usr_trip
-----------------------------------------------------------------------------
BEGIN

  i = 1 
  i_enbl = FALSE
  cc_warn = 0
--	rmt_trip = FALSE --while welding is active monitor all io  
  WHILE (DIN[lasr_wldn_i] = ON AND rmt_trip = False) DO 
    For i = 1 to 20	DO
--		WRITE ('in usr trip',CR) 
-- 	WRITE (i,CR)
      IF UNINIT (Mon_set[i].Enbl) THEN
	Mon_set[i].Enbl = FALSE
      ENDIF
      i_enbl = Mon_set[i].Enbl
      IF (i_enbl = TRUE) THEN
        typ = Mon_set[i].IO_type
	indx = Mon_set[i].IO_num
	state =	Mon_set[i].Flt_state
	-- read the io type and set txt for msg display
	SELECT typ OF
	  CASE(1): Mon_set[i].typ_txt = 'DIN'
	  CASE(2): Mon_set[i].typ_txt = 'DOUT'
	  CASE(11): Mon_set[i].typ_txt = 'SI'
	  CASE(12): Mon_set[i].typ_txt = 'SO'
	  CASE(18): Mon_set[i].typ_txt =	'GIN'
	  CASE(19): Mon_set[i].typ_txt = 'GOUT'
	ELSE :
	ENDSELECT
	--Read	the io point
	i_read = iovalrd(typ, indx, i_val)
	Mon_set[i].Curnt_val = i_val
	IF (i_read = 0) THEN
	  IF (i_val = state) THEN
	    -- convert the index # to text for msg display  
	    CNV_INT_STR(indx,1,0,txt_i)
	    IF (state = 1) THEN
	      txt_state = 'ON'
	    ELSE
	      txt_state = 'OFF'
	    ENDIF
	    GET_PORT_CMT(typ,indx,io_cmt,status)
	    -- ERROR DISP (io-TYPE) (IO-index) (io-comment)(IO FLT STATE)	 
	    txt = (Mon_set[i].typ_txt) + '[' + (txt_i) + ']' + (io_cmt) + ' is ' + (txt_state)
	    I = 20 --this is to stop the for loop
	    -- If it the laser is a remote laser welding system 
	    IF (Remote = TRUE) THEN
	      cc_warn = 1
	      rmt_trip = TRUE
	      --	 DOUT[lasr_wldn_i] = FALSE ipg_stp
	      --GET_VAR(status,'LASERWIZ','WIZFILEANS[9]',wizans,success)
              --IF wizans = 'HighYag RLSK' THEN
		--IF indx = 4 THEN	 --IF robot paused 
		  --DOUT[1091] = OFF
		--ENDIF
		--IF indx = 1029 THEN	--If laser Faulted
		  --DOUT[1092] = OFF
		--ENDIF    	
	      --ENDIF
              SELECT laser_ctrl OF
                CASE(lasctrl_lsln):
                  lasln_stp
                CASE(lasctrl_trmp):
                  trumpf_stp
                --CASE(lasctrl_ipg):  
                  --ipg_stp
                ELSE:
              ENDSELECT
	      POST_ERR(38000, txt, 0, cc_warn)
	      dbg = 1
              --  I = 20 --this is to stop the for loop
	    ENDIF
	    --set for laser braze system
            Set_I_sVar('$awlaser_cfg.$err_flag1',1)
	    rmt_trip = TRUE
	    las_flt = 1 
	    -- DOUT[lasr_wldn_i] = FALSE
	    --Wait for the ARC - 405 error to post
	    POST_ERR(38000, txt, 0, cc_warn)
	    dbg = 2
	    REPEAT
	      ERR_DATA(MAXINT,err_code,err_str,caus_code,caus_str,tim_i,sev,prg_nam)  --TEMP COMMENTED OUT UNTIL GM PROVIDES THE ROUTINE
	      DELAY 1000
	      GET_VAR(status,'*SYSTEM*','$REFPOS1[1].$ATPERCH',perch,success)
	      dbg = 3
	    UNTIL((err_code = 104405) OR (err_code = 38000) OR (HFO = TRUE) OR (perch = TRUE) OR (rmt_trip = FALSE))
	    IF (DOUT[do_athome_i] = ON) THEN
              Set_I_sVar('$awlaser_cfg.$err_flag1',0)
	      rmt_trip = FALSE 
	      dbg = 4
            --ELSE	
              --POST_ERR(38000, txt, 0, cc_warn)
              --las_flt = 1 
              --dbg = 5
	    ENDIF
	  ENDIF
	ENDIF
      ENDIF
    ENDFOR
    DELAY 2
  ENDWHILE
  ENABLE CONDITION[WLD_CH]
		    
------------------------------------------------------------------------------
END usr_trip
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
ROUTINE main
-----------------------------------------------------------------------------

BEGIN

  c_prg = 'CUSTOYN(46,40)'

  -- Enable the condition when plc request weld mode
  IF (DIN[proc_on_i] = TRUE) THEN
    ENABLE CONDITION[WLD_CH]
    ENABLE CONDITION[MNU_CH]
    ENABLE CONDITION[ARC_CH]
  ELSE
    DISABLE CONDITION[WLD_CH]
    DISABLE CONDITION[MNU_CH]
    DISABLE CONDITION[ARC_CH]
  ENDIF

  GET_VAR(status,'*SYSTEM*','$awlaser_cfg.$err_flag1',las_flt,success)
------------------------------------------------------------------------------
END main
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
ROUTINE arc_mon
-----------------------------------------------------------------------------
BEGIN

  REPEAT
    ERR_DATA(MAXINT,err_code,err_str,caus_code,caus_str,tim_i,sev,prg_nam)  --TEMP COMMENTED OUT UNTIL GM PROVIDES THE ROUTINE
    DELAY 500
    GET_VAR(status,'*SYSTEM*','$REFPOS1[1].$ATPERCH',perch,success)
  UNTIL((err_code = 104404) OR (err_code = 104405) OR (err_code = 104406) OR (err_code = 104407) OR (err_code = 104408) OR (perch = TRUE) OR  (HFO = TRUE) OR (rmt_trip = FALSE))	--
  --IF DOUT[3] = ON THEN
  IF (err_code= 104404) THEN
    arc_recv
  ENDIF
  IF (err_code = 104406) THEN
    arc_recv
  ENDIF
  IF (err_code = 104407) THEN
    arc_recv
  ENDIF
  IF (err_code = 104408) THEN
    arc_recv
  ENDIF
  --ELSE
  --CALL_PROG('SUB2',status)		
  --ENDIF

  ENABLE CONDITION[ARC_CH]
------------------------------------------------------------------------------
END arc_mon
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
ROUTINE ipg_stp
-----------------------------------------------------------------------------
BEGIN

  CALL_PROG('POST_PROCESS',status)
  DOUT[1029] = OFF
  DOUT[1031] = OFF
  GOUT[11] = 0
  Delay 100
  DOUT[1031] = ON
  Delay 100
  DOUT[1031] = OFF
  DOUT[1081] = OFF
  DOUT[1032] = OFF
  DOUT[1025] = OFF
------------------------------------------------------------------------------
END ipg_stp
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
ROUTINE trumpf_stp
-----------------------------------------------------------------------------
BEGIN

  CALL_PROG('POST_PROCESS',status)
  	
  DOUT[do_tmpfstdyn] = OFF
  DOUT[do_tmpfstat] = OFF
  DOUT[do_tmpflstnd] = OFF
  DOUT[do_tmpflsron] = OFF
  DOUT[do_tmpfreqls] = OFF
  DOUT[do_tmpfoppan] = OFF
  DOUT[do_tmpfexact] = OFF

------------------------------------------------------------------------------
END trumpf_stp
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
ROUTINE lasln_stp
-----------------------------------------------------------------------------

BEGIN

  DOUT[do_lslndypg] = OFF
  DOUT[do_lslnstpg] = OFF
  DOUT[do_lslnlsrd] = OFF
  DOUT[do_lslnlson] = OFF
  DOUT[do_lslnlsrq] = OFF
  DOUT[do_lslncnlk] = OFF
  DOUT[do_lslnexct] = OFF

------------------------------------------------------------------------------
END lasln_stp
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
ROUTINE recovery
-----------------------------------------------------------------------------
BEGIN

  IF (Remote = False) THEN
    CALL_PROG('SUB1',status)
    IF UNINIT(prmpt_reg) THEN
      prmpt_reg = 40
    ENDIF
    GET_REG(prmpt_reg,r_flg,ri_val,r_val,status)
    IF (ri_val = 1) THEN
      Set_I_sVar('$awlaser_cfg.$err_flag1',0)
      rmt_trip = False
      las_flt = 0
      --GET_VAR(status,'LASERWIZ','WIZFILEANS[9]',wizans,success)
      --IF wizans = 'HighYag RLSK' THEN
        --DOUT[1091] = ON
        --DOUT[1092] = ON
        --DOUT[1097] = ON
      --ENDIF
    ELSE
      Set_I_sVar('$awlaser_cfg.$err_flag1',0)
      DOUT[do_prccom_i] = OFF
      Set_B_sVar('$AWEPOR[1].$ARC_ENABLE',FALSE)
      rmt_trip = False
      las_flt = 0
      --IF wizans = 'HighYag RLSK' THEN
        --DOUT[1091] = ON
	--DOUT[1092] = ON
	--DOUT[1097] = OFF
      --ENDIF
    ENDIF
    --ENABLE CONDITION[MNU_CH]
  ENDIF
  --Added the RLSK reweld possible option to display or not display recovery options.
  IF (Remote = TRUE) THEN
    --IF wizans = 'HighYag RLSK' THEN
      --Delay 500
      --IF (DIN[reweld_posbl] = ON) THEN
        --CALL_PROG('SUB1',status)
        --GET_REG(40,r_flg,ri_val,r_val,status)
        --IF ri_val = 1 THEN
          --SET_VAR(status,'*SYSTEM*','$awlaser_cfg.$err_flag1',0,success)
	  --DOUT[71] = OFF
	  --rmt_trip = False
	  --las_flt = 0
	  --GET_VAR(status,'LASERWIZ','WIZFILEANS[9]',wizans,success)
	  --IF wizans = 'HighYag RLSK' THEN
	    --DOUT[ffr_plc] = ON
	    --DOUT[1091] = ON
	    --DOUT[1092] = ON
	    --DOUT[1097] = ON
	    --GET_REG(1220,r_flg2,ri_val2,r_val2,status)
  	    --SET_REAL_REG(404,ri_val2,status)
	  --ENDIF
        --ELSE
	  --WRITE('Setting Task OK LOW')
	  --SET_VAR(status,'*SYSTEM*','$awlaser_cfg.$err_flag1',0,success)
	  --DOUT[71] = OFF
	  --SET_VAR(status,'*SYSTEM*','$AWEPOR[1].$ARC_ENABLE',FALSE,success)
	  --rmt_trip = False
	  --las_flt = 0
	  --IF wizans = 'HighYag RLSK' THEN
	    --DOUT[1091] = ON
	    --DOUT[1092] = ON
	    --DOUT[1097] = OFF
	    --ENDIF
        --ENDIF
        --ENABLE CONDITION[MNU_CH]	  
      --ELSE
      REPEAT
        FORCE_SPMENU(TP_PANEL, SPI_TPUSER,1)     -- switch to the user screen if not active
        --CLR_STND_SCR(gm_status)
        WRITE (CR,'A weld fault has accured',CR)
        WRITE ('Process Recovery IS NOT'  ,CR)
        WRITE ('Possible. Please Enter "1" '  ,CR)
        WRITE ('to Continue'  ,CR)
        --WRITE ('4 = Precitec'  ,CR)
        WRITE ('Answer (1):') 
        READ (ans)
          IF (ans > 1) THEN
            --CLR_STND_SCR(gm_status)
            WRITE (cr, 'Invalid Entry' ,cr)
            WRITE TPPROMPT (CR, 'Press enter')
            READ TPPROMPT (CR)
          ENDIF
       UNTIL ((ans = 1))

       IF (ans = 1) THEN
         WRITE('Setting Task OK LOW')
         Set_I_sVar('$awlaser_cfg.$err_flag1',0)
         DOUT[do_prccom_i] = OFF
         --SET_VAR(status,'*SYSTEM*','$AWEPOR[1].$ARC_ENABLE',FALSE,success)
         rmt_trip = False
         las_flt = 0
         --IF wizans = 'HighYag RLSK' THEN
           --DOUT[1091] = ON
	   --DOUT[1092] = ON
	   --DOUT[1097] = OFF
         --ENDIF
       ENDIF --ans is 1
     --ENDIF --if reweld possible
    --ENDIF --if rlsk
  ENDIF  --if remote
  ENABLE CONDITION[MNU_CH]
------------------------------------------------------------------------------
END recovery
-----------------------------------------------------------------------------
------------------------------------------------------------------------------
ROUTINE arc_recv
-----------------------------------------------------------------------------
BEGIN

  CALL_PROG('SUB1',status)
  IF UNINIT(prmpt_reg) THEN
    prmpt_reg = 40
  ENDIF
  GET_REG(prmpt_reg,r_flg,ri_val,r_val,status)
  IF (ri_val = 1) THEN
    Set_I_sVar('$awlaser_cfg.$err_flag1',0)
    rmt_trip = False
  ELSE
    Set_I_sVar('$awlaser_cfg.$err_flag1',0)
    DOUT[do_prccom_i] = OFF
    Set_B_sVAr('$AWEPOR[1].$ARC_ENABLE',FALSE)
    rmt_trip = False
  ENDIF
  ENABLE CONDITION[ARC_CH]
------------------------------------------------------------------------------
END arc_recv
-----------------------------------------------------------------------------
BEGIN		  

  HFO = FALSE
  rmt_trip = FALSE

  CONDITION[WLD_CH]: -- $SCAN_TIME = 40
    WHEN DIN[lasr_wldn_i]+ DO
      usr_trip
  ENDCONDITION

  CONDITION[MNU_CH]: -- $SCAN_TIME = 40
   WHEN las_flt = 1 DO
     recovery
   ENDCONDITION

  IF UNINIT(do_progrun) THEN
    do_progrun = 3
  ENDIF
  CONDITION[ARC_CH]: -- $SCAN_TIME = 40
    WHEN DOUT[do_progrun]+ DO
      arc_mon
  ENDCONDITION

  REPEAT
    main
    DELAY 500
  UNTIL ((HFO = TRUE))

END interupt