-- -----------------------------------------------------------------------
--
--   MODULE:         GMFDSVR.KL
--   TITLE:          GMFDSVR PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Dispense Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--         2016/10/27 marchaka Add gmwizlog logging functionality
--              4.1   2017/02/04 marchaka         Modify prompt logic for wizard rerun
--
--
--
--------------------------------------------------------------------------
PROGRAM GMFDSVR

%COMMENT = 'GM FDS V4.1'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%ENVIRONMENT swgdef
%ENVIRONMENT sgdef1
%ENVIRONMENT sysdef

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
%INCLUDE klevkeys  -- TP and cRT key codes
%INCLUDE gmevrlng

%INCLUDE gm_var    --GM variables
%INCLUDE gmcfgfds  -- GM wizard variables for FDS Applications
%INCLUDE gmcfgbdy  -- GM wizard variables for body shop applications
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

CONST
Version = '2017-02-05'
%INCLUDE gmcnstnt  -- Constant file for GM

VAR

  g_x:  INTEGER
  gm_status: INTEGER

  errtbl_setup IN SHADOW FROM SWSHELL  : BOOLEAN
  finished     IN CMOS FROM SLERINIT   : BOOLEAN  -- Tells if initialization of error table done
  last_done    IN CMOS FROM SLERINIT   : INTEGER 
  count        IN DRAM FROM SLERINIT   : INTEGER 
  last_good    IN DRAM FROM SLERINIT   : INTEGER 

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  FDSVR_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup FDS var at least first time

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE klrdutil
%INCLUDE gmrdutil --GM common routines

ROUTINE mh_app_wiz   FROM GMWIZMH  -- the MH questions
ROUTINE tlc_app_wiz  FROM GMWIZTLC -- the Tool Changer questions


-----------------------------------------------------------------------------
ROUTINE initFDSVARS
-- PURPOSE: to initialize application Variable associated with application setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--	gmmain1.kl
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(FDSVR_Setup) THEN
    FDSVR_Setup = FALSE
  ENDIF

END initFDSVARS


-----------------------------------------------------------------------------
ROUTINE fds_var
-- PURPOSE: set application variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN
 
  Set_B_sVar('$ap_selap[2]',TRUE)  --turn spot application on

  -- Stop BG Logic programs before changing vars
  Set_I_sVar('$MIX_BG[7].$STATUS',1)  
  Set_I_sVar('$MIX_BG[8].$STATUS',1)  
  Set_S_sVar('$MIX_BG[7].$PROG_NAME', '')
  Set_S_sVar('$MIX_BG[8].$PROG_NAME', '')

  -- Set Mixed Logic or BG Logic Program
  Set_S_sVar('$MIX_BG[7].$PROG_NAME', 'SCWBGPRG')
  Set_I_sVar('$MIX_BG[7].$MODE',2) 
  Set_I_sVar('$MIX_BG[7].$STATUS',2)  
  Set_S_sVar('$MIX_BG[8].$PROG_NAME', '')
  Set_I_sVar('$MIX_BG[7].$MODE',2) 
  Set_I_sVar('$MIX_BG[7].$STATUS',1)  

  Set_I_sVar('$MIX_BG[7].$STATUS',2)  

END fds_var


-----------------------------------------------------------------------------
ROUTINE fds_errtbl
-- PURPOSE: set error table for application application
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

--  IF (ARRAY_LEN($error_table) > 201) then
--    IF UNINIT($ERROR_TABLE[10]) THEN   
--      IF UNINIT($ERROR_TABLE[200]) THEN
--        -- RE-init error table setup
--        errtbl_setup = FALSE
--        finished = FALSE
--        last_done = 0
--        count  = 0
--        last_good = 0
--      ENDIF
--    ENDIF
--  ENDIF

END fds_errtbl

-----------------------------------------------------------------------------
ROUTINE set_fds_var
-- PURPOSE: Sets application variable settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF (numfdsctrl <> 0) THEN --FDS app

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsVarbls) THEN
    ErrsInShop.ErrorsVarbls = 0
  ENDIF
  IF UNINIT(FDSVR_Setup) OR (Reset_Cell) THEN
    FDSVR_Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsVarbls -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('Starting the FDS Variables GMFDSVR', FALSE)

  IF (FDSVR_Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  FDS Variables Already Setup', FALSE)
    IF ExecSetupAgn('FDS Vars') THEN -- ask user if they want to setup again
      FDSVR_Setup = FALSE
    ELSE
      WriteLog('  FDS Variables already Complete', FALSE)
      WriteLog('GMFDSVR Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  initFDSVARS
  fds_var
  fds_errtbl

  ErrsInShop.ErrorsVarbls =  ErrsInShop.ErrorsVarbls + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsVarbls -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('FDS Variable Setup GMFDSVR had ' + int2str((ErrsInShop.ErrorsVarbls- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('FDS Variable Setup completed', FALSE)
    FDSVR_Setup = TRUE
  ENDIF

  WriteLog('', FALSE)

ENDIF

END set_fds_var

-----------------------------------------------------------------------------
BEGIN

  set_fds_var

END GMFDSVR
