-------------------------------------------------------------------------
--
--   MODULE:         GMSPRRG.KL
--   TITLE:          GMSPRRG PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Application Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Register file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--         2016/10/27 marchaka Add gmwizlog logging functionality
--             V4.1   2017/02/05 marchaka         Modify prompt logic for wizard rerun
--             V4.2   2018/09/25 schoensm         V833P06 update comment R448
--
--------------------------------------------------------------------------
PROGRAM GMSPRRG

%COMMENT = 'GM SPR V4.2'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE gmcfgspr  -- has GM SPR variables for configuration
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
%INCLUDE kliotyps

CONST
Version = '2018-09-25'

VAR
 gm_status: INTEGER

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  SPRRG_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup SPR reg at least first time

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE gmrdutil --GM common routines


-----------------------------------------------------------------------------
ROUTINE initSPRREGS
-- PURPOSE: to initialize application Programs associated with application setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(SPRRG_Setup) THEN
    SPRRG_Setup = FALSE
  ENDIF

END initSPRREGS

-----------------------------------------------------------------------------
ROUTINE spr_reg
-- PURPOSE: setup SPR registers
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN


  Comment_Reg(1,254,'Faulted SPR ID')

  Comment_Reg(1,402,   'Continue Last')
  Comment_Reg(1,403,   'Continue Next')

  Comment_Reg(1,437,   'SPR ID Work')
  Comment_Reg(1,438,   'MaxNumRivets')
  Comment_Reg(1,439,   'SPR ID Count')
  Comment_Reg(1,440,   'SPRIDWorkCount')
  Comment_Reg(1,441,   'SPR Auto Retry')
  Comment_Reg(1,448,   'SPR Process 1/2')  --V833P06

  --Set FLAGS
--  SET_PORT_CMT(IO_FLAG,1008,'Auto Skip Flag',gm_status)  
  SET_PORT_CMT(IO_FLAG,85,'FDS_SpindleAdv',gm_status)
  SET_PORT_CMT(IO_FLAG,81,'Retry Flag',gm_status)
  SET_PORT_CMT(IO_FLAG,82,'SPR Skip',gm_status)
  SET_PORT_CMT(IO_FLAG,83,'SPR ID Check',gm_status)
  SET_PORT_CMT(IO_FLAG,84,'Continue Next Flag',gm_status)

  --Set String Register
  Comment_Reg(3,4,'Faulted SPR ID')
  Comment_Reg(3,5,'Current SPR ID')
  Comment_Reg(3,6,'Last SPR ID')
  Comment_Reg(3,7,'SPRID1')
  Comment_Reg(3,8,'SPRID2')
  Comment_Reg(3,9,'SPRID3')
  Comment_Reg(3,10,'SPRID4')
  Comment_Reg(3,11,'SPRID5')
  Comment_Reg(3,12,'SPRID6')
  Comment_Reg(3,13,'SPRID7')
  Comment_Reg(3,14,'SPRID8')
  Comment_Reg(3,15,'SPRID9')
  Comment_Reg(3,16,'SPRID10')
  Comment_Reg(3,17,'SPRID11')
  Comment_Reg(3,18,'SPRID12')
  Comment_Reg(3,19,'SPRID13')
  Comment_Reg(3,20,'SPRID14')
  Comment_Reg(3,21,'SPRID15')
  Comment_Reg(3,22,'SPRID16')
  Comment_Reg(3,23,'SPRID17')
  Comment_Reg(3,24,'SPRID18')
  Comment_Reg(3,25,'SPRID19')
  Comment_Reg(3,26,'SPRID20')
  Comment_Reg(3,27,'SPRID21')
  Comment_Reg(3,28,'SPRID22')
  Comment_Reg(3,29,'SPRID23')
  Comment_Reg(3,30,'SPRID24')
  Comment_Reg(3,31,'SPRID25')
  Comment_Reg(3,32,'SPRID26')
  Comment_Reg(3,33,'SPRID27')
  Comment_Reg(3,34,'SPRID28')
  Comment_Reg(3,35,'SPRID29')
  Comment_Reg(3,36,'SPRID30')
  Comment_Reg(3,37,'SPRID31')
  Comment_Reg(3,38,'SPRID32')
  Comment_Reg(3,39,'SPRID33')
  Comment_Reg(3,40,'SPRID34')
  Comment_Reg(3,41,'SPRID35')
  Comment_Reg(3,42,'SPRID36')
  Comment_Reg(3,43,'SPRID37')
  Comment_Reg(3,44,'SPRID38')
  Comment_Reg(3,45,'SPRID39')
  Comment_Reg(3,46,'SPRID40')


END spr_reg
-----------------------------------------------------------------------------
ROUTINE set_spr_reg
-- PURPOSE: setup registers for SPR application
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF (numsprctrl <> 0) THEN --SPR App

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsRgstrs) THEN
    ErrsInShop.ErrorsRgstrs = 0
  ENDIF
  IF UNINIT(SPRRG_Setup) OR (Reset_Cell) THEN
    SPRRG_Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsRgstrs -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('  Starting the SPR Program GMSPRRG', FALSE)

  IF (SPRRG_Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  SPR Registers Already Setup', FALSE)
    IF ExecSetupAgn('SPR REGS') THEN -- ask user if they want to setup again
      SPRRG_Setup = FALSE
    ELSE
      WriteLog('  SPR Registers already Complete', FALSE)
      WriteLog('  GMSPRRG Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  initSPRREGS
  spr_reg

  ErrsInShop.ErrorsRgstrs =  ErrsInShop.ErrorsRgstrs + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsRgstrs -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('  SPR Program Setup GMSPRRG had ' + int2str((ErrsInShop.ErrorsRgstrs- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('  SPR Register Setup completed', FALSE)
    SPRRG_Setup = TRUE
  ENDIF

  WriteLog('', FALSE)

ENDIF

END set_spr_reg


-----------------------------------------------------------------------------


--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************
BEGIN

set_spr_reg

END GMSPRRG





