--
--    This material is the joint property of Fanuc America Corporation  and
--    FANUC  LTD  Japan,and  must  be  returned  to  either Fanuc America
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of FANUC.
--
--             All Rights Reserved
--             Copyright (C)   1992
--             Fanuc America Corporation
--             FANUC LTD Japan
--
--             Karel is a registered trademark of
--             Fanuc America Corporation
--    +
--    Program:  gmwizmis
--
--    Description:
--
--      GM wizard miscellaneous tools wizard program
-------------------------------------------------------------------------------------------------------------
--    SETUP ROUTINES INCLUDED
-------------------------------------------------------------------------------------------------------------
--
--    Language: KAREL
--
--    Source File: swwizard.kls    01-JUN-99   03:33PM
--
--    Author: Fanuc America Corporation
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--
--           2018/09/04   marchaka Miscellaneous tools program created
--           2018/09/24   marchaka Added routine calls for servo gun setup
--           2018/09/18   schoensm, added stand-alone configurations and setup V8.33P06
--           2018/11/02   marchaka Modified flow of servo gun change setup to not return to the main menu
--                                 if the user was in one of the gun change setup menus.
--           2019/08/25   marchaka Add body chassis marriage standalone
--           2020/10/30   schoensm Enabled Stand-Alone item 1 Laser Grind during v8.33p10
--
-------------------------------------------------------------------------------------------------------------
PROGRAM gmwizmis
-------------------------------------------------------------------------------------------------------------
-- Softpart built-ins

%COMMENT = 'GM Wiz Misc V4.2'

%ALPHABETIZE

%STACKSIZE = 5000

%NOLOCKGROUP
%INVISIBLE
%RWACCESS

%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE klevkmsk
%INCLUDE kltpctrl
%INCLUDE klevkeys
%INCLUDE kliotyps
%INCLUDE swdcshui
%INCLUDE klevutil
%INCLUDE gmevrlng  --Required forthe constants for GM Language constants
%INCLUDE KLEVCCDF  -- Required for TPERROR instruction
-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops

CONST
Revision = '2020-10-30'

%INCLUDE gmcnstnt  -- Constant file for GM
%INCLUDE gmcfgerr --GM wizard status variables

VAR
  gm_status: INTEGER
  ans: INTEGER
  config_comp   IN CMOS   FROM GMWIZARD : BOOLEAN    --used to allow robot configuration that happens during cold start and outside of gmwizard  
  pwrs_extinlk  IN SHADOW FROM GMVARS   : BOOLEAN
  stndalncfg    IN SHADOW FROM GMCFGBDY : INTEGER 
  wld1_app      IN SHADOW FROM GMCFGSPT: INTEGER                  --One weld controller application
  UseToolChngr IN SHADOW FROM gmcfgtlc : BOOLEAN -- If Tool Changer on Tool
  sgunchng     IN SHADOW FROM GMCUSTO  : BOOLEAN   -- Servo gun tool changer option loaded


%INCLUDE klrdutil
%INCLUDE gmrdutil --GM common routines

ROUTINE dcs_extinlk  FROM gmsafeio --External I/O Interlock Relay DCS settings
ROUTINE set_lsrgrind FROM gmlsrgnd --Laser grind setup
ROUTINE set_lsrclean FROM gmlsrcln --Laser clean setup
ROUTINE set_lsrdebur FROM gmlsrdbr --Laser debur setup
ROUTINE set_srvbrsh  FROM gmsrvbrs --Fanuc servo brush setup
ROUTINE set_sptplsm  FROM gmsptplsm --Spot plasma setup
ROUTINE set_bcm      FROM gmbdchmr --Body chassis marriage setup
ROUTINE set_seekfnd  FROM gmaddprg --Seek and find program load
ROUTINE set_qckcls   FROM gmaddprg --Quick close program load
ROUTINE set_reg      FROM gmcellrg --Common Stand-Alone Setup
ROUTINE set_cell_io  FROM gmcellio --Common Stand-Alone Setup
ROUTINE set_cellvar  FROM gmcellvr --Common Stand-Alone Setup
ROUTINE set_cellpg   FROM gmcellpg --Common Stand-Alone Setup
ROUTINE bodyshop_reg FROM gmbodyrg --sets bodyshop registers
ROUTINE repwr_msg    FROM gmwizard --Common Stand-Alone Setup
ROUTINE load_pmc     FROM gmpmc    --Load PMC
ROUTINE set_swgmtr FROM gmwizspt2 --servo gun motor
ROUTINE set_guntc FROM gmwizspt2 --gun and tip dresser
-----------------------------------------------------------------------------
ROUTINE set_sa_ctrl
-- PURPOSE: Configure the stand-alones as a bodyshop robot.
--Set Stand Alone Controller
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR 
  prog_index:  INTEGER

BEGIN

  --set all to body shop
  mfg_area = mfg_area_bs  

  do_kcl_Cmnd('CHDIR FRS:\') --reset FRS to root directory
  do_kcl_Cmnd('CHDIR FR:\')  --reset FR to root directory

  IF (Chk_loaded('gmpmc')) THEN
    load_pmc                                             --load pmc
  ELSE
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
  ENDIF

  IF NOT (CallThisProg('gmsafeio')) THEN
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
  ENDIF

  IF (Chk_loaded('gmcellrg')) THEN
    set_reg						 --sets registers
  ELSE
    ErrsInCell.ErrorsRgstrs = ErrsInCell.ErrorsRgstrs+1
  ENDIF

  IF (Chk_loaded('gmcellio')) THEN
    set_cell_io					         --sets cell I/O and flags
  ELSE
    ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom+1
  ENDIF

  IF (Chk_loaded('gmcellvr')) THEN
    set_cellvar					         --sets cell variables
  ELSE
    ErrsInCell.ErrorsVarbls = ErrsInCell.ErrorsVarbls+1
  ENDIF

  IF (Chk_loaded('gmcellpg')) THEN
    set_cellpg
  ELSE
    ErrsInCell.ErrorsPrgrms = ErrsInCell.ErrorsPrgrms+1
  ENDIF

  IF (Chk_loaded('gmbodyrg')) THEN
    bodyshop_reg                                         --call routine that calls all body shop setup routines
  ELSE
    ErrsInShop.ErrorsPrgrms = ErrsInShop.ErrorsPrgrms+1
  ENDIF

END  set_sa_ctrl
-----------------------------------------------------------------------------
ROUTINE extioint_wiz
-- PURPOSE: External I/O Interlock Hardware Relay Setup Wizard
--
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
extinlk_ans:  INTEGER
extinlk_cfm:  INTEGER

BEGIN

  IF UNINIT(extioinlk) THEN
    extioinlk = 0 --no external I/O interlock setup has ever been executed
  ENDIF

  IF UNINIT(pwrs_extinlk) THEN
    pwrs_extinlk = FALSE --disable external interlock hardware power supply monitoring by default
  ENDIF

  REPEAT
    CLR_STND_SCR(gm_status)
    WRITE(CR,extio_gmdata,CR,CR)      -- External I/O Interlock Relay Setup
    WRITE(extio_gmdt_1,CR,CR)         -- Please see GM Wizard manual sec 8.7
    WRITE ('1. ',extio_gmdt_4 ,CR)    -- 1. Enable external I/O interlock relay
    WRITE ('2. ',extio_gmdt_5 ,CR)    -- 2. Disable external I/O interlock relay
    WRITE ('0. ',exit_gmdata ,CR)     -- 0. Exit
    WRITE (m31_gmdata,' 0-2:  ')      -- Enter Selection 0-2:
    READ (extinlk_ans)
  UNTIL (Verify_Answr(extinlk_ans,0,2)) 

  SELECT extinlk_ans OF
    CASE(enb_extioinl):  --enable external I/O interlock hardware

      REPEAT
        CLR_STND_SCR(gm_status)    
        WRITE(CR,extio_gmdt_2,CR)   --IMPORTANT! Enabling or Disabling
        WRITE(extio_gmdt_3,CR,CR)   --will cause a change to DCS signatures
        WRITE(extio_gmdt_4,'?',CR)  --Enable external I/O interlock rly
        WRITE (extio_gmdt_6,CR)     --Enter 1 to execute setup
        WRITE (extio_gmdt_7,CR)     --Enter 0 to cancel and exit
        WRITE(gdata_ans,':  ')
        READ(extinlk_cfm)
      UNTIL(Verify_Answr(extinlk_cfm,0,1)) 

      IF (extinlk_cfm = 1) THEN --execute setup
        extioinlk = extio_enbld --external I/O interlock hardware is enabled
        pwrs_extinlk = TRUE     --enable relay power supply monitoring
        dcs_extinlk             --DCS settings for external I/O interlock
      ENDIF

    CASE(dsb_extioinl):  --disable external I/O interlock hardware

      REPEAT
        CLR_STND_SCR(gm_status) 
        WRITE(CR,extio_gmdt_2,CR)   --IMPORTANT! Enabling or Disabling
        WRITE(extio_gmdt_3,CR,CR)   --will cause a change to DCS signatures
        WRITE (extio_gmdt_5,'?',CR) --Disable external I/O interlock rly
        WRITE (extio_gmdt_6,CR)     --Enter 1 to execute setup
        WRITE (extio_gmdt_7,CR)     --Enter 0 to cancel and exit
        WRITE(gdata_ans,':  ')
        READ(extinlk_cfm)
      UNTIL(Verify_Answr(extinlk_cfm,0,1))

      IF (extinlk_cfm = 1) THEN --execute setup
        extioinlk = extio_dsbld --external I/O interlock hardware is enabled
        pwrs_extinlk = FALSE    --disable relay power supply monitoring
        dcs_extinlk             --DCS settings for external I/O interlock
      ENDIF

    CASE(0):  --exit

    ELSE:
  ENDSELECT

END extioint_wiz
-----------------------------------------------------------------------------
ROUTINE idns_menu
-- PURPOSE: Safety Options Menu
--
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
idns_ans:  INTEGER

BEGIN

  REPEAT
    CLR_STND_SCR(gm_status) 
    WRITE(CR,misc_idnsopt,CR)		-- IDNS Safety Options
    WRITE(idns_rust,CR,CR)   		-- RUST Form Changes Required
    WRITE ('1. ',extio_gmdata,CR) 	-- 1. External I/O Interlock Relay Setup      
    WRITE ('0. ',exit_gmdata ,CR) 	-- 0. Exit
    WRITE(gdata_ans,':  ')
    READ(idns_ans)
  UNTIL(Verify_Answr(idns_ans,0,1))

  SELECT idns_ans OF
    CASE(menu_extio):

      extioint_wiz --go to external I/O interlock setup menu

    CASE(0):  --exit

    ELSE:
  ENDSELECT

END idns_menu
-----------------------------------------------------------------------------
ROUTINE stndaln_menu
 -- PURPOSE: Standalone Single Configurations Menu
--
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
stndaln_ans:  INTEGER

BEGIN

  REPEAT
    CLR_STND_SCR(gm_status) 
    WRITE(CR,misc_stndaln,CR)	-- Standalone Single Configuraiotions
    WRITE ('1. ',stnda_lsrgnd ,'(',byd_gmdata,')',CR) -- 1. PCorp Laser Grind (bodyshop)
    WRITE ('2. ',stnda_lsrcln ,'(',byd_gmdata,')',CR) -- 2. PCorp Laser Clean (bodyshop)
    WRITE ('3. ',stnda_lsrdbr ,'(',byd_gmdata,')',CR) -- 3. PCorp Laser Debur (bodyshop)
    WRITE ('4. ',stnda_srvbrs ,'(',byd_gmdata,')',CR) -- 4. Fanuc Servo Brushing (bodyshop)
    WRITE ('5. ',stnda_sptpls ,'(',byd_gmdata,')',CR) -- 5. SBI Spot Plasma (bodyshop)  
    WRITE ('6. ',stnda_bcm    ,'(',byd_gmdata,')',CR) -- 6. Body Chassis Marriage (bodyshop)    
    WRITE ('0. ',exit_gmdata ,CR) -- 0. Exit
    WRITE (m31_gmdata,' 0-6:  ') -- Enter Selection 0-6:
    READ (stndaln_ans)
  UNTIL (Verify_Answr(stndaln_ans,0,6))

  IF (stndaln_ans <> 0) THEN --stand alone configuration was requested
    WizardStatus.Cnfg_Is_Done = TRUE
  ENDIF

  SELECT stndaln_ans OF
    CASE(laser_grind):  --PCorp Laser Grind

      stndalncfg = laser_grind
      set_sa_ctrl  --setup common GM BodyShop settings
      set_lsrgrind --setup specific items for process
      WizardStatus.SetupIs_Done =TRUE
      config_comp = FALSE --allow additional robot setup 
      wiz_exec = TRUE

    CASE(laser_clean):  --PCorp Laser Clean

      stndalncfg = laser_clean
      set_sa_ctrl  --setup common GM BodyShop settings
      set_lsrclean --setup specific items for process      
      WizardStatus.SetupIs_Done =TRUE
      config_comp = FALSE --allow additional robot setup 
      wiz_exec = TRUE
 
    CASE(laser_debur):  --PCorp Laser Debur

      --stndalncfg = laser_debur
      --set_sa_ctrl  --setup common GM BodyShop settings
      --set_lsrdebur --setup specific items for process
      --WizardStatus.SetupIs_Done =TRUE 
      --config_comp = FALSE --allow additional robot setup 
      --wiz_exec = TRUE
        CLR_STND_SCR(gm_status) 
        WRITE(CR,stnda_lsrdbr)
        WRITE(CR,'UNDER DEV')
        WRITE TPPROMPT (CR, enter_gmdata,'.')
        READ TPPROMPT (CR)

    CASE(servo_brush):  --Fanuc Servo Brush

      stndalncfg = servo_brush 
      set_sa_ctrl  --setup common GM BodyShop settings
      set_srvbrsh  --setup specific items for process
      WizardStatus.SetupIs_Done =TRUE
      config_comp = FALSE --allow additional robot setup 
      wiz_exec = TRUE

    CASE(spot_plasma):  --SBI Spot Plasma

      stndalncfg = spot_plasma
      set_sa_ctrl  --setup common GM BodyShop settings 
      set_sptplsm  --setup specific items for process
      WizardStatus.SetupIs_Done =TRUE
      config_comp = FALSE --allow additional robot setup 
      wiz_exec = TRUE

    CASE(bodychasmarg):  --Body Chassis Marriage
      stndalncfg = bodychasmarg
      set_sa_ctrl --setup common GM Bodyshop settings
      set_bcm --setup specific items for body chassis marriage
      WizardStatus.SetupIs_Done =TRUE
      config_comp = FALSE --allow additional robot setup 
      wiz_exec = TRUE

    CASE(0):  --exit

    ELSE:
  ENDSELECT

END stndaln_menu
-----------------------------------------------------------------------------
ROUTINE addprg_menu
-- PURPOSE: Add Program Menu
--
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
addprg_ans:  INTEGER

BEGIN

  REPEAT
    CLR_STND_SCR(gm_status) 
    WRITE(CR,misc_addprg,CR)	    -- Additional Programs and Templates
    WRITE ('1. ',addp_sekfnd ,CR)   -- 1. MH Seek and Find Templates
    WRITE ('2. ',addp_qckcls ,CR)   -- 2. addp_qckcls     
    WRITE ('0. ',exit_gmdata ,CR)   -- 0. Exit
    WRITE (m31_gmdata,' 0-2:  ')    -- Enter Selection 0-2:
    READ (addprg_ans)
  UNTIL (Verify_Answr(addprg_ans, 0,2))

  SELECT addprg_ans OF
    CASE(mh_seekfind):  --MH Seek and Find

      set_seekfnd

    CASE(qck_clsgrp):  --Quick Close Grip

      set_qckcls
 
    CASE(0):  --exit

    ELSE:
  ENDSELECT

END addprg_menu
-----------------------------------------------------------------------------
ROUTINE swgset_menu
-- PURPOSE: Additional Servo Gun Setup Menu
--
--
-- INPUT:
--            -
-- OUTPUT:  
--
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
VAR
swgset_ans:  INTEGER
gchng_ans:   INTEGER

BEGIN

  IF UNINIT(WizardStatus.Cnfg_Is_Done) THEN
    WizardStatus.Cnfg_Is_Done = FALSE
  ENDIF

  IF UNINIT(WizardStatus.SetupIs_Done) THEN
    WizardSTatus.SetupIs_Done = FALSE
  ENDIF

  REPEAT
    CLR_STND_SCR(gm_status) 
    WRITE(CR,misc_swgset,CR)		-- Additional Servo Gun App Setup
    WRITE ('1. ',swgset_gchng ,CR) 	-- 1. Gun Change Setup    
    WRITE ('0. ',exit_gmdata ,CR) -- 0. Exit
    WRITE (m31_gmdata, ' 0-1:  ') -- Enter Selection 0-1:
    READ (swgset_ans)
  UNTIL (Verify_Answr(swgset_ans,0,1))

  SELECT swgset_ans OF
    CASE(gunchng_set):  --Gun Change Setup

      IF ((WizardStatus.Cnfg_Is_Done = FALSE) OR (WizardStatus.SetupIs_Done = FALSE)) THEN --must run wizard first
        CLR_STND_SCR(gm_status)
        WRITE(CR,swgwizcomp1)				--The configuration wizard has
        WRITE(CR,swgwizcomp2) 				--not been executed
        WRITE(CR,swgwizcomp3)				--execte wizard and return
        WRITE(CR,swgwizcomp4,CR)			--to do this setup
        WRITE TPPROMPT(CR,enter_gmdata,'.')		--Press Enter to continue
        READ TPPROMPT (CR)
        RETURN
      
      ELSE

        IF ((wld1_app = wld1app_cg) AND (UseToolChngr = TRUE) AND (sgunchng = TRUE)) THEN --carried servo gun change application

          swgtc_menu::

          REPEAT
            CLR_STND_SCR(gm_status) 
            WRITE(CR,swgset_gchng,CR)	-- Additional Servo Gun App Setup
            WRITE ('1. ',swgset_mtr ,CR) 	-- 1. Motor Setup 
            WRITE ('2. ',swgsetguntip ,CR) -- 2. Gun and Tipdress Setup  
            WRITE ('0. ',exit_gmdata ,CR)   -- 0. Exit
            WRITE (m31_gmdata,' 0-2:  ')     -- Enter Selection 0-1:
            READ (gchng_ans)
          UNTIL (Verify_Answr(gchng_ans,0,2))

          SELECT gchng_ans OF

            CASE(set_motor):  --Motor Setup

              set_swgmtr --run servo gun and tip dress motor setup

            CASE(set_guntip):  --Gun and Tipdress Setup

              set_guntc --run gun I/O, programs, gun and servo tip dresser setup
     
            CASE(0):  --exit

              ELSE:

          ENDSELECT  

          IF (gchng_ans <> 0) THEN --stay in Additional Servo Gun App Setup Menu
            goto swgtc_menu
          ENDIF 

        ELSE  --not a carried servo gun change applicaiton, abort setup
          CLR_STND_SCR(gm_status)
          WRITE(CR,swgtcwizap1)		--Application is not configured
          WRITE(CR,swgtcwizap2,' ',swgchngapp,'.',CR)	--as a Servo Gun Change Application.
          WRITE(CR,swgtcwizap3,'.')			--Returning to the main menu.
          WRITE TPPROMPT(CR,enter_gmdata,'.')		--Press Enter to continue.
          READ TPPROMPT (CR)
          RETURN
      
        ENDIF --carried servo gun change application 
      ENDIF --wizard has not been executed check 
    CASE(0):  --exit

    ELSE:
  ENDSELECT

END swgset_menu
-----------------------------------------------------------------------------
BEGIN

END gmwizmis
   







