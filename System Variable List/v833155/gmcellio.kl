-- -----------------------------------------------------------------------
--
--   MODULE:         GMCELLIO.KL
--   TITLE:          GMCELLIO PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2014
--         DESCRIPTION: This program is designed to be called from the GM G4 wizard
--                      its function is to be a modular piece to initialize the Standard
--                      cell I/O that every single robot GM executes as a Global Common
--
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--         2016-06-14 marchaka Set macro table size to 200.
--         2016-09-26 marchaka Only map PMC digital outputs to DO 2040 instead
--                             of DO 2048
--         2016-10-13 marchaka Add application bit output comments
--         2017-01-10 marchaka Added flags 33-34,85,201-202.  DI 501 added
--              4.1   2017/03/12  marchaka         Skip over app bit comments if ArcTool
--              4.2   2017/06/24 marchaka	  Add comments for flag 1024, DI 278-279
--         	4.3   2018-04-04 schoensm  V8.33P05 updates 
--              4.4   2018/09/10 marchaka  GM DCS digital and group outputs now set in gmcellio
--              4.4   2018/10/11 marchaka  Only setup auto exit system variables if auto exit is installed
--                                         on the robot.  Valid GM laser applications do not have this option
--                                         installed on them.
--              4.5   2020-04-14 schoensm  added DI[465] for hmi speed override during v8.33p09
--
--
--------------------------------------------------------------------------
-----------------------------------------------------------------
PROGRAM gmcellio
------------------------------------------------------------------
%PRIORITY = 50
%SYSTEM
%COMMENT='G4.5 Cell I/O'
%NOLOCKGROUP
%INVISIBLE
%STACKSIZE = 1000
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE


%ENVIRONMENT iosetup -- Need for teh SET_PORT builtins
%ENVIRONMENT swgdef -- Reuired for the Spot System Varaiables setup
%ENVIRONMENT celldef -- Required for the Cell Celup variables
%ENVIRONMENT sysdef  -- Required for System Variables Like SHELL_WRK and MAXUALRNUM

%INCLUDE kliotyps

%INCLUDE atconst -- required for the constants for the "shell_check" variable array
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

%INCLUDE gmcnstnt  -- Constant file for GM

%INCLUDE gm_var    --GM variables
%INCLUDE gmcfgerr  -- has the structures for the error tracking
%INCLUDE gmcfgcel  -- has the workcell variable setting for configuration

CONST
pmc_out_rack = 33
pmc_out_slot = 3

Version = '2020-04-14'

VAR
Num,        -- Used as a integer to string to add to end of comments
current_BCD, -- Used for adding text to the end of comments that have BCD type comment
entry 	 	 : INTEGER
gm_status  : INTEGER
port_n 		 : INTEGER
I             : INTEGER
l_dummy       : INTEGER
l_psve        : INTEGER
l_stat       	: INTEGER
Port_No       : INTEGER
Rack_No       : INTEGER
Slot_No       : INTEGER
Phy_Port_Typ  : INTEGER
Frst_Port_No  : INTEGER
N_Ports       : INTEGER
l_entry       : INTEGER
user_num     	: STRING[3]
pop_index    	: INTEGER
screen       	: STRING[4]
d_path,t_path	:STRING[40]
dev	:STRING[4]
cur_io_num  : INTEGER -- Used for the returned value of I/O points in the System variables
num_errors         : INTEGER -- used to return the Number of error occured during

StrtinErs  : INTEGER  -- How many errors I/O error counter had when the program started

  Cell_IO_Done   IN SHADOW : BOOLEAN -- used to track if the inputs hve been previsously setup

--From other programs
  shell_check  IN SHADOW FROM ATSHELL : ARRAY[MAX_CHECKS,MAX_CONDS] of BOOLEAN
  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine

%INCLUDE klrdutil
%INCLUDE gmrdutil --GM common routines

-- Enet to Workcell Controller on Robot Configuration program
ROUTINE SET_CELL_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING) FROM gmenetsu
ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
ROUTINE set_std_var FROM gmsetvar --initial GM Karel variables
ROUTINE arc_loaded FROM gmmain1 --ArcTool option loaded 
ROUTINE set_saftyio FROM gmsafeio --Digital and group output setup for DCS
-----------------------------------------------------------------------------
ROUTINE Reset_io(p_Clr_StrPnt,p_Clr_EndPnt:INTEGER)--:INTEGER
-- PURPOSE: this routine is to Reset the first 800 input and outputs in the
--          standard GM memory map.
---         Set all I/O 9-256 to zero so that if GM loads an I/O back and  --
--          wants to set the cell macid there will not be any conflict    --
--          of trying to map I/O that already is mapped                   ---
-- INPUT:
--            -
-- OUTPUT:  THe number of errors occured during routine execution
--            -
-- CALLED BY:  GM G4 Global Common Wizard
--
--
-----------------------------------------------------------------------------
VAR

  Port_No            : INTEGER -- input to GET_PORT_ASG builtin
  Rack_No            : INTEGER -- Rack number returned value from GET_PORT_ASG builtin
  Slot_No            : INTEGER -- Slot number returned value from GET_PORT_ASG builtin
  Phy_Port_Typ       : INTEGER -- returned with the type of port assigned to, from GET_PORT_ASG builtin
  Frst_Port_No       : INTEGER -- returned with the number of the port assigned to, from GET_PORT_ASG builtin
  N_Ports            : INTEGER -- returned with the number of physical ports assigned to the logical port, GET_PORT_ASG
  status             : integer -- When NOT zero builtin error has occured, log fault for user
  I                  : integer -- Used for indexing through FOR loops

                               -- routine execution
BEGIN

 num_errors = 0 -- Reset number of errors.

  FOR I = p_Clr_StrPnt to p_Clr_EndPnt DO
    Get_Port_Asg(io_dout,I,Rack_No,Slot_No,Phy_Port_Typ,Frst_Port_No,N_Ports,Status)
    IF (Status = 0) OR (Status = 13042) Then -- if not assigned it maybe comes back PRIO-042
      Set_Port_Asg (io_dout,I,0,0,0,0,0,Status)
        IF (Status <> 0) AND (status <> 13007) THEN --PRIO-007 No Match in Set PORT
          num_errors = num_errors + 1
          POST_ERR(38000, 'SET_PORT_ASG for DO['+int2str(i)+'] Failed', status, 0) --
        ENDIF
    ELSE --
      IF Status <> 13042 THEN
        num_errors = num_errors + 1
        POST_ERR(38000, 'GET_PORT_ASG for DO['+int2str(i)+'] Failed', status, 0) --
        DELAY 1000
      ENDIF
    ENDIF
  ENDFOR

  FOR I = p_Clr_StrPnt to p_Clr_EndPnt DO
    Get_Port_Asg(io_din,I,Rack_No,Slot_No,Phy_Port_Typ,Frst_Port_No,N_Ports,Status)
    IF Status = 0 Then
      Set_Port_Asg (io_din,I,0,0,0,0,0,Status)
        IF (Status <> 0) AND (status <> 13007) THEN --PRIO-007 No Match in Set PORT
          num_errors = num_errors + 1
          POST_ERR(38000, 'SET_PORT_ASG for DI['+int2str(i)+'] Failed', status, 0) --
        ENDIF
    ELSE -- Get Port built-in failed
      IF Status <> 13042 THEN -- if not assigned it maybe comes back PRIO-042
        num_errors = num_errors + 1
        POST_ERR(38000, 'GET_PORT_ASG for DI['+int2str(i)+'] Failed', status, 0) --
        DELAY 1000
      ENDIF
    ENDIF
  ENDFOR

--  RETURN(num_errors)

END Reset_io
-----------------------------------------------------------------------------
ROUTINE SetupMiscell
-- PURPOSE: this sets up miscellanous until it finds the correct home for the code
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(CellCommType) THEN
  CellCommType = Ethernet
ENDIF
IF UNINIT(CellSlotNmbr) THEN
  CellSlotNmbr = 1
ENDIF
IF UNINIT(cur_io_num) THEN
  cur_io_num = 0
ENDIF
--  reset_io

  -- Set I/O to 2048
  GET_VAR(entry, '*SYSTEM*' , '$max_dig_prt', cur_io_num, gm_status)
     IF gm_status <> 0 THEN
       POST_ERR(38000, '[*SYSTEM*].$max_dig_prt FAILED', gm_status, 0) --
       ABORT
     ELSE
        IF cur_io_num < 2048 THEN
           SET_VAR(entry, '*SYSTEM*' , '$max_dig_prt', 2048, gm_status)
             IF gm_status <> 0 THEN
               POST_ERR(38000, 'SET [*SYSTEM*].$max_dig_prt FAILED', gm_status, 0) --
               ABORT
             --ELSE  						    --don't think this is needed
               --POST_ERR(38000, 'I/O Table Expanded to 2048', 0, 0) --
               --SPRUNCMD('RE_POWER',gm_status)
             ENDIF
        ENDIF
     ENDIF

 -- Set Registers to 500
  Set_I_PVar('*NUMREG*','$MAXREGNUM',999)

 -- Set Sting Registers to 99
  Set_I_PVar('*STRREG*','$MAXSREGNUM',99)

 -- Set Position Registers to 200
  Set_I_PVar('*POSREG*','$MAXPREGNUM',200) 

  -- Set Macro to 200
  Set_I_sVar('$MACRO_MAXNU',200)

  -- Weld Menu No Commenting for DI's/DO's
  Set_B_sVar('$shell_cfg.$set_iocmnt',FALSE)

  -- Timout Value
  Set_I_sVar('$WAITTMOUT',300)

  -- User alarm table size
  Set_I_sVar('$maxualrmnum',200)

  -- UFrames
  Set_I_sVar('$scr.$maxnumufram',20)

  -- UTools
  Set_I_sVar('$scr.$maxnumutool',20)

END SetupMiscell
-----------------------------------------------------------------------------
ROUTINE Setup_Input
-- PURPOSE: Setup the Input for the Cell
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN
  --***************************** IO CONFIG #1 *******************************
IF UNINIT(Reset_Cell) THEN
  Reset_Cell = TRUE
ENDIF

IF UNINIT(CellCommType) THEN
  CellCommType = 89
ENDIF
IF UNINIT(CellSlotNmbr) THEN
  CellSlotNmbr = 1
ENDIF

  WriteLog('  Starting Workcell Input Setup', FALSE)

--Configure the map so reads as one block
 -- CELL INPUTS
   IF NOT Cnfg_Grp(IO_DIN,1,CellCommType,CellSlotNmbr,1,-800) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF

IF Reset_Cell THEN
  -- Reserved Comments on Cell Interface unused IO per GM
  FOR I = 1 to 800 DO-- 673-800 is for Safe I/O interface never clear because is set at install of core
    SET_PORT_CMT(IO_DIN,I,'(Reserved)',gm_status)   -- Reserve IO for Future
  ENDFOR
ENDIF

  SET_PORT_CMT(IO_DIN, 1, '*IMSTP', gm_status)
  SET_PORT_CMT(IO_DIN, 2, '*Hold', gm_status)
  SET_PORT_CMT(IO_DIN, 3, '*SFSPD', gm_status)
  SET_PORT_CMT(IO_DIN, 4, 'Cycle stop', gm_status)
  SET_PORT_CMT(IO_DIN, 5, 'Fault reset', gm_status)
  SET_PORT_CMT(IO_DIN, 6, 'Start', gm_status)
  SET_PORT_CMT(IO_DIN, 7, 'Home', gm_status)
  SET_PORT_CMT(IO_DIN, 8, 'Enable', gm_status)

--Unmap UOPIN 17
  SET_PORT_ASG(IO_UOPIN,17,0,0,0,0,0,gm_status)

--Set the RSR-PNS/Style Bits 9-16
   Current_BCD = 1
  FOR I = 9 to 16 DO
    SET_PORT_CMT(IO_UOPIN,i,'RSR/PNS/StyBt'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

  SET_PORT_CMT(IO_UOPIN, 17, '', gm_status)
  SET_PORT_CMT(IO_UOPIN, 18, 'InitiateStyle', gm_status)

  -- UOPS Input Setup
  SET_PORT_ASG(IO_UOPIN, 1,CellCommType, CellSlotNmbr,IO_DIN, 1, -8,  gm_status)
  SET_PORT_ASG(IO_UOPIN, 9,CellCommType, CellSlotNmbr,IO_DIN,25 ,-8,gm_status)
  SET_PORT_ASG(IO_UOPIN ,18, CellCommType, CellSlotNmbr,IO_DIN, 35,-1,gm_status)

   -- Verify I/O type for full load cold start condition
  SET_PORT_CMT(IO_DIN, 10, 'TryoutModeReq',  gm_status)
  SET_PORT_CMT(IO_DIN,20, 'OptionBitA',    gm_status)          -- Option Bit A
  SET_PORT_CMT(IO_DIN,21, 'OptionBitB',    gm_status)          -- Option Bit B
  SET_PORT_CMT(IO_DIN,22, 'OptionBitC',    gm_status)          -- Option Bit C
  SET_PORT_CMT(IO_DIN,23, 'OptionBitD',    gm_status)          -- Option Bit D
  SET_PORT_CMT(IO_DIN,24, 'OptionBitE',    gm_status)          -- Option Bit E

--Set the Decision Code Bits bits 25-32
   Current_BCD = 1
  FOR I = 25 to 32 DO
    SET_PORT_CMT(IO_DIN,i,'StyleBit'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

  SET_PORT_CMT(IO_DIN, 33,'FastStopRequest',  gm_status)
  SET_PORT_CMT(IO_DIN, 35,'InitiateStyle',  gm_status)
  SET_PORT_CMT(IO_DIN, 36,'EqptRemoteRes', gm_status)          -- Equipment Remote Reset

  FOR I = 37 TO 48 DO -- Interference Zone 1 - Interference Zone 12
    user_num = int2str(I - 36)
    SET_PORT_CMT(IO_DIN,I,'ClearToEntrZon'+user_num, gm_status)   -- Reserve IO for Future
  ENDFOR

  --Set the Decision Code Bits bits 49-55
   Current_BCD = 1
  FOR I = 49 to 55 DO
    IF i< 53 THEN
      SET_PORT_CMT(IO_DIN,i,'DecisionCodeBit'+int2str(current_BCD), gm_status)
    ELSE
      SET_PORT_CMT(IO_DIN,i,'DecisionCodeBt'+int2str(current_BCD), gm_status)
    ENDIF
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

  SET_PORT_CMT(IO_DIN, 56, 'PathSegContOK',  gm_status)        -- Path Segment Continue

  --Set the Path Segment Bits bits 57-63
   Current_BCD = 1
  FOR I = 57 to 63 DO
    SET_PORT_CMT(IO_DIN,i,'PathSegmentBit'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR
  SET_PORT_CMT(IO_DIN, 64,'PathSegmentBt128',   gm_status)  -- Path Segment Bit 128

  -- Process 1 On Request
  SET_PORT_CMT(IO_DIN, 65, 'Process1onReq',  gm_status)        -- Process 1 On Request
  SET_PORT_CMT(IO_DIN, 66, 'Proc1BypassReq',  gm_status)     -- Process 1 On Bypassed

  -- Reseved Process Comments
  FOR I = 67 to 128 DO
    SET_PORT_CMT(IO_DIN,I,'Proc1Reserved',gm_status)           -- Reserve IO for Future
  ENDFOR

  SET_PORT_CMT(IO_DIN,129, 'Process2onReq',  gm_status)      -- Process 2 On Request
  SET_PORT_CMT(IO_DIN,130, 'Proc2BypassReq',  gm_status)     -- Process 2 On Bypassed

  -- Reseved Process Comments
  FOR I = 131 to 192 DO
    SET_PORT_CMT(IO_DIN,I,'Proc2Reserved',gm_status)         -- Reserve IO for Future
  ENDFOR

  FOR I = 193 to 256 DO
    SET_PORT_CMT(IO_DIN,I,'(Proc3Reserved)',gm_status)           -- Reserve IO for Future
  ENDFOR

  -- G4 Shop Specific
IF Reset_Cell THEN -- only recomment these if reset cell is active, so dont change users comments after
  FOR I = 257 to 277 DO
    user_num = int2str(I-256)
    SET_PORT_CMT(IO_DIN,I,'diShopSpec'+user_num, gm_status)   -- Reserve IO for Future
  ENDFOR
ENDIF

  SET_PORT_CMT(IO_DIN,278, 'StackSearch',  gm_status)      -- Stack Search
  SET_PORT_CMT(IO_DIN,279, 'SearchDisabled',  gm_status)   -- Search Disabled  

IF Reset_Cell THEN -- only recomment these if reset cell is active, so dont change users comments after
  FOR I = 280 to 384 DO
    user_num = int2str(I-256)  --starting point is 24
    SET_PORT_CMT(IO_DIN,I,'diShopSpec'+user_num, gm_status)   -- Reserve IO for Future
  ENDFOR
ENDIF

  --Set the Fault Response Code bits 449-456
   Current_BCD = 1
  FOR I = 449 to 456 DO
    SET_PORT_CMT(IO_DIN,i,'FltRspBCD'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

   --Set the Speed Override Code bits 457-463
   Current_BCD = 1
  FOR I = 457 to 463 DO
    SET_PORT_CMT(IO_DIN,i,'RbtPrcntOvrBit'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

  SET_PORT_CMT(IO_DIN,421,'Di_ZDT_Event_Ack',gm_status)
  SET_PORT_CMT(IO_DIN,464,'RbtPrcntOvrBt'+int2str(current_BCD), gm_status)
  SET_PORT_CMT(IO_DIN,465,'HmiSpdOvrReq',gm_status)                       --4-14-2020 v8.33p09 schoensm
  SET_PORT_CMT(IO_DIN,473,'diHMI_Part_Pick',gm_status)
  SET_PORT_CMT(IO_DIN,474,'diHMI_Part_Drop',gm_status)

  --  Set Vision I/O comments
  SET_PORT_CMT(IO_DIN, 497, 'AckRackComplete', gm_status)
  SET_PORT_CMT(IO_DIN, 498, 'Check RackStatus', gm_status)
  SET_PORT_CMT(IO_DIN, 499, 'Vision Reserved', gm_status)
  SET_PORT_CMT(IO_DIN, 500, 'Vision Reserved', gm_status)
  SET_PORT_CMT(IO_DIN, 501, 'AbortFrame', gm_status)
  SET_PORT_CMT(IO_DIN, 502, 'CnclCycle', gm_status)
  SET_PORT_CMT(IO_DIN, 503, 'BypassNom', gm_status)
  SET_PORT_CMT(IO_DIN, 504, 'BypassAvg', gm_status)
  SET_PORT_CMT(IO_DIN,521,'diMHRecoveryReq',gm_status)

  -- Set User Definable Input bits
IF Reset_Cell THEN -- only recomment these if reset cell is active, so dont change users comments after
  FOR I = 641 to 656 DO
    user_num = int2str(I)
    SET_PORT_CMT(IO_DIN,I,'UserDefine'+user_num, gm_status)   -- Reserve IO for Future
  ENDFOR

  FOR I = 657 to 672 DO -- indicate the bits are mapped as user Go[26]
    SET_PORT_CMT(IO_DIN,I,'UserGI[26]Bit '+int2str((i-656)), gm_status)
  ENDFOR

  FOR i = 881 TO 2000 DO
    SET_PORT_CMT(IO_DIN,i, 'diShopSpecInput', gm_status)  --Application Fault Number
  ENDFOR --

ENDIF

  --GINS

   IF NOT Cnfg_Grp(IO_GPIN,1,CellCommType,CellSlotNmbr,25,-8) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
   SET_PORT_CMT(IO_GPIN,1,'Style',  gm_status)

   IF NOT Cnfg_Grp(IO_GPIN,2,CellCommType,CellSlotNmbr,49,-6) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
  SET_PORT_CMT(IO_GPIN,2,'DecisionCode',   gm_status)         -- Decision Code

   IF NOT Cnfg_Grp(IO_GPIN,3,CellCommType,CellSlotNmbr,57,-8) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
   SET_PORT_CMT(IO_GPIN ,3,'PathSegmentSelect',   gm_status)         --Path Segment

-- Below will be common across GM someday
   SET_PORT_ASG(IO_GPIN,74,CellCommType,CellSlotNmbr,IO_DIN,457,-8,gm_status)
   SET_PORT_CMT(IO_GPIN,74,'RobotPercentOvrd',  gm_status)

IF Reset_Cell THEN -- only recomment these if reset cell is active, so dont change users comments after
   IF NOT Cnfg_Grp(IO_GPIN,26,CellCommType,CellSlotNmbr,657,-16) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
   SET_PORT_CMT(IO_GPIN,26,'UserDefineGI[26]',  gm_status)
ENDIF

  --Power Supply Breakers
  SET_PORT_CMT(IO_SOPIN, 4,'',gm_status)
  SET_PORT_CMT(IO_SOPIN,12,'Mtn and NMtn Pwr',gm_status) --Summation of Motion and Non-Motion Power

  --Set Cell Interface Inputs
  Set_I_sVar('$cell_setup.$di_tryout_i',di_tryout_i)         -- Tryout Mode Request
  Set_I_sVar('$cell_setup.$di_optna_i',di_opta_i)           -- Option Bit A
  Set_I_sVar('$cell_setup.$di_optnb_i',di_optb_i)           -- Option Bit B
  Set_I_sVar('$cell_setup.$di_optnc_i',di_optc_i)           -- Option Bit C
  Set_I_sVar('$cell_setup.$di_inisty_i',di_inisty_i)         -- Initiate Style
  Set_I_sVar('$cell_setup.$di_pthcnt_i',di_pthcnt_i)         -- Path Segment
  Set_I_sVar('$prgns_grp[1].$warn_din',di_zdt_i)	    -- ZDT Acknowledge

  Set_I_sVar('$cell_setup.$gi_stysel_i',gi_stysel_i)         -- Style Select GI
  Set_I_sVar('$cell_setup.$gi_decsn_i',gi_decsn_I)           -- Decision Code GI

  WriteLog('  Workcell Input Setup Complete', FALSE)

END Setup_Input
-----------------------------------------------------------------------------
ROUTINE Setup_Output
-- PURPOSE: Setup all te standard outputs for all robot that use global common
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(Reset_Cell) THEN
  Reset_Cell = TRUE
ENDIF
Current_Ver = Version -- Set the version for reference

   WriteLog('  Starting Workcell Output Setup', FALSE)

  -- Reserved Comments on Cell Interface unused IO per GM
IF Reset_Cell THEN -- only do comments if entire cell is being reset
  FOR I = 1 to 672 DO-- 673-800 is for Safe I/O interface never clear because is set at install of core
    SET_PORT_CMT(IO_DOUT,I,'(Reserved)',gm_status)   -- Reserve IO for Future
  ENDFOR
ENDIF

 -- CELL OUTPUTS set teh rack lenght so TP display is all inclusive of the 800 bits for cell I/)
   IF NOT Cnfg_Grp(IO_DOUT,1,CellCommType,CellSlotNmbr,1,-800) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF

  -- UOP output comments
  -- These are mapped over the DIN's and DOUT's pre GM's request
  SET_PORT_CMT(IO_DOUT, 1, 'Cmd enabled',  gm_status)
  SET_PORT_CMT(IO_DOUT, 2, 'System ready',  gm_status)
  SET_PORT_CMT(IO_DOUT, 3, 'Prg running',  gm_status)
  SET_PORT_CMT(IO_DOUT, 4, 'Prg paused',  gm_status)
  SET_PORT_CMT(IO_DOUT, 5, 'Motion held',  gm_status)
  SET_PORT_CMT(IO_DOUT, 6, 'Fault',  gm_status)
  SET_PORT_CMT(IO_DOUT, 7, 'BatterLowAlert',  gm_status)
  SET_PORT_CMT(IO_DOUT, 8, 'TP enabled',  gm_status)

  --Unmap UOP 17 - 20 
  FOR I = 17 to 20 DO
    SET_PORT_ASG(IO_UOPOUT,I,0,0,0,0,0,gm_status)
  ENDFOR

  -- UOPS  setup UOP config
  SET_PORT_ASG(IO_UOPOUT,1,CellCommType, CellSlotNmbr,IO_DOUT,1, -6,  gm_status) -- UOPS
  SET_PORT_ASG(IO_UOPOUT,8,CellCommType, CellSlotNmbr,IO_DOUT,8, -1,  gm_status) -- Skip UO[7] HOME
  SET_PORT_ASG(IO_UOPOUT,9,CellCommType, CellslotNmbr,IO_DOUT,7, -1,  gm_status) -- Battery

  SET_PORT_CMT(IO_UOPOUT, 9, 'BatterLowAlert', gm_status)
  
  FOR I = 10 to 20 DO -- clear uop outputs
    SET_PORT_CMT(IO_UOPOUT, I, '', gm_status)
  ENDFOR

  SET_PORT_CMT(IO_DOUT, 10, 'TryoutMode',gm_status)           -- Tryout Mode
  SET_PORT_CMT(IO_DOUT, 11, 'InCycle',  gm_status)

  -- Robot In Interlock (Automatic Mode to FRNA)
  SET_PORT_CMT(IO_DOUT, 12, 'InInterlock',  gm_status)

  -- Robot In Isolate (Manual Mode to FRNA)
  SET_PORT_CMT(IO_DOUT, 13,'InIsolate',    gm_status)

  SET_PORT_CMT(IO_DOUT, 14, 'ManualStyleReq',gm_status)       -- Manual Style Request
  SET_PORT_CMT(io_dout, 17,'Manual Intervention',    gm_status)     -- One Spot Welded
  SET_PORT_CMT(IO_DOUT, 18, 'FFRActive',    gm_status)        -- Fast Fault Recovery Active
  SET_PORT_CMT(IO_DOUT, 20,'ManOptionBitA',gm_status)
  SET_PORT_CMT(IO_DOUT, 21,'ManOptionBitB',gm_status)
  SET_PORT_CMT(IO_DOUT, 22,'ManOptionBitC',gm_status)
  SET_PORT_CMT(IO_DOUT, 23,'ManOptionBitD',gm_status)
  SET_PORT_CMT(IO_DOUT, 24,'ManOptionBitE',gm_status)

  --Set the Manual Decision Code bits 49-55
   Current_BCD = 1
  FOR I = 25 to 31 DO
    SET_PORT_CMT(IO_DOUT,i,'ManualStyleBit'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

  SET_PORT_CMT(IO_DOUT, 32, 'ManualStyleBt128',   gm_status)  -- Manual Style Bit 5
  SET_PORT_CMT(io_dout, 33,'FastStopAck',gm_status)
  SET_PORT_CMT(IO_DOUT, 34,'Simulated IO',gm_status)
  SET_PORT_CMT(IO_DOUT, 36,'TCSafeSwMissing',gm_status)

  FOR i = 37 TO 48 DO
    Num = i - 36 -- subtract to add to end of comment
    SET_PORT_CMT(IO_DOUT,i,'ClearOfZone'+int2str(Num),gm_status)
  ENDFOR --

  --Set the Manual Decision Code bits 49-55
   Current_BCD = 1
  FOR I = 49 to 55 DO
    SET_PORT_CMT(IO_DOUT,i,'ManDecCodeBit'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

 -- Path Segment Request To Continue
  SET_PORT_CMT(IO_DOUT, 56,'PathSegReqToCont',gm_status)

  --Set the Path Segment bits 57-64
   Current_BCD = 1
  FOR I = 57 to 63 DO
    SET_PORT_CMT(IO_DOUT,i,'PathSegmentBit'+int2str(current_BCD), gm_status)
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

  SET_PORT_CMT(IO_DOUT, 64,'PathSegmentBt128',  gm_status)   -- Path Segment Bit 128
  SET_PORT_CMT(IO_DOUT, 65, 'Process1On',gm_status)           -- Process 1 Enabled
  SET_PORT_CMT(IO_DOUT, 66, 'Process1Bypassed',gm_status)       -- Process 1 Bypass
  SET_PORT_CMT(IO_DOUT, 67, 'Process1Fault',  gm_status)      -- Process1 Fault
  SET_PORT_CMT(IO_DOUT, 68, 'Process1Alert',  gm_status)      -- Process1 Alert
  SET_PORT_CMT(IO_DOUT, 69, 'Process1Alert2',  gm_status)
  SET_PORT_CMT(IO_DOUT, 70,'Process1OutOfTol',  gm_status)    -- Process 1 Out Of Tolerance
  SET_PORT_CMT(io_dout, 71, 'Process1TaskOk',  gm_status)
  SET_PORT_CMT(io_dout, 72, 'Process1OneJointMade',  gm_status)

-- Setup the Process Equipment

  FOR i = 73 TO 128 DO
    Num = i - 72 -- subtract to add to end of comment
    SET_PORT_CMT(IO_DOUT,i,'doProc1EqMsg'+int2str(Num),gm_status)
  ENDFOR --

  SET_PORT_CMT(IO_DOUT,129, 'Process2On',gm_status)            -- Process 2 Enabled
  SET_PORT_CMT(IO_DOUT,130, 'Process2Bypassed',gm_status)       -- Process 2 Bypass
  SET_PORT_CMT(IO_DOUT,131, 'Process2Fault',  gm_status)      -- Process2 Fault
  SET_PORT_CMT(IO_DOUT,132, 'Process2Alert',  gm_status)      -- Process2 Alert

  SET_PORT_CMT(IO_DOUT, 133, 'Process2Alert2',  gm_status)
  SET_PORT_CMT(IO_DOUT, 134,'Process2OutOfTol',  gm_status)    -- Process 2 Out Of Tolerance

  SET_PORT_CMT(IO_DOUT, 135, 'Proc2TaskOk',  gm_status)
  SET_PORT_CMT(IO_DOUT, 136, 'Proc2OneJntMade',  gm_status)

-- Setup the 2nd Process equipment
  FOR i = 137 TO 192 DO
    Num = i - 136 -- subtract to add to end of comment
    SET_PORT_CMT(IO_DOUT,i,'doProc2EqMsg'+int2str(Num),gm_status)
  ENDFOR --

-- Setup the 3rd Process equipment
  FOR I = 193 to 256 DO
    SET_PORT_CMT(IO_DOUT,I,'(Proc3Reserved)',gm_status)           -- Reserve IO for Future
  ENDFOR

IF Reset_Cell THEN -- only re-comment these if reset cell is active, so don't change users comments after
  -- G4 Shop Specific Outputs
  FOR I = 257 to 384 DO
    user_num = int2str(I-256)
    SET_PORT_CMT(IO_DOUT,I,'doShopSpec'+user_num, gm_status)   -- Reserve IO for Future
  ENDFOR
ENDIF

  --Robot Option Bits
  SET_PORT_CMT(IO_DOUT, 417, 'doDCSTestMode',  gm_status)
  SET_PORT_CMT(IO_DOUT, 418, 'doColGuardEnb',  gm_status)

-- Set variable for the output the system to turn ON when collision guard is enabled
  SET_PORT_CMT(IO_DOUT, 419, 'doLVCDisabled',  gm_status)
  SET_PORT_CMT(IO_DOUT, 420, 'doLVCNormalMode',  gm_status)
  SET_PORT_CMT(IO_DOUT, 421, 'do_ZDT_Event',  gm_status)
  SET_PORT_CMT(IO_DOUT, 422, 'do_ColGuardErr',  gm_status)

  --G4 Home Bits
  FOR I = 433 to 442 DO
    user_num = int2str(I-432)
    SET_PORT_CMT(IO_DOUT,I,'doHOME'+user_num, gm_status)
  ENDFOR

  --Set the Application Fault Number bits 449-456
   Current_BCD = 1
  FOR I = 449 to 456 DO
    IF I < 456 THEN
      SET_PORT_CMT(IO_DOUT,i,'ApplFltNumBit'+int2str(current_BCD), gm_status)
    ELSE -- need differant comment
      SET_PORT_CMT(IO_DOUT,i,'ApplFltNumBt'+int2str(current_BCD), gm_status)
    ENDIF
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

   --Set the Robot Override bits 457-464
   Current_BCD = 1
  FOR I = 457 to 464 DO
   IF I< 464 THEN
    SET_PORT_CMT(IO_DOUT,i,'RbtOverrideBit'+int2str(current_BCD), gm_status)
   ELSE
    SET_PORT_CMT(IO_DOUT,i,'RbtOverrideBt'+int2str(current_BCD), gm_status)
   ENDIF
   Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

    SET_PORT_CMT(IO_DOUT,465,'RbtOvCtrlEnabled', gm_status)

--??? May need to move this somewhere else if NOT every robot reqardless

  --Vision Bits
  SET_PORT_CMT(IO_DOUT,497,'Rack Complete',gm_status)
  SET_PORT_CMT(IO_DOUT,498,'Vision Fault',gm_status)
  SET_PORT_CMT(IO_DOUT,499,'Vision Reserved',gm_status)
  SET_PORT_CMT(IO_DOUT,500,'Vision Reserved',gm_status)
  SET_PORT_CMT(IO_DOUT,501,'PCRobCommOK',gm_status)
  SET_PORT_CMT(IO_DOUT,502,'CnclCycle',gm_status)
  SET_PORT_CMT(IO_DOUT,504,'RackingFault',gm_status)

  --Tool Bits
     --Set the Tool Number bits 449-456
  Current_BCD = 1
  FOR I = 513 to 520 DO
    IF I < 520 THEN
      SET_PORT_CMT(IO_DOUT,i,'doTCToolNumBit'+int2str(current_BCD), gm_status)
    ELSE -- Need a differant comment
      SET_PORT_CMT(IO_DOUT,i,'doTCToolNumBt'+int2str(current_BCD), gm_status)
    ENDIF
    Current_BCD = Current_BCD * 2 -- Change for next BCD needed
  ENDFOR

  --Advanced MH Bits
  SET_PORT_CMT(IO_DOUT, 521, 'doMHRecActive',  gm_status)
  SET_PORT_CMT(IO_DOUT, 522, 'doMHAutoRetryAct',  gm_status)
  SET_PORT_CMT(IO_DOUT, 523, 'doMHFault',  gm_status)
  SET_PORT_CMT(IO_DOUT, 524, 'doMHAlert',  gm_status)
  SET_PORT_CMT(IO_DOUT, 525, 'doExitRecrdingG1',  gm_status)
  SET_PORT_CMT(IO_DOUT, 526, 'doExitExecutngG1',  gm_status)
  SET_PORT_CMT(IO_DOUT, 527, 'doExitRecrdingG2',  gm_status)
  SET_PORT_CMT(IO_DOUT, 528, 'doExitExecutngG2',  gm_status)

  -- DO 529 through DO 640 done in GMMHGPIO file using the set_echo_out routine
  -- the routine is used to read the comment out of the DI number it is to echo, and
  -- place the same comment in the Output table that it is passed so they match and
  -- edit in a single place.

  -- User Definable Comments on
IF Reset_Cell THEN -- only recomment these if reset cell is active, so dont change users comments after
  FOR I = 641 TO 656 DO
    user_num = int2str(I)
    SET_PORT_CMT(io_dout,I,'UserDefine'+user_num, gm_status)   -- Reserve IO for Future
  ENDFOR

  FOR I = 657 to 672 DO -- indicate the bits are mapped as user Go[26]
    SET_PORT_CMT(IO_DOUT,I,'UserGO[26]Bit '+int2str((i-656)), gm_status)
  ENDFOR
ENDIF

   IF NOT Cnfg_Grp(IO_DOUT,2001,pmc_out_rack,pmc_out_slot,866,-40) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF

   IF (arc_optn = FALSE) THEN --setup if not ArcTool
     SET_PORT_CMT(IO_DOUT,2001, 'MH App ',gm_status)
     SET_PORT_CMT(IO_DOUT,2002, 'Spot1Proc1App', gm_status)
     SET_PORT_CMT(IO_DOUT,2003, 'Spot2Proc2App', gm_status)
     SET_PORT_CMT(IO_DOUT,2004, 'Disp1Proc1App', gm_status)
     SET_PORT_CMT(IO_DOUT,2005, 'Disp2Proc2App', gm_status)
     SET_PORT_CMT(IO_DOUT,2006, 'Stud1Proc1App', gm_status)
     SET_PORT_CMT(IO_DOUT,2007, 'Stud2Proc2App', gm_status)
     SET_PORT_CMT(IO_DOUT,2008, 'SPR1Proc1App', gm_status)
     SET_PORT_CMT(IO_DOUT,2009, 'SPR2Proc2App', gm_status)
     SET_PORT_CMT(IO_DOUT,2010, 'Proj1Proc1App', gm_status)
     SET_PORT_CMT(IO_DOUT,2011, 'Proj2Proc2App', gm_status)
     SET_PORT_CMT(IO_DOUT,2012, 'Dimp1Proc1App', gm_status)
     SET_PORT_CMT(IO_DOUT,2013, 'Dimp2Proc2App', gm_status)
     SET_PORT_CMT(IO_DOUT,2014, 'FDS1Proc1App', gm_status)
     SET_PORT_CMT(IO_DOUT,2015, 'RESERVED APP', gm_status)
     SET_PORT_CMT(IO_DOUT,2016, 'RESERVED APP', gm_status)

     SET_PORT_CMT(IO_DOUT,2033, 'BODYSHOP', gm_status)
     SET_PORT_CMT(IO_DOUT,2034, 'PRESSSHOP',gm_status)
     SET_PORT_CMT(IO_DOUT,2035, 'POWERTRAIN',gm_status)
     SET_PORT_CMT(IO_DOUT,2036, 'PAINTSHOP', gm_status)
   ENDIF --ArcTool

  --GOUTS

   IF NOT Cnfg_Grp(IO_GPOUT,1,CellCommType,CellSlotNmbr,25,-8) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
   SET_PORT_CMT(IO_GPOUT, 1, 'ManualStyle',   gm_status)

   IF NOT Cnfg_Grp(IO_GPOUT,2,CellCommType,CellSlotNmbr,49,-6) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
   SET_PORT_CMT(IO_GPOUT, 2, 'ManualDecCode',gm_status)           -- Manual Decision Code

   IF NOT Cnfg_Grp(IO_GPOUT,3,CellCommType,CellSlotNmbr,57,-8) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
   SET_PORT_CMT(IO_GPOUT,3, 'PathSegment',   gm_status)        -- Path Segment

   IF NOT Cnfg_Grp(IO_GPOUT,26,CellCommType,CellSlotNmbr,657,-16) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF

   IF NOT Cnfg_Grp(IO_GPOUT,71,CellCommType,CellSlotNmbr,449,-8) THEN
     ErrsInCell.ErrorsIOCom = ErrsInCell.ErrorsIOCom + 1
   ENDIF
   SET_PORT_CMT(IO_GPOUT,71, 'ApplFaultNumber', gm_status)  --Application Fault Number

IF Reset_Cell THEN -- only recomment these if reset cell is active, so dont change users comments after

  SET_PORT_CMT(IO_GPOUT,26,'UserDefineGO[26]',  gm_status)

  FOR i = 881 TO 2000 DO
    SET_PORT_CMT(IO_DOUT,i, 'doShopSpecOutput', gm_status)  --Application Fault Number
  ENDFOR --

ENDIF
-- Below will be common across GM someday
   SET_PORT_ASG(IO_GPOUT,76,CellCommType,CellSlotNmbr,IO_DOUT,457,-8,gm_status)
   SET_PORT_CMT(IO_GPOUT,76,'ActRobotOverride',  gm_status)

 --Set_I_sVar('$blal_out.$do_index',blal_out_i)		-- Battery Low
  Set_I_sVar('$cell_setup.$do_tryout_i',do_tryout_i)    -- Tryout Mode
  Set_I_sVar('$cell_setup.$do_incycl_i',do_incycl_i)    -- In Cycle
  Set_I_sVar('$cell_setup.$do_intlck_i',do_intlck_i)    -- Interlock
  Set_I_sVar('$cell_setup.$do_isolat_i',do_isolat_i)	-- Isolation
  Set_I_sVar('$cell_setup.$do_mansty_i',do_mansty_i)     -- Manual Style Request
  Set_I_sVar('$cell_setup.$do_hfault_i',do_hfault_i)    -- MH Fault Output
  Set_I_sVar('$cell_setup.$do_halert_i',do_halert_i)    -- MH Alert Output
  Set_I_sVar('$cell_setup.$do_optna_i',do_opta_i)       -- Manual Option Bit A
  Set_I_sVar('$cell_setup.$do_optnb_i',do_optb_i)      -- Manual Option Bit B
  Set_I_sVar('$cell_setup.$do_optnc_i',do_optc_i)      -- Manual Option Bit C
  Set_I_sVar('$inpt_sim_do',inpt_sim_do)                -- DI Simulated
  Set_I_sVar('$out_sim_do',out_sim_do)                  -- DO Simulated
  Set_I_sVar('$cell_setup.$do_pthreq_i',do_pthreq_i)     -- Path Segment Request
  Set_I_sVar('$HSCDMNGRP[1].$DO_ENABLE',hscd_doenbl)    -- Collision Guard Enabled
  Set_I_sVar('$HSCDMNGRP[1].$DO_ERR',hscd_doerr)	-- Collision Guard Error  
  Set_I_sVar('$prgns_grp[1].$warn_dout',zdt_do_i)	-- ZDT Event

  IF Chk_Feature('R861') THEN --auto backward exit is installed on the robot
    Set_I_sVar('$autoex_port.$avail_do_i[1]',do_autoaval)  -- Auto Exit
    Set_I_sVar('$autoex_port.$exec_do_i[1]',do_autoexec)   -- Auto Exit
  ENDIF

  IF (arc_optn = FALSE) THEN --SpotTool
    Set_I_sVar('$spotcellio.$do_aprtip_i',do_aprtip_i)
    Set_I_sVar('$SPOTCELLIO.$do_outtol_i[1]',do_outtol_i)  -- Out of Tolerance
    Set_I_sVar('$SPOTCELLIO.$do_outtol_i[2]',do_outtol2i) -- Out of Tolerance Process 2
    Set_I_sVar('$SPOTCELLIO.$DO_PRCCOM_I',do_prccom_i)     -- Process Task Okay
    Set_I_sVar('$SPOTCELLIO.$DO_1SPT_I',do_1spt_i)        -- Joint 1 Made
    Set_I_sVar('$spotcellio.$do_prcflt_i',do_prcflt_i)    -- Process1 Fault
    Set_I_sVar('$spotcellio.$do_prcalt_i',do_prcalt_i)    -- Process1 Alert
  ENDIF --SpotTool

  IF Chk_Feature('J573') THEN -- if LVC not load dont set the variable
    Set_I_sVar('$LVCFG.$IDX_DO',lvccfg_do)		-- LVC Path Disabled
    Set_I_sVar('$LVCFG.$LV_RESV_L2',lvcrun_do)		-- LVC Path Running Normal
  ENDIF 

  Set_I_sVar('$cell_setup.$go_stysel_i',go_stysel_i)     -- Style Select GO
  Set_I_sVar('$cell_setup.$go_decsn_i',go_decsn_i)		-- Decision Code GO
  Set_I_sVar('$cell_setup.$go_pthseg_i',go_pthseg_i)     -- Path Segment GO

  WriteLog('  Workcell Output Setup Complete', FALSE)

END Setup_Output
-----------------------------------------------------------------------------
ROUTINE Setup_in_out
-- PURPOSE: this routine will setup both Input and Outputs common to all Global
--          robots.
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY
-----------------------------------------------------------------------------
BEGIN

   Setup_Input -- Comment all inputs that are common to all configs

   Setup_Output -- Comment All outputs that are comon to all configs

   WriteLog('  Starting Workcell EIP Setup', FALSE)
     SET_CELL_EIP(1,'Cell') -- Setup the Cell Communications
   WriteLog('  Workcell EIP Setup Complete', FALSE)

END Setup_in_out
-----------------------------------------------------------------------------
ROUTINE Setup_Flags
-- PURPOSE: to setup all flags that are commmon to all robots
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
-----------------------------------------------------------------------------
BEGIN

  WriteLog('  Start Flags Setup', FALSE)

  SET_PORT_CMT(IO_FLAG,1,'Capwear Complete', l_stat)

  SET_PORT_CMT(IO_FLAG,5,'Cont Vision#1', gm_status)
  SET_PORT_CMT(IO_FLAG,6,'Vision1 Complete', gm_status)
  SET_PORT_CMT(IO_FLAG,7,'Reserved', gm_status)
  SET_PORT_CMT(IO_FLAG,8,'Reserved', gm_status)
  SET_PORT_CMT(IO_FLAG,9,'Cont Vision#2', gm_status)
  SET_PORT_CMT(IO_FLAG,10,'WTROFF TP CONT', gm_status)

  SET_PORT_CMT(IO_FLAG,15,'AcceptPartforFFR', gm_status)

  SET_PORT_CMT(IO_FLAG,21,'CC REQ GUN1 W1', gm_status)
  SET_PORT_CMT(IO_FLAG,22,'CC REQ GUN2 W1', gm_status)
  SET_PORT_CMT(IO_FLAG,23,'CC REQ GUN3 W1', gm_status)
  SET_PORT_CMT(IO_FLAG,24,'CC REQ GUN4 W1', gm_status)
  SET_PORT_CMT(IO_FLAG,25,'CC REQ GUN1 W2', gm_status)
  SET_PORT_CMT(IO_FLAG,26,'CC REQ GUN2 W2', gm_status)
  SET_PORT_CMT(IO_FLAG,27,'CC REQ GUN3 W2', gm_status)
  SET_PORT_CMT(IO_FLAG,28,'CC REQ GUN4 W2', gm_status)

  SET_PORT_CMT(IO_FLAG,29,'Process1Faulted', gm_status)
  SET_PORT_CMT(IO_FLAG,30,'Process2Faulted', gm_status)
  SET_PORT_CMT(IO_FLAG,31,'FFR PROCESS1', gm_status)
  SET_PORT_CMT(IO_FLAG,32,'FFR PROCESS2', gm_status)
  SET_PORT_CMT(IO_FLAG,33,'DCD MultiLvl', gm_status)
  SET_PORT_CMT(IO_FLAG,34,'DCD Invalid', gm_status)
  SET_PORT_CMT(IO_FLAG,35,'FFRAdaptiveCCReq',gm_status)

  SET_PORT_CMT(IO_FLAG,40,'MH Grip Cancel', gm_status)

  FOR i = 41 TO 49 DO
    SET_PORT_CMT(IO_FLAG,i,'Reserve4AdvMH', gm_status)
  ENDFOR --

  SET_PORT_CMT(IO_FLAG,56,'DVG Redress', gm_status) 
  SET_PORT_CMT(IO_FLAG,57,'ResChkRedress', gm_status) 
  SET_PORT_CMT(IO_FLAG,58,'PedTipDressActive', gm_status)
  SET_PORT_CMT(IO_FLAG,59,'DressVerify', gm_status)
  SET_PORT_CMT(IO_FLAG,60,'TdDressVerComplt', gm_status)

  SET_PORT_CMT(IO_FLAG,81,'Retry', gm_status)
  SET_PORT_CMT(IO_FLAG,82,'Rivet Skip', gm_status)
  SET_PORT_CMT(IO_FLAG,83,'Rivet ID Check', gm_status)
  SET_PORT_CMT(IO_FLAG,84,'Continue Next', gm_status)
  SET_PORT_CMT(IO_FLAG,85,'FDS_SpindleAdv', gm_status) 
  SET_PORT_CMT(IO_FLAG,201,'CC Max Retry', gm_status)
  SET_PORT_CMT(IO_FLAG,202,'Inspection Dress', gm_status)

 

 WriteLog('  Flags Setup Completed', FALSE)

END Setup_Flags
-----------------------------------------------------------------------------
ROUTINE set_cell_io
-- PURPOSE: to setup all flags that are commmon to all robots
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(Reset_Cell) THEN
  Reset_Cell = TRUE
ENDIF

IF UNINIT(Cell_IO_Done) THEN
  Cell_IO_Done = FALSE
ENDIF

IF UNINIT(arc_optn) THEN  --ArcTool Option
  arc_loaded
ENDIF

Current_Ver = Version -- Set the version for reference

IF UNINIT(ErrsInCell.ErrorsIOCom) THEN
  ErrsInCell.ErrorsIOCom = 0
ENDIF

 StrtinErs = ErrsInShop.ErrorsIOCom -- grab curent eror count
 ClrUtltyErrs -- Clear all error in utility program to be used when done

 WriteLog('Starting the Workcell I/O setup Program', FALSE)
-- execute the routines needed for Cell Ip

 set_std_var --Initial GM Karel variables
 set_saftyio --setup safety I/O no matter what

  IF (Cell_IO_Done = TRUE) THEN -- setup has already been setup
      WriteLog('Workcell I/O Already Setup', FALSE)
    IF ExecSetupAgn('Workcell I/O') THEN -- ask user if they want to setup again
      Cell_IO_Done = FALSE
    ELSE
      WriteLog('Cell I/O already Complete', FALSE)
      WriteLog('GMCELLIO Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

    IF Reset_Cell THEN
      WriteLog('RESETTING Workcell I/O 1-800 !!!', FALSE)

      reset_io(1,800) -- clear all of the CELL interfaces

      WriteLog('Workcell I/O 1-800 reset is complete', FALSE)

      WriteLog('RESETTING Workcell Flags 1-100 !!!', FALSE)
    -- Setup the Flag to have all reserved comments
      FOR I = 1 to 100 DO -- set the Flag ports
        SET_PORT_CMT(IO_FLAG,I,'(Reserved)',gm_status)
      ENDFOR
      WriteLog('Workcell Flags 1-100 reset complete', FALSE)
    ENDIF

   WriteLog('  Start of Miscellanous Cell', FALSE)
     SetupMiscell -- This is the setup of Scattered code until a proper home is found
   WriteLog('  Miscellanous Cell Completed', FALSE)


   WriteLog('  Start Input&Outputs Setup', FALSE)
     Setup_in_out -- this will setup both Input and Outputs
   WriteLog('  Input&Outputs Completed', FALSE)

     Setup_Flags  -- This will setup all flags common across the board

WRITE TPERROR(CHR(cc_clear_win),'GMCELLIO Setup was Succesful')

   ErrsInCell.ErrorsIOCom =  ErrsInCell.ErrorsIOCom + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInCell.ErrorsIOCom -StrtinErs) > 0 THEN -- check for I/O setup errors
   POST_ERR(38000, 'gmcellio had '+int2str((ErrsInCell.ErrorsIOCom - StrtinErs))+' Errors',0, 0) --
   WriteLog('WorkCell I/O setup Program GMCELLIO had ' + int2str((ErrsInCell.ErrorsIOCom- StrtinErs))+' Errors', TRUE)
 ELSE
   WriteLog('WorkCell I/O setup Program GMCELLIO completed', FALSE)
   Cell_IO_Done = TRUE
 ENDIF

 WriteLog('', FALSE)

END set_cell_io
-----------------------------------------------------------------------------
BEGIN

END gmcellio
