-- -----------------------------------------------------------------------
--
--   MODULE:         GMVISNIO.KL
--   TITLE:          GMVISNIO PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Vision Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZMH,GMWIZVIS are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--         4.1        2017/01/25 marchaka	  Add comments for DO 503 and 504
--         4.1        2017/02/09 marchaka         Removed bodyshop I/O setup, this is done in gmcellio.
--                                                Updated light I/O setting for G4
--         4.1         2017/03/12 marchaka         Modifications to support ArcTool wizard
--         4.2        2018/02/23 marchaka         Load body shop I/O if ArcTool
--
--
--
--
--------------------------------------------------------------------------
PROGRAM GMVISNIO

%COMMENT = 'GM Visn I/O V4.2'

%NOLOCKGROUP
--%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE
%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

CONST
Version = '2018-02-23'
%INCLUDE gmcnstnt -- used for all of the constants for GM wizard

VAR

  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  gm_status : INTEGER -- used for builtins
  Visn_IO_Done IN SHADOW : BOOLEAN -- Used for tracking if program executed succesfully

  vis_inpt,
  vis_rmt,
  vis_rbt  IN CMOS: INTEGER --used for ENET slot 
  arc_optn      IN SHADOW FROM GMVARS :BOOLEAN  --ArcTool or LR ArcTool loaded

-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgvis  -- GM wizard variables for Vision Applications

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG
ROUTINE TURK_IN_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING) FROM gmenetsu
ROUTINE TURK_IO_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING) FROM gmenetsu
ROUTINE arc_loaded FROM gmmain1 --ArcTool option

%INCLUDE gmrdutil -- has all GM common wizard routine in it
-----------------------------------------------------------------------------
ROUTINE glbl_vis_io
-- PURPOSE: Load vision I/O that is common to all shops
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
  
  SELECT VisSys_Type OF
    CASE(vis_fss, vis_fms, vis_guid):
      SET_PORT_CMT(IO_DOUT,503,  'PrcpUserDef1',gm_status)  
      SET_PORT_CMT(IO_DOUT,504,  'PrcpUserDef2',gm_status)
    ELSE:
  ENDSELECT 

END glbl_vis_io
-----------------------------------------------------------------------------
ROUTINE init_BS_Vio
-- PURPOSE: Load vision I/O that is unique to Body Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
 writeLog('  Loading Vision I/O for Body Shop', FALSE)

-- Load Body Shop Templates
-- Cell I/O Inputs
  

-- Cell I/O Ouputs   


 writeLog('  Body Shop Vision I/O loaded', FALSE)

END init_BS_Vio
-----------------------------------------------------------------------------
ROUTINE init_Prs_Vio
-- PURPOSE: Load vision I/O that is unique to Press Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

writeLog('  Loading Vision I/O for Press Shop', FALSE)

writeLog('  Press Shop Vision I/O loaded', FALSE)

END init_Prs_Vio
-----------------------------------------------------------------------------
ROUTINE init_Pwr_Vio
-- PURPOSE: Load vision I/O that is unique to Powertrain Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
 writeLog('  Loading Vision I/O for Powertrain', FALSE)

 writeLog('  Powertrain Vision I/O loaded', FALSE)

END init_Pwr_Vio
-----------------------------------------------------------------------------
ROUTINE init_Pnt_Vio
-- PURPOSE: Load vision I/O that is unique to Paint Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

 writeLog('  Loading Vision I/O for Paint Shop', FALSE)

 writeLog('  Paint Shop Vision I/O loaded', FALSE)

END init_Pnt_Vio
-----------------------------------------------------------------------------
ROUTINE InitRmtLghts
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN
       writeLog('  Setting Up Remote Lights I/O for Vision', FALSE)

      SET_PORT_ASG(IO_DIN,881,VisnCommType,vis_inpt,IO_DIN,17,-16,gm_status)
        IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
          POST_ERR(38000, 'Rack '+int2Str(VisnCommType)+' Slot '+int2str(vis_inpt)+' Inputs Setup FAILED', gm_status, 0) --
          ErrsInVision.ErrorsIOCom = ErrsInVision.ErrorsIOCom + 1
          writeLog('Configuring Remote Lights for Slot ' +int2str(vis_inpt)+' Inputs Failed Vision', TRUE)
        ELSE -- Remote Lights
          SET_PORT_CMT(IO_DIN,881,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,882,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,883,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,884,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,885,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,886,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,887,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,888,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,889,  'Search Sen1 NO',gm_status)
          SET_PORT_CMT(IO_DIN,890,  'Search Sen1 NC',gm_status)
          SET_PORT_CMT(IO_DIN,891,  'Search Sen2 NO',gm_status)
          SET_PORT_CMT(IO_DIN,892,  'Search Sen2 NC',gm_status)
          SET_PORT_CMT(IO_DIN,893,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,894,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,895,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,896,  'Reserved iRVis',gm_status)
          TURK_IN_EIP(vis_inpt, 'VIS LGHT')
          writeLog('  Configuring Remote Vision Lights for Slot '+int2str(vis_inpt)+' Inputs Complete', FALSE)
        ENDIF

      SET_PORT_ASG(IO_DOUT,961,VisnCommType,vis_rmt,IO_DOUT,17,-8,gm_status)
        IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
          POST_ERR(38000, 'Rack '+int2Str(VisnCommType)+' Slot '+int2str(vis_rmt)+' Outputs Setup FAILED', gm_status, 0) --
          ErrsInVision.ErrorsIOCom = ErrsInVision.ErrorsIOCom + 1
          writeLog('Configuring Remote Lights for Slot '+int2str(vis_rmt)+' Outputs Failed Vision', TRUE)
          RETURN
        ELSE
          SET_PORT_CMT(IO_DOUT,961,  'Remote Light1',gm_status)
          SET_PORT_CMT(IO_DOUT,962,  'Remote Light2',gm_status)
          SET_PORT_CMT(IO_DOUT,963,  'Remote Light3',gm_status)
          SET_PORT_CMT(IO_DOUT,964,  'Remote Light4',gm_status)
          SET_PORT_CMT(IO_DOUT,965,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DOUT,966,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DOUT,967,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DOUT,968,  'Reserved iRVis',gm_status)
          TURK_IO_EIP(vis_rmt, 'VIS RMT')
          writeLog('  Configuring Remote Vision Lights for Slot '+int2str(vis_rmt)+' Outputs Complete', FALSE)
        ENDIF

       writeLog('  Remote Lights I/O for Vision Completed', FALSE)

  RETURN
END InitRmtLghts
-----------------------------------------------------------------------------
ROUTINE InitRbtLghts
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN
       writeLog('  Setting Up Robot mounted Lights I/O for Vision', FALSE)

      SET_PORT_ASG(IO_DIN,881,VisnCommType,vis_inpt,IO_DIN,17,-16,gm_status)
        IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
          POST_ERR(38000, 'Rack '+int2Str(VisnCommType)+' Slot '+int2str(vis_inpt)+' Inputs Setup FAILED', gm_status, 0) --
          ErrsInVision.ErrorsIOCom = ErrsInVision.ErrorsIOCom + 1
          writeLog('Configuring Remote Lights for Slot ' +int2str(vis_inpt)+' Inputs Failed Vision', TRUE)
        ELSE -- Remote Lights
          SET_PORT_CMT(IO_DIN,881,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,882,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,883,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,884,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,885,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,886,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,887,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,888,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,889,  'Search Sen1 NO',gm_status)
          SET_PORT_CMT(IO_DIN,890,  'Search Sen1 NC',gm_status)
          SET_PORT_CMT(IO_DIN,891,  'Search Sen2 NO',gm_status)
          SET_PORT_CMT(IO_DIN,892,  'Search Sen2 NC',gm_status)
          SET_PORT_CMT(IO_DIN,893,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,894,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,895,  'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DIN,896,  'Reserved iRVis',gm_status)
          TURK_IN_EIP(vis_inpt, 'VIS LGHT')
          writeLog('  Configuring Remote Vision Lights for Slot '+int2str(vis_inpt)+' Inputs Complete', FALSE)
        ENDIF

      SET_PORT_ASG(IO_DOUT,969,VisnCommType,vis_rbt,IO_DOUT,17,-8,gm_status)
        IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
          POST_ERR(38000, 'Rack '+int2Str(VisnCommType)+' Slot '+int2str(vis_rbt)+' Outputs Setup FAILED', gm_status, 0) --
          ErrsInVision.ErrorsIOCom = ErrsInVision.ErrorsIOCom + 1
          writeLog('Configuring Robot Lights for Slot '+int2str(vis_rbt)+' Outputs Failed Vision', TRUE)
        ELSE
          SET_PORT_CMT(IO_DOUT,969, 'EOAT Light1',gm_status)
          SET_PORT_CMT(IO_DOUT,970, 'EOAT Light2',gm_status)
          SET_PORT_CMT(IO_DOUT,971, 'EOAT Light3',gm_status)
          SET_PORT_CMT(IO_DOUT,972, 'EOAT Light4',gm_status)
          SET_PORT_CMT(IO_DOUT,973, 'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DOUT,974, 'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DOUT,975, 'Reserved iRVis',gm_status)
          SET_PORT_CMT(IO_DOUT,976, 'Reserved iRVis',gm_status)
          TURK_IO_EIP(vis_rbt, 'VIS RBT')
          writeLog('  Configuring Robot Vision Lights for Slot '+int2str(vis_rbt)+' Outputs Complete', FALSE)
        ENDIF

       writeLog('  Robot mounted Lights I/O for Vision Completed', FALSE)

END InitRbtLghts
-----------------------------------------------------------------------------
ROUTINE initVSN_IO
-- PURPOSE: to initialize Vision Programs associated with Material Handling setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

IF UNINIT(arc_optn) THEN --ArcTool
  arc_loaded
ENDIF

IF UNINIT(VisnCommType) THEN --set hook for multiple communications
  VisnCommType = Ethernet -- set it to 89
ENDIF

IF UNINIT(vis_inpt) THEN
  vis_inpt = 53  --ENET slot 53
ENDIF

IF UNINIT(vis_rmt) THEN
  vis_rmt = 41 --ENET slot 41
ENDIF

IF UNINIT(vis_rbt) THEN
  vis_rbt = 42 --ENET slot 42
ENDIF

  -- Lighting I/O Mapping

  SELECT VisLghtType OF
    CASE(1):-- Remote Lights
        InitRmtLghts -- Setup the remote lights
    CASE(2): -- Robot Mounted
        InitRbtLghts -- Setup the Robot Mounted lights lights
    CASE(3): -- Both Remote Lights & Robot Mounted
        InitRmtLghts -- Setup the remote lights
        InitRbtLghts -- Setup the Robot Mounted lights lights
    CASE(4): -- No Lights
       writeLog('No vision Lights Selected by User ', FALSE)
    ELSE:
  ENDSELECT

--Vision I/O setup for all shops
  glbl_vis_io

IF (arc_optn = FALSE) THEN --SpotTool

  SELECT mfg_area OF -- launch the Display Setup set by wizard or load feature
    CASE(mfg_area_bs):  --Body Shop
        init_BS_VIO
    CASE(mfg_area_ps):  --Press Shop
        init_Prs_VIO
    CASE(mfg_area_pt):  --Powertrain
        init_Pwr_VIO
    CASE(mfg_area_pn):  --Paint Shop
        init_Pnt_VIO
  ELSE:
    POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in initVSN_PRGS routine in GMVISPRG', 0, 0) --
    shop_str = 'Unknown'
  ENDSELECT

ELSE --ArcTool

  init_BS_VIO  --use body shop until GM gives direction

ENDIF --SpotTool

END initVSN_IO
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN
Current_Ver = Version -- Set the version for reference
-- Check these here instead of a routine so can return to calling routine
IF (arc_optn = FALSE) THEN --SpotTool
  IF UNINIT(mfg_area) THEN
    POST_ERR(38000, 'MFG_AREA not setup in GMVISNIO program', 0, 0) --
    RETURN
  ENDIF
ENDIF --SpotTool
IF UNINIT(Use_Vision) THEN
  POST_ERR(38000, 'Use_Vision not setup in GMVISNIO program', 0, 0) --
  RETURN
ENDIF
IF UNINIT(ErrsInVision.ErrorsIOCom) THEN
  ErrsInVision.ErrorsIOCom = 0
ENDIF
IF UNINIT(Visn_IO_Done) THEN
  Visn_IO_Done = FALSE
ENDIF

StrtinErs = ErrsInVision.ErrorsIOCom -- grab current error count
ClrUtltyErrs -- Clear all error in utility program to be used when done

WriteLog('  Starting the Vision I/O setup Program', FALSE)

ErrsInVision.ErrorsIOCom = 0 -- reset the errors

  IF (Visn_IO_Done = TRUE) THEN -- setup has already been setup
      WriteLog('  Vision I/O Already Setup', FALSE)
    IF ExecSetupAgn('Vision I/O') THEN -- ask user if they want to setup again
      Visn_IO_Done = FALSE
    ELSE
      WriteLog('  Vision I/O already Complete', FALSE)
      WriteLog('  GMVISNIO Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  IF (Use_Vision) THEN
     initVSN_IO -- setup the vision I/O
  ELSE
    WriteLog('  USE_VISION is FALSE in GMVISNIO Program', TRUE)
  ENDIF

 ErrsInVision.ErrorsIOCom =  ErrsInVision.ErrorsIOCom + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInVision.ErrorsIOCom -StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('  Vision I/O setup Program GMMHGRIO had ' + int2str((ErrsInVision.ErrorsIOCom- StrtinErs))+' while executing', TRUE)
 ELSE
   WriteLog('  Vision I/O setup Program completed', FALSE)
   Visn_IO_Done = TRUE
 ENDIF

  WriteLog('',FALSE)

END GMVISNIO
