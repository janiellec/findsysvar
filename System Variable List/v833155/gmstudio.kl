-- -----------------------------------------------------------------------
--
--   MODULE:         GMSTUDIO.KL
--   TITLE:          GMSTUDIO PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Stud Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the I/O file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--         2016/06/13 marchaka Cleaned up program to match G4 programming standards
--         2016/07/25 marchaka Fix mapping of gun ready and backup  head on spot config menu
--         2016/10/12 marchaka Fix do_probyp_i mapping.  Add process 2 logic.
--         2016/10/20 marchaka Add wizlog logging function.
--         2016/11/12 marchaka Update I/O and interconnects for process 2.
--         2016/11/15 marchaka Fixed stud head present gun 1 and 2 for process 2.
--             V4.1   2017/02/05 marchaka         MOdify prompts for wizard rerun.
--             V4.2   2020/02/17 marchaka        Modify single pedestal dual gun head I/O assignments
--                                               per GM's request.
--             V4.2   2020/05/15 marchaka        Fix issue where DI 1035-1038 are not commented for three
--                                               pedestal stud gun configuration
--
--
--------------------------------------------------------------------------
PROGRAM GMSTUDIO

%COMMENT = 'GM StudI/O V4.2'
%PRIORITY = 50
%ALPHABETIZE

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%ENVIRONMENT iosetup -- Need for teh SET_PORT builtins
--%ENVIRONMENT SLDEF
%ENVIRONMENT swgdef
%ENVIRONMENT sgdef1
%ENVIRONMENT sysdef

%INCLUDE KLIOTYPS  -- need for the constant declared for IO_DIN/IO_DOUT
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants

%INCLUDE gmevrs4io -- GM variables
%INCLUDE gm_var    -- GM variables
%INCLUDE gmcfgbdy  -- GM wizard variables for body shop applications
%INCLUDE gmcfgstd  -- GM wizard variables for Stud Applications

%INCLUDE gmcfgcel  -- has the workcell variable setting for configuration   -- Reset_Cell = FALSE
%INCLUDE gmcfgerr  -- required for the configuration for GM error counting and logging
%INCLUDE gmcfgtlc  -- GM tool change variables for configuration

CONST
Version = '2020-05-15'
%INCLUDE gmcnstnt  -- Constant file for GM


VAR
Num, i,gm_status  :INTEGER -- Used for Temp vars

--StudnsrSetup IN SHADOW : ARRAY[Max_Stud_Eq] OF BOOLEAN -- indicates if the application has been setup before

stud_1_slot,
stud_2_slot    IN CMOS: INTEGER -- used for which Node or Slot the Equiptment will use Def.=Ethernet

  psve               : INTEGER

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  StudIO_Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup Mh I/O at least first time

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE klrdutil
%INCLUDE gmrdutil -- has all GM common wizard routine in it

ROUTINE ET_Stud_EIP(P_Con_Num:INTEGER;p_Con_Name:STRING;P_host_ip:STRING) FROM gmenetsu
ROUTINE TC_Stnd1Sngl FROM gmtlchio
ROUTINE TC_Stnd2Sngl FROM gmtlchio
ROUTINE TC_Stnd1Dual FROM gmtlchio
ROUTINE Chk_TC_Init FROM gmtlchio
ROUTINE load_tolchg FROM gmtlchio

-----------------------------------------------------------------------------
ROUTINE ChkStudInit
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(StudIO_Setup) THEN
    StudIO_Setup = FALSE
  ENDIF

  -- Check Common application variable used in the program to be setup
  IF UNINIT(StudCommType) THEN --set hook for multiple communications
    StudCommType = Ethernet -- set it to 89
  ENDIF
  IF UNINIT(numstudctrl) THEN
    numstudctrl = 0
  ENDIF
  IF UNINIT(Reset_Cell) THEN
    Reset_Cell = FALSE
  ENDIF
  IF UNINIT(UseToolChngr) THEN
    UseToolChngr = FALSE
  ENDIF

  -- Check variable associated with stud #1
  IF UNINIT(StudSetup[1]) THEN
    StudSetup[1] = FALSE
  ENDIF
  IF UNINIT(bshop_proc1) THEN
    bshop_proc1 = 0
  ENDIF
  IF UNINIT(stud_1_slot) THEN
    stud_1_slot = 6
  ENDIF
  IF UNINIT(stud1_slide) THEN
    stud1_slide = 0
  ENDIF

  -- Check variable associated with stud #2
  IF UNINIT(StudSetup[2]) THEN
    StudSetup[2] = FALSE
  ENDIF
  IF UNINIT(bshop_proc2) THEN
    bshop_proc2 = 0
  ENDIF
  IF UNINIT(stud_2_slot) THEN
    stud_2_slot = 6
  ENDIF
  IF UNINIT(stud2_slide) THEN
    stud2_slide = 0
  ENDIF


END ChkStudInit
-----------------------------------------------------------------------------
ROUTINE stud_io_p1
-- PURPOSE: to setup and configure process 1 stud I/O
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN

--  IF StudSetup[1] = TRUE THEN -- Stud I/O has already been setup
--    WRITE TPERROR(CHR(cc_clear_win),'Stud #1 Already Setup')
--      IF NOT ExecSetupAgn('Stud#1') THEN -- ask user if they want to setup again
--        RETURN
--      ENDIF
--  ENDIF

  IF (bshop_proc1 = studappl) THEN  --Process 1 is a stud application

  -- Controller#1 INPUTS set the rack lenght so TP display is all inclusive of the 64 bits
  SET_PORT_ASG(io_din,1025,StudCommType, stud_1_Slot,io_din,1,  -32, gm_status)
  IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
    POST_ERR(38000, 'Rack '+int2Str(StudCommType)+' Slot ' +Int2str(stud_1_slot)+' Setup FAILED', gm_status, 0) --
    RETURN  -- Return, cant set this  leave so user will know not correct, probably wont work anyway
  ENDIF

  -- Controller#1 OUTPUTS set the rack lenght so TP display is all inclusive of the 64 bits
  SET_PORT_ASG(io_dout,1025,StudCommType, stud_1_Slot,io_dout,1,  -32, gm_status)
  IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
    POST_ERR(38000, 'Rack '+int2Str(StudCommType)+' Slot ' +Int2str(stud_1_slot)+' Setup FAILED', gm_status, 0) --
    RETURN  -- Return, cant set this  leave so user will know not correct, probably wont work anyway
  ENDIF

  -- PLC Inputs
  SET_PORT_CMT(IO_DIN,67, 'diP1Gun1Rdy',    gm_status)		-- Gun 1 Ready
  SET_PORT_CMT(IO_DIN,68, 'diP1Gun2Rdy',    gm_status)          -- Gun 2 Ready                                          
  SET_PORT_CMT(IO_DIN,69, 'diP1Gun3Rdy',    gm_status)          -- Gun 3 Ready
  SET_PORT_CMT(IO_DIN,70, 'diP1Gun4Rdy',    gm_status)          -- Gun 4 Ready
  
  -- PLC Outputs
  SET_PORT_CMT(IO_DOUT, 73, 'doP1CntNoAlt',  gm_status)                                     
  SET_PORT_CMT(IO_DOUT, 74, 'doP1Hd1NoFlt',  gm_status)                                           
  SET_PORT_CMT(IO_DOUT, 75, 'doP1Hd2NoFlt',  gm_status)                                         
  SET_PORT_CMT(IO_DOUT, 76, 'doP1Hd3NoFlt',  gm_status)                                           
  SET_PORT_CMT(IO_DOUT, 77, 'doP1Hd4NoFlt',  gm_status)

  --Single Pedestal with Dual Guns, Three Pedestal Guns, Four Pedestal Guns
  IF ((stud1_app = stud_spdg) OR (stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN 
    SET_PORT_CMT(IO_DOUT, 137, 'doP2CntNoAlt',  gm_status)
  ENDIF  --Single Pedestal with Dual Guns, Three Pedestal Guns, Four Pedestal Guns

  -- Stud Controller Inputs
  SET_PORT_CMT(IO_DIN,1025,'diST1NoFaultHd1',gm_status)  
  SET_PORT_CMT(IO_DIN,1026,'diST1WeldComp1',gm_status)		-- Weld complete (GM-Head Finish Command)
  SET_PORT_CMT(IO_DIN,1027,'diST1InProg1',gm_status)      	-- Weld in-process 
  SET_PORT_CMT(IO_DIN,1028,'diST1HdBackHd1',gm_status)              
  SET_PORT_CMT(IO_DIN,1030,'diST1NoFaultHd2',gm_status)   	-- Weld cntrl fault on gun #2
  SET_PORT_CMT(IO_DIN,1031,'diST1WeldComp2',gm_status)    	-- Weld complete (GM-Head Finish Command)
  SET_PORT_CMT(IO_DIN,1032,'diST1InProg2',gm_status)      	-- Weld in-process 
  SET_PORT_CMT(IO_DIN,1033,'diST1HdBackHd2',gm_status)
  SET_PORT_CMT(IO_DIN,1050,'diST1WeldMode',gm_status)
  SET_PORT_CMT(IO_DIN,1051,'diST1StudLow',gm_status)      	-- Stud Feeder Low
  SET_PORT_CMT(IO_DIN,1052,'diST1NoAlert',gm_status)      	-- NO Alert
  SET_PORT_CMT(IO_DIN,1053,'diST1InTol',gm_status)        	-- Suspect Weld (GM - Out of Tolerance)

  --Single Pedestal with Dual Guns, Three Pedestal Guns, Four Pedestal Guns  
  IF ((stud1_app = stud_spdg) OR (stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN
    SET_PORT_CMT(IO_DIN,1035,'diST1NoFaultHd3',gm_status) 
    SET_PORT_CMT(IO_DIN,1036,'diST1WeldComp3',gm_status)      	-- Weld complete (GM-Head Finish Command)
    SET_PORT_CMT(IO_DIN,1037,'diST1InProg3',gm_status)        	-- Weld in-process
    SET_PORT_CMT(IO_DIN,1038,'diST1HdBackHd3',gm_status)
    SET_PORT_CMT(IO_DIN,1040,'diST1NoFaultHd4',gm_status)   	-- Weld cntrl fault on gun #4  
    SET_PORT_CMT(IO_DIN,1041,'diST1WeldComp4',gm_status)    	-- Weld complete (GM-Head Finish Command)
    SET_PORT_CMT(IO_DIN,1042,'diST1InProg4',gm_status)      	-- Weld in-process 
    SET_PORT_CMT(IO_DIN,1043,'diST1HdBackHd4',gm_status)
  ENDIF  -- Single Pedestal with Dual Guns, Three Pedestal Guns, Four Pedestal Guns

  -- Stud Controller Outputs
  SET_PORT_CMT(IO_DOUT,1025,'doST1CycleHd1',gm_status)     	-- Start weld gun/head #2
  SET_PORT_CMT(IO_DOUT,1026,'doST1CycleHd2',gm_status)     	-- Start weld gun/head #2
  SET_PORT_CMT(IO_DOUT,1030,'doST1ManAdvHd1',gm_status)     
  SET_PORT_CMT(IO_DOUT,1031,'doST1ManAdvHd2',gm_status)
  SET_PORT_CMT(IO_DOUT,1035,'doST1Sched1',gm_status)        	-- Stud Weld schedule 1
  SET_PORT_CMT(IO_DOUT,1036,'doST1Sched2',gm_status)        	-- Stud Weld schedule 2
  SET_PORT_CMT(IO_DOUT,1037,'doST1Sched4',gm_status)        	-- Stud Weld schedule 4
  SET_PORT_CMT(IO_DOUT,1038,'doST1Sched8',gm_status)        	-- Stud Weld schedule 8
  SET_PORT_CMT(IO_DOUT,1039,'doST1Sched16',gm_status)       	-- Stud Weld schedule 16
  SET_PORT_CMT(IO_DOUT,1040,'doST1Sched32',gm_status)       	-- Stud Weld schedule 23
  SET_PORT_CMT(IO_DOUT,1042,'doST1FaultRes',gm_status)           
  SET_PORT_CMT(IO_DOUT,1044,'doST1WeldMode',gm_status)      	-- Mode Select 1      
  SET_PORT_CMT(IO_DOUT,1045,'doST1PartMode',gm_status)      	-- Mode Select 2

 --Single Pedestal with Dual Guns, Three Pedestal Guns, Four Pedestal Guns
  IF ((stud1_app = stud_spdg) OR (stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN 
    SET_PORT_CMT(IO_DOUT,1027,'doST1CycleHd3',gm_status)      	-- Start weld gun/head #3
    SET_PORT_CMT(IO_DOUT,1028,'doST1CycleHd4',gm_status)    	-- Start weld gun/head #4
    SET_PORT_CMT(IO_DOUT,1032,'doST1ManAdvHd3',gm_status) 
    SET_PORT_CMT(IO_DOUT,1033,'doST1ManAdvHd4',gm_status)     
  ENDIF  --Single Pedestal with Dual Guns, Three Pedestal Guns, Four Pedestal Guns

  -- Studwelding Outputs Weld Controller 1
  SET_PORT_ASG(IO_GPOUT,22, StudCommType,stud_1_Slot,IO_DOUT,11,-6,gm_status)     -- Weld Schedule
  SET_PORT_CMT(IO_GPOUT,22,'Stud Sched Cnt1',gm_status)  

  -- Tool Change Nest IO
   IF ((stud1_app = stud_rhg) AND (stud1_backup = wizans_yes)) THEN --tool nest slide used

       Chk_TC_Init            --make sure TC vars are initialized
       load_tolchg           --setup tool changer

       SELECT stud1_slide OF
         CASE(stud_1gunsld):  --single gun on slide
           TC_Stnd1Sngl
           TC_Stnd2Sngl
         CASE(stud_2gunsld):  --two guns on single slide
           TC_Stnd1Dual
         ELSE:
       ENDSELECT
    ENDIF
    
  IF (StudCommType = Ethernet) THEN
    ET_Stud_EIP(stud_1_slot,'STUD1','')
  ENDIF

  ENDIF

END stud_io_p1

-----------------------------------------------------------------------------
ROUTINE stud_io_p2
-- PURPOSE: to setup and configure process 2 stud I/O
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (bshop_proc2 = studappl) THEN  --Process 2 is a stud application
  
    -- Controller#2 INPUTS set the rack lenght so TP display is all inclusive of the 32 bits
    SET_PORT_ASG(io_din,1153,StudCommType, stud_2_Slot,io_din,1,  -32, gm_status)
    IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
      POST_ERR(38000, 'Rack '+int2Str(StudCommType)+' Slot ' +Int2str(stud_2_slot)+' Setup FAILED', gm_status, 0) --
      RETURN  -- Return, cant set this  leave so user will know not correct, probably wont work anyway
    ENDIF

    -- Controller#1 OUTPUTS set the rack lenght so TP display is all inclusive of the 32 bits
    SET_PORT_ASG(io_dout,1153,StudCommType, stud_2_Slot,io_dout,1,  -32, gm_status)
    IF (gm_status<>0) AND (gm_Status <> 13149) THEN --PRIO-149 Invalid Assignment Recorded
      POST_ERR(38000, 'Rack '+int2Str(StudCommType)+' Slot ' +Int2str(stud_2_slot)+' Setup FAILED', gm_status, 0) --
      RETURN  -- Return, cant set this  leave so user will know not correct, probably wont work anyway
    ENDIF

    --PLC Inputs
    SET_PORT_CMT(IO_DIN,129, 'Process2OnReq', gm_status)
    SET_PORT_CMT(IO_DIN,130, 'Proc2BypassReq', gm_status)
    SET_PORT_CMT(IO_DIN,131, 'diP2Gun1Rdy',    gm_status)	-- Gun 1 Ready
    SET_PORT_CMT(IO_DIN,132, 'diP2Gun2Rdy',    gm_status)	-- Gun 2 Ready   
    SET_PORT_CMT(IO_DIN,133, 'diP2Gun3Rdy',    gm_status)      	-- Gun 3 Ready 
    SET_PORT_CMT(IO_DIN,134, 'diP2Gun4Rdy',    gm_status)       -- Gun 4 Ready

    --PLC Outputs
    SET_PORT_CMT(IO_DOUT, 137, 'doP2CntNoAlt',  gm_status)                                    
    SET_PORT_CMT(IO_DOUT, 138, 'doP2Hd1NoFlt',  gm_status)                                           
    SET_PORT_CMT(IO_DOUT, 139, 'doP2Hd2NoFlt',  gm_status)                                          
    SET_PORT_CMT(IO_DOUT, 140, 'doP2Hd3NoFlt',  gm_status)                                          
    SET_PORT_CMT(IO_DOUT, 141, 'doP2Hd4NoFlt',  gm_status)

    -- Stud Controller Inputs
    SET_PORT_CMT(IO_DIN,1153,'diST2NoFaultHd1',gm_status)  
    SET_PORT_CMT(IO_DIN,1154,'diST2WeldComp1',gm_status)		-- Weld complete (GM-Head Finish Command)
    SET_PORT_CMT(IO_DIN,1155,'diST2InProg1',gm_status)      	-- Weld in-process 
    SET_PORT_CMT(IO_DIN,1156,'diST2HdBackHd1',gm_status)              
    SET_PORT_CMT(IO_DIN,1158,'diST2NoFaultHd2',gm_status)   	-- Weld cntrl fault on gun #2
    SET_PORT_CMT(IO_DIN,1159,'diST2WeldComp2',gm_status)    	-- Weld complete (GM-Head Finish Command)
    SET_PORT_CMT(IO_DIN,1160,'diST2InProg2',gm_status)      	-- Weld in-process 
    SET_PORT_CMT(IO_DIN,1161,'diST2HdBackHd2',gm_status)
    SET_PORT_CMT(IO_DIN,1178,'diST2WeldMode',gm_status)
    SET_PORT_CMT(IO_DIN,1179,'diST2StudLow',gm_status)      	-- Stud Feeder Low
    SET_PORT_CMT(IO_DIN,1180,'diST2NoAlert',gm_status)      	-- NO Alert
    SET_PORT_CMT(IO_DIN,1181,'diST2InTol',gm_status)        	-- Suspect Weld (GM - Out of Tolerance)

    -- Stud Controller Outputs
    SET_PORT_CMT(IO_DOUT,1153,'doST2CycleHd1',gm_status)     	-- Start weld gun/head #2
    SET_PORT_CMT(IO_DOUT,1154,'doST2CycleHd2',gm_status)     	-- Start weld gun/head #2
    SET_PORT_CMT(IO_DOUT,1158,'doST2ManAdvHd1',gm_status)     
    SET_PORT_CMT(IO_DOUT,1159,'doST2ManAdvHd2',gm_status)
    SET_PORT_CMT(IO_DOUT,1163,'doST2Sched1',gm_status)        	-- Stud Weld schedule 1
    SET_PORT_CMT(IO_DOUT,1164,'doST2Sched2',gm_status)        	-- Stud Weld schedule 2
    SET_PORT_CMT(IO_DOUT,1165,'doST2Sched4',gm_status)        	-- Stud Weld schedule 4
    SET_PORT_CMT(IO_DOUT,1166,'doST2Sched8',gm_status)        	-- Stud Weld schedule 8
    SET_PORT_CMT(IO_DOUT,1167,'doST2Sched16',gm_status)       	-- Stud Weld schedule 16
    SET_PORT_CMT(IO_DOUT,1168,'doST2Sched32',gm_status)       	-- Stud Weld schedule 23
    SET_PORT_CMT(IO_DOUT,1170,'doST2FaultRes',gm_status)           
    SET_PORT_CMT(IO_DOUT,1172,'doST2WeldMode',gm_status)      	-- Mode Select 1      
    SET_PORT_CMT(IO_DOUT,1173,'doST2PartMode',gm_status)      	-- Mode Select 2

    -- Studwelding Outputs Weld Controller 1
    SET_PORT_ASG(IO_GPOUT,22, StudCommType,stud_2_Slot,IO_DOUT,11,-6,gm_status)     -- Weld Schedule
    SET_PORT_CMT(IO_GPOUT,22,'Stud Sched Cnt2',gm_status)  
    
    IF (StudCommType = Ethernet) THEN
      ET_Stud_EIP(stud_2_slot,'STUD2','')
    ENDIF
           
  ENDIF  --process 2 is a stud application

END stud_io_p2

-----------------------------------------------------------------------------
ROUTINE setstudiovr
-- PURPOSE: to setup and configure stud I/O variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  --Process 1 is a stud app
  IF (bshop_proc1 = studappl) THEN  

    --Cell Input Menu
    di_gnrdy_t[1] = 1         -- Gun1 Ready
    di_gnrdy_i[1] = 67        -- Gun1 Ready
    di_gnrdy_t[2] = 1         -- Gun2 Ready
    di_gnrdy_i[2] = 68        -- Gun2 Ready
    di_gnrdy_t[3] = 1         -- Gun3 Ready
    di_gnrdy_i[3] = 69        -- Gun3 Ready
    di_gnrdy_t[4] = 1         -- Gun4 Ready
    di_gnrdy_i[4] = 70        -- Gun4 Ready
 
    --Cell Output Menu
    do_ucfg1_t = 2	    -- Head1 No Fault  
    do_ucfg1_i = 74 	    -- Head1 No Fault
    do_ucfg2_t = 2	    -- Head2 No Fault
    do_ucfg2_i = 75	    -- Head2 No Fault
    do_ucfg3_t = 2	    -- Head3 No Fault
    do_ucfg3_i = 76	    -- Head3 No Fault
    do_ucfg4_t = 2	    -- Head4 No Fault
    do_ucfg4_i = 77	    -- Head4 No Fault

    studctrl[1].stud_gun[1].di_comp1 = 1026	--weld complete head 1  
    studctrl[1].stud_gun[1].di_comp2 = 1031	--weld coplete head 2
    studctrl[1].stud_gun[1].di_comp3 = 1036	--weld complete head 3
    studctrl[1].stud_gun[1].di_comp4 = 1041	--weld complete head 4
    studctrl[1].stud_gun[1].di_feed = 1051	--stud low
    studctrl[1].stud_gun[1].di_iotol = 1053	--in tolerance
    studctrl[1].stud_gun[1].di_minalm = 1052	--no alert
    studctrl[1].stud_gun[1].di_wcflt1 = 1025	--no fault head 1
    studctrl[1].stud_gun[1].di_wcflt2 =  1030	--no fault head 2
    studctrl[1].stud_gun[1].di_wcflt3 = 1035    --no fault head 3
    studctrl[1].stud_gun[1].di_wcflt4 = 1040    --no fault head 4
    studctrl[1].stud_gun[1].di_wdenbl = 1050	--weld mode on
    studctrl[1].stud_gun[1].di_wdinpr1 = 1027   --weld in prog head 1
    studctrl[1].stud_gun[1].di_wdinpr2 = 1032   --weld in prog head 2
    studctrl[1].stud_gun[1].di_wdinpr3 = 1037   --weld in prog head 3
    studctrl[1].stud_gun[1].di_wdinpr4 = 1042   --weld in prog head 4
    studctrl[1].stud_gun[1].di_whret1 = 1028	--head back head 1
    studctrl[1].stud_gun[1].di_whret2 = 1033	--head back head 2
    studctrl[1].stud_gun[1].di_whret3 = 1038    --head back head 3
    studctrl[1].stud_gun[1].di_whret4 = 1043    --head back head 4
    studctrl[1].stud_gun[1].do_mdsone = 1044	--weld mode 
    studctrl[1].stud_gun[1].do_mdstwo = 1045    --part mode
    studctrl[1].stud_gun[1].do_refeed1 = 1030	--manual adv head 1
    studctrl[1].stud_gun[1].do_refeed2 = 1031   --manual adv head 2
    studctrl[1].stud_gun[1].do_refeed3 = 1032   --manual adv head 3
    studctrl[1].stud_gun[1].do_refeed4 = 1033   --manual adv head 4
    studctrl[1].stud_gun[1].do_rstrt = 1042     --reset fault
    studctrl[1].stud_gun[1].do_start1 = 1025	--initiate head 1
    studctrl[1].stud_gun[1].do_start2 = 1026    --initiate head 2
    studctrl[1].stud_gun[1].do_start3 = 1027    --initiate head 3
    studctrl[1].stud_gun[1].do_start4 = 1028    --initiate head 4
    studctrl[1].stud_gun[1].go_sched = 22       --schedule
  
    --Weld Inputs
    Set_I_sVar('$spotweldio[1].$di_comp1_i', studctrl[1].stud_gun[1].di_comp1)  -- Weld complete (GM-Head Finish Command)
    Set_I_sVar('$spotweldio[1].$di_feed1_i', studctrl[1].stud_gun[1].di_feed)
    Set_I_sVar('$spotweldio[1].$di_iotol_i', studctrl[1].stud_gun[1].di_iotol)
    Set_I_sVar('$spotweldio[1].$di_minalm_i', studctrl[1].stud_gun[1].di_minalm)
    Set_I_sVar('$spotweldio[1].$di_sauto_i', studctrl[1].stud_gun[1].di_wdenbl)   
    Set_I_sVar('$spotweldio[1].$di_wcflt_i', studctrl[1].stud_gun[1].di_wcflt1) 
    Set_I_sVar('$spotweldio[1].$di_wdenbl_i', studctrl[1].stud_gun[1].di_wdenbl)
    Set_I_sVar('$spotweldio[1].$di_wdinpr_i', studctrl[1].stud_gun[1].di_wdinpr1)

    --Weld Outputs
    Set_I_sVar('$spotweldio[1].$do_mdsone_i', studctrl[1].stud_gun[1].do_mdsone)  
    Set_I_sVar('$spotweldio[1].$do_mdstwo_i', studctrl[1].stud_gun[1].do_mdstwo) 
    Set_I_sVar('$spotweldio[1].$do_refeed_i[1]', studctrl[1].stud_gun[1].do_refeed1)  -- Refeed Head #1
    Set_I_sVar('$spotweldio[1].$do_rstrt_i', studctrl[1].stud_gun[1].do_rstrt)  -- Reset Faults
    Set_I_sVar('$spotweldio[1].$do_start1_i', studctrl[1].stud_gun[1].do_start1) -- Start weld gun/head #1

    Set_I_sVar('$spotweldio[1].$go_sched_i', studctrl[1].stud_gun[1].go_sched)

    --Spot Equipment Inputs
    Set_I_sVar('$spoteqio[1].$di_hdp_i[1]', 0)  -- System needs it?
    Set_I_sVar('$spoteqio[1].$di_whret_i[1]', studctrl[1].stud_gun[1].di_whret1)  -- Weld head retracted gun #1
   
    IF (stud1_backup = wizans_yes) THEN 

      IF (stud1_app <> stud_spdg) THEN  --if not single pedestal dual gun application
        --Weld Inputs
        Set_I_sVar('$spotweldio[1].$di_comp2_i',  studctrl[1].stud_gun[1].di_comp2)  -- Weld complete (GM-Head Finish Command)
        Set_I_sVar('$spotweldio[1].$di_wcflt2_i', studctrl[1].stud_gun[1].di_wcflt2) -- Weld cntrl fault on gun #2   
        Set_I_sVar('$spotweldio[1].$di_wdipr2_i', studctrl[1].stud_gun[1].di_wdinpr2)

        --Weld Outputs
        Set_I_sVar('$spotweldio[1].$do_refeed_i[2]', studctrl[1].stud_gun[1].do_refeed2) -- Refeed Head #2
        Set_I_sVar('$spotweldio[1].$do_start2_i', studctrl[1].stud_gun[1].do_start2)  -- Start weld gun/head #2

        --Spot Equipment Inputs
        Set_I_sVar('$spoteqio[1].$di_whret_i[2]', studctrl[1].stud_gun[1].di_whret2) -- Stud#1Hd back Hd 2

      ENDIF --if not single pedestal dual gun application

       IF (stud1_app = stud_rhg) THEN 

         Set_I_sVar('$spoteqio[1].$di_hdn_i[1]', 931)          -- Stud Hd 1 in nest (TC)
         Set_I_sVar('$spoteqio[1].$di_hdp_i[1]', 913)          -- Stud H1 Present (ToolNumber#1) (TC)
         Set_I_sVar('$spoteqio[1].$di_hdp_i[2]', 914)          -- Stud H2 Present (ToolNumber#2) (TC)
         Set_I_sVar('$spoteqio[1].$di_hdn_i[1]', 931)          -- Stud Hd 1 in nest (TC)
         Set_I_sVar('$spoteqio[1].$di_hdp_i[1]', 913)          -- Stud H1 Present (ToolNumber#1) (TC)
         Set_I_sVar('$spoteqio[1].$di_hdp_i[2]', 914)          -- Stud H2 Present (ToolNumber#2) (TC)
        
         IF (stud1_slide = stud_1gunsld) THEN 		       -- Single gun on a slide	       
           Set_I_sVar('$spoteqio[1].$di_hdn_i[2]', 935)        -- Stud head present gun #2 (TC)
         ENDIF
         IF (stud1_slide = stud_2gunsld) THEN                  -- Two guns on same slide
           Set_I_sVar('$spoteqio[1].$di_hdn_i[2]', 935)        -- Stud head present gun #2 (TC)
         ENDIF

       ELSE
         Set_I_sVar('$spoteqio[1].$di_hdn_i[1]', 68)            -- Stud head present gun #2
         Set_I_sVar('$spoteqio[1].$di_hdp_i[1]', 67)          	-- Stud head present gun #1
         Set_I_sVar('$spoteqio[1].$di_hdn_i[2]', 67)          	-- Stud head present gun #2
         Set_I_sVar('$spoteqio[1].$di_hdp_i[2]', 68)            -- Stud head present gun #1
       ENDIF-- tool changer
    ENDIF --backup head on gun 1
 
    -- Single Pedestal with Dual Guns
    IF (stud1_app = stud_spdg) THEN
 
      --Equipment 1 will always use gun 1 I/O no matter the configuration, so application setup above is okay
      --Equipment 2 will always use gun 2 I/O no matter the backup head configuration

      --Weld Inputs
      Set_I_sVar('$spotweldio[2].$di_comp1_i', studctrl[1].stud_gun[1].di_comp2)  -- Weld complete (GM-Head Finish Command)
      Set_I_sVar('$spotweldio[2].$di_feed1_i', studctrl[1].stud_gun[1].di_feed)
      Set_I_sVar('$spotweldio[2].$di_iotol_i', studctrl[1].stud_gun[1].di_iotol)
      Set_I_sVar('$spotweldio[2].$di_minalm_i', studctrl[1].stud_gun[1].di_minalm)
      Set_I_sVar('$spotweldio[2].$di_sauto_i', studctrl[1].stud_gun[1].di_wdenbl)
      Set_I_sVar('$spotweldio[2].$di_wcflt_i', studctrl[1].stud_gun[1].di_wcflt2)  --Head2
      Set_I_sVar('$spotweldio[2].$di_wdenbl_i', studctrl[1].stud_gun[1].di_wdenbl)
      Set_I_sVar('$spotweldio[2].$di_wdinpr_i', studctrl[1].stud_gun[1].di_wdinpr2)

      --Spot Equipment Inputs
      Set_I_sVar('$spoteqio[2].$di_whret_i[1]', studctrl[1].stud_gun[1].di_whret2) -- Stud#2Hd back Hd 2

      IF (stud1_backup = wizans_yes) THEN  --backup head for gun 1
        
        --Weld Inputs
        Set_I_sVar('$spotweldio[1].$di_comp2_i',  studctrl[1].stud_gun[1].di_comp3)  -- Weld complete (GM-Head Finish Command)
        Set_I_sVar('$spotweldio[1].$di_wcflt2_i', studctrl[1].stud_gun[1].di_wcflt3) -- Weld cntrl fault on gun #3  
        Set_I_sVar('$spotweldio[1].$di_wdipr2_i', studctrl[1].stud_gun[1].di_wdinpr3)

        --Spot Equipment Inputs
        --Backup head for equipment 1 will always use head 3
        Set_I_sVar('$spoteqio[1].$di_whret_i[2]', studctrl[1].stud_gun[1].di_whret3) -- Stud#1Hd back Hd 3

      ENDIF --backup head for gun 1
      
      IF (stud2_backup = wizans_yes) THEN --equipment 2 has a backup head
        IF (stud1_backup = wizans_no) THEN --equipment 1 is not using a backup head  

          --Weld Inputs                                     
          Set_I_sVar('$spotweldio[2].$di_comp2_i', studctrl[1].stud_gun[1].di_comp3)  -- Weld complete (GM-Head Finish Command)
          Set_I_sVar('$spotweldio[2].$di_wcflt2_i', studctrl[1].stud_gun[1].di_wcflt3) -- Weld cntrl fault on gun #3   
          Set_I_sVar('$spotweldio[2].$di_wdipr2_i', studctrl[1].stud_gun[1].di_wdinpr3)

          --Spot Equipment Inputs
          Set_I_sVar('$spoteqio[2].$di_whret_i[2]', studctrl[1].stud_gun[1].di_whret3)  -- Stud#1Hd back Hd 3

        ELSE -- equipment 1 is using a backup head

          --Weld Inputs
          Set_I_sVar('$spotweldio[2].$di_comp2_i', studctrl[1].stud_gun[1].di_comp4)  -- Weld complete (GM-Head Finish Command)
          Set_I_sVar('$spotweldio[2].$di_wcflt2_i', studctrl[1].stud_gun[1].di_wcflt4) -- Weld cntrl fault on gun #4   
          Set_I_sVar('$spotweldio[2].$di_wdipr2_i', studctrl[1].stud_gun[1].di_wdinpr4)

          --Spot Equipment Inputs
          Set_I_sVar('$spoteqio[2].$di_whret_i[2]', studctrl[1].stud_gun[1].di_whret4)  -- Stud#1Hd back Hd 4

        ENDIF --is equipment 1 using a backup head
      ENDIF--equipment 2 has a backup head         

      --Weld Outputs
      Set_I_sVar('$spotweldio[2].$do_mdsone_i', studctrl[1].stud_gun[1].do_mdsone)  
      Set_I_sVar('$spotweldio[2].$do_mdstwo_i', studctrl[1].stud_gun[1].do_mdstwo)  
      Set_I_sVar('$spotweldio[2].$do_refeed_i[1]', studctrl[1].stud_gun[1].do_refeed2) 
      Set_I_sVar('$spotweldio[2].$do_rstrt_i', studctrl[1].stud_gun[1].do_rstrt)  -- Reset Faults
      Set_I_sVar('$spotweldio[2].$do_start1_i', studctrl[1].stud_gun[1].do_start2)  -- Start weld gun/head #2

      Set_I_sVar('$spotweldio[2].$go_sched_i', studctrl[1].stud_gun[1].go_sched)

      IF (stud1_backup = wizans_yes) THEN  --backup head for gun 1
        
        --Weld Outputs
        --Backup head on equipment 1 will always be head 3
        Set_I_sVar('$spotweldio[1].$do_refeed_i[2]', studctrl[1].stud_gun[1].do_refeed3) -- Refeed Head #3
        Set_I_sVar('$spotweldio[1].$do_start2_i', studctrl[1].stud_gun[1].do_start3)  -- Start weld gun/head #3

      ENDIF --backup head for gun 1

      IF (stud2_backup = wizans_yes) THEN --equipment 2 has a backup head
        IF (stud1_backup = wizans_no) THEN --equipment 1 is not using a backup head
  
          --Weld Outputs
          Set_I_sVar('$spotweldio[2].$do_refeed_i[2]', studctrl[1].stud_gun[1].do_refeed3) -- Refeed Head #3
          Set_I_sVar('$spotweldio[2].$do_start2_i', studctrl[1].stud_gun[1].do_start3)  -- Start weld gun/head #3

        ELSE -- equipment 1 is using a backup head

          --Weld Outputs
          Set_I_sVar('$spotweldio[2].$do_refeed_i[2]', studctrl[1].stud_gun[1].do_refeed4) -- Refeed Head #4
          Set_I_sVar('$spotweldio[2].$do_start2_i', studctrl[1].stud_gun[1].do_start4)  -- Start weld gun/head #4

        ENDIF --is equipment 1 using a backup head
      ENDIF--equipment 2 has a backup head 

      -- Stud Equipment Inputs
      IF (stud1_backup = wizans_yes) THEN 
         Set_I_sVar('$spoteqio[1].$di_hdn_i[1]', 68)            -- Stud head present gun #2
         Set_I_sVar('$spoteqio[1].$di_hdp_i[1]', 67)          	-- Stud head present gun #1
         Set_I_sVar('$spoteqio[1].$di_hdn_i[2]', 67)          	-- Stud head present gun #2
         Set_I_sVar('$spoteqio[1].$di_hdp_i[2]', 68)            -- Stud head present gun #1
      ENDIF
    
      IF (stud2_backup = wizans_yes) THEN
        Set_I_sVar('$spoteqio[2].$di_hdn_i[1]', 70)  -- Stud head present gun #4
        Set_I_sVar('$spoteqio[2].$di_hdp_i[1]', 69)  -- Stud head present gun #3
        Set_I_sVar('$spoteqio[2].$di_hdn_i[2]', 69)  -- Head in nest
        Set_I_sVar('$spoteqio[2].$di_hdp_i[2]', 70)  -- Head in present
      ENDIF

    ENDIF  --Single Pedestal Gun with Dual Guns

   --Three Pedestal Guns, Four Pedestal Guns
   IF ((stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN 
     --Weld Inputs
     Set_I_sVar('$spotweldio[2].$di_comp1_i', studctrl[1].stud_gun[1].di_comp2)  -- Weld complete (GM-Head Finish Command)
     Set_I_sVar('$spotweldio[2].$di_feed1_i', studctrl[1].stud_gun[1].di_feed)
     Set_I_sVar('$spotweldio[2].$di_iotol_i', studctrl[1].stud_gun[1].di_iotol)
     Set_I_sVar('$spotweldio[2].$di_minalm_i', studctrl[1].stud_gun[1].di_minalm) 
     Set_I_sVar('$spotweldio[2].$di_sauto_i', studctrl[1].stud_gun[1].di_wdenbl)
     Set_I_sVar('$spotweldio[2].$di_wcflt_i', studctrl[1].stud_gun[1].di_wcflt2)  --Head2 
     Set_I_sVar('$spotweldio[2].$di_wdenbl_i', studctrl[1].stud_gun[1].di_wdenbl)     
     Set_I_sVar('$spotweldio[2].$di_wdinpr_i', studctrl[1].stud_gun[1].di_wdinpr2)

     Set_I_sVar('$spotweldio[3].$di_comp1_i', studctrl[1].stud_gun[1].di_comp3)  -- Weld complete (GM-Head Finish Command)                  
     Set_I_sVar('$spotweldio[3].$di_feed1_i', studctrl[1].stud_gun[1].di_feed)
     Set_I_sVar('$spotweldio[3].$di_iotol_i', studctrl[1].stud_gun[1].di_iotol)         
     Set_I_sVar('$spotweldio[3].$di_minalm_i', studctrl[1].stud_gun[1].di_minalm)
     Set_I_sVar('$spotweldio[3].$di_sauto_i', studctrl[1].stud_gun[1].di_wdenbl)
     Set_I_sVar('$spotweldio[3].$di_wcflt_i', studctrl[1].stud_gun[1].di_wcflt3) 
     Set_I_sVar('$spotweldio[3].$di_wdinpr_i', studctrl[1].stud_gun[1].di_wdinpr3)
     Set_I_sVar('$spotweldio[3].$di_wdenbl_i', studctrl[1].stud_gun[1].di_wdenbl) 

     --Weld Outputs
     Set_I_sVar('$spotweldio[2].$do_mdsone_i', studctrl[1].stud_gun[1].do_mdsone)  -- Start weld gun/head #2    
     Set_I_sVar('$spotweldio[2].$do_mdstwo_i', studctrl[1].stud_gun[1].do_mdstwo)  -- Start weld gun/head #2
     Set_I_sVar('$spotweldio[2].$do_refeed_i[1]', studctrl[1].stud_gun[1].do_refeed2) -- Refeed Head #2    
     Set_I_sVar('$spotweldio[2].$do_rstrt_i', studctrl[1].stud_gun[1].do_rstrt)  -- Reset Faults 
     Set_I_sVar('$spotweldio[2].$do_start1_i', studctrl[1].stud_gun[1].do_start2) -- Start weld gun/head #2         

     Set_I_sVar('$spotweldio[2].$go_sched_i', studctrl[1].stud_gun[1].go_sched)

     Set_I_sVar('$spotweldio[3].$do_mdsone_i', studctrl[1].stud_gun[1].do_mdsone)  -- Start weld gun/head #3     
     Set_I_sVar('$spotweldio[3].$do_mdstwo_i', studctrl[1].stud_gun[1].do_mdstwo)  -- Start weld gun/head #3
     Set_I_sVar('$spotweldio[3].$do_refeed_i[1]', studctrl[1].stud_gun[1].do_refeed3)  -- Refeed Head #3
     Set_I_sVar('$spotweldio[3].$do_rstrt_i', studctrl[1].stud_gun[1].do_rstrt)  -- Reset Faults 
     Set_I_sVar('$spotweldio[3].$do_start1_i', studctrl[1].stud_gun[1].do_start3)  -- Start weld gun/head #3

     Set_I_sVar('$spotweldio[3].$go_sched_i', studctrl[1].stud_gun[1].go_sched) 

     -- Stud Equipment Inputs
     Set_I_sVar('$spoteqio[2].$di_hdp_i[1]', 0)  --system will freak out without it?
     Set_I_sVar('$spoteqio[2].$di_whret_i[1]', studctrl[1].stud_gun[1].di_whret2)  -- Weld head retracted gun #2

     Set_I_sVar('$spoteqio[3].$di_hdp_i[1]', 0)  --system will freak out without it?
     Set_I_sVar('$spoteqio[3].$di_whret_i[1]', studctrl[1].stud_gun[1].di_whret3)  -- Weld head retracted gun #3
    
     do_procbyp_t[3] = 2	    -- Bypass Process 3
     do_procbyp_i[3] = 66	    -- Bypass Process 3
     do_procbyp_t[4] = 2	    -- Bypass Process 4
     do_procbyp_i[4] = 66	    -- Bypass Process 4

   ENDIF  --Three Pedestal Guns, Four Pedestal Guns

   --Four Pedestal Guns
   IF (stud1_app = stud_4pg) THEN
     -- Weld Inputs
     Set_I_sVar('$spotweldio[4].$di_comp1_i', studctrl[1].stud_gun[1].di_comp4)  -- Weld complete (GM-Head Finish Command)
     Set_I_sVar('$spotweldio[4].$di_feed1_i', studctrl[1].stud_gun[1].di_feed)
     Set_I_sVar('$spotweldio[4].$di_iotol_i', studctrl[1].stud_gun[1].di_iotol)
     Set_I_sVar('$spotweldio[4].$di_minalm_i', studctrl[1].stud_gun[1].di_minalm)
     Set_I_sVar('$spotweldio[4].$di_sauto_i', studctrl[1].stud_gun[1].di_wdenbl)
     Set_I_sVar('$spotweldio[4].$di_wcflt_i', studctrl[1].stud_gun[1].di_wcflt4)
     Set_I_sVar('$spotweldio[4].$di_wdenbl_i', studctrl[1].stud_gun[1].di_wdenbl)
     Set_I_sVar('$spotweldio[4].$di_wdinpr_i', studctrl[1].stud_gun[1].di_wdinpr4)   

     -- Weld Outputs
     Set_I_sVar('$spotweldio[4].$do_mdsone_i', studctrl[1].stud_gun[1].do_mdsone)  -- Start weld gun/head #4
     Set_I_sVar('$spotweldio[4].$do_mdstwo_i', studctrl[1].stud_gun[1].do_mdstwo)  -- Start weld gun/head #4
     Set_I_sVar('$spotweldio[4].$do_refeed_i[1]', studctrl[1].stud_gun[1].do_refeed4)  -- Refeed Head #4
     Set_I_sVar('$spotweldio[4].$do_rstrt_i', studctrl[1].stud_gun[1].do_rstrt)  -- Reset Faults
     Set_I_sVar('$spotweldio[4].$do_start1_i', studctrl[1].stud_gun[1].do_start4)  -- Start weld gun/head #4

     Set_I_sVar('$spotweldio[4].$go_sched_i', studctrl[1].stud_gun[1].go_sched)

     -- Equipment Inputs
     Set_I_sVar('$spoteqio[4].$di_hdp_i[1]', 0)  --need to set so system won't freak out? 
     Set_I_sVar('$spoteqio[4].$di_whret_i[1]', studctrl[1].stud_gun[1].di_whret4)  -- Weld head retracted gun #4 

     do_procbyp_t[3] = 2	    -- Bypass Process 3
     do_procbyp_i[3] = 66	    -- Bypass Process 3
     do_procbyp_t[4] = 2	    -- Bypass Process 4
     do_procbyp_i[4] = 66	    -- Bypass Process 4

   ENDIF --Four Pedestal Guns

  ENDIF  --Process 1 is a stud welder

  IF (bshop_proc2 = studappl) THEN  --Process 2 is a stud application                                  
 
    --PLC Inputs
    di_gnrdy_t[1] = 1         -- Gun 1 Ready
    di_gnrdy_i[1] = 131       -- Gun 1 Ready
    di_gnrdy_t[2] = 1         -- Gun 2 Ready
    di_gnrdy_i[2] = 132       -- Gun 2 Ready 
    di_gnrdy_t[3] = 1         -- Gun 3 Ready
    di_gnrdy_i[3] = 133       -- Gun 3 Ready 
    di_gnrdy_t[4] = 1         -- Gun 4 Ready
    di_gnrdy_i[4] = 134       -- Gun 4 Ready

    --PLC Outputs 
    DO_UCFG1_t = 2            -- Head 1 NOT Faulted
    DO_UCFG1_i = 138          -- Head 1 NOT Faulted                                 
    DO_UCFG2_t = 2            -- Head 2 NOT Faulted
    DO_UCFG2_i = 139          -- Head 2 NOT Faulted                                 
    DO_UCFG3_t = 2            -- Head 3 NOT Faulted
    DO_UCFG3_i = 140          -- Head 3 NOT Faulted                               
    DO_UCFG4_t = 2            -- Head 4 NOT Faulted
    DO_UCFG4_i = 141          -- Head 4 NOT Faulted                           

    studctrl[1].stud_gun[1].di_comp1 = 1154	--weld complete head 1  
    studctrl[1].stud_gun[1].di_comp2 = 1159	--weld coplete head 2
    studctrl[1].stud_gun[1].di_comp3 = 1164	--weld complete head 3
    studctrl[1].stud_gun[1].di_comp4 = 1169	--weld complete head 4
    studctrl[1].stud_gun[1].di_feed = 1179	--stud low
    studctrl[1].stud_gun[1].di_iotol = 1181	--in tolerance
    studctrl[1].stud_gun[1].di_minalm = 1180	--no alert
    studctrl[1].stud_gun[1].di_wcflt1 = 1153	--no fault head 1
    studctrl[1].stud_gun[1].di_wcflt2 =  1158	--no fault head 2
    studctrl[1].stud_gun[1].di_wcflt3 = 1163    --no fault head 3
    studctrl[1].stud_gun[1].di_wcflt4 = 1168    --no fault head 4
    studctrl[1].stud_gun[1].di_wdenbl = 1178	--weld mode on
    studctrl[1].stud_gun[1].di_wdinpr1 = 1155   --weld in prog head 1
    studctrl[1].stud_gun[1].di_wdinpr2 = 1160   --weld in prog head 2
    studctrl[1].stud_gun[1].di_wdinpr3 = 1165   --weld in prog head 3
    studctrl[1].stud_gun[1].di_wdinpr4 = 1170   --weld in prog head 4
    studctrl[1].stud_gun[1].di_whret1 = 1156	--head back head 1
    studctrl[1].stud_gun[1].di_whret2 = 1161	--head back head 2
    studctrl[1].stud_gun[1].di_whret3 = 1166    --head back head 3
    studctrl[1].stud_gun[1].di_whret4 = 1171    --head back head 4

    studctrl[1].stud_gun[1].do_mdsone = 1172	--weld mode 
    studctrl[1].stud_gun[1].do_mdstwo = 1173    --part mode
    studctrl[1].stud_gun[1].do_refeed1 = 1158	--manual adv head 1
    studctrl[1].stud_gun[1].do_refeed2 = 1159   --manual adv head 2
    studctrl[1].stud_gun[1].do_refeed3 = 1160   --manual adv head 3
    studctrl[1].stud_gun[1].do_refeed4 = 1161   --manual adv head 4
    studctrl[1].stud_gun[1].do_rstrt = 1170     --reset fault
    studctrl[1].stud_gun[1].do_start1 = 1153	--initiate head 1
    studctrl[1].stud_gun[1].do_start2 = 1154    --initiate head 2
    studctrl[1].stud_gun[1].do_start3 = 1155    --initiate head 3
    studctrl[1].stud_gun[1].do_start4 = 1156    --initiate head 4
    studctrl[1].stud_gun[1].go_sched = 22       --schedule

    --Weld Inputs
    Set_I_sVar('$spotweldio[2].$di_comp1_i', studctrl[1].stud_gun[1].di_comp1)  -- Weld complete (GM-Head Finish Command)
    Set_I_sVar('$spotweldio[2].$di_feed1_i', studctrl[1].stud_gun[1].di_feed)
    Set_I_sVar('$spotweldio[2].$di_iotol_i', studctrl[1].stud_gun[1].di_iotol)
    Set_I_sVar('$spotweldio[2].$di_minalm_i', studctrl[1].stud_gun[1].di_minalm)
    Set_I_sVar('$spotweldio[2].$di_sauto_i', studctrl[1].stud_gun[1].di_wdenbl)   
    Set_I_sVar('$spotweldio[2].$di_wcflt_i', studctrl[1].stud_gun[1].di_wcflt1) 
    Set_I_sVar('$spotweldio[2].$di_wdenbl_i', studctrl[1].stud_gun[1].di_wdenbl)
    Set_I_sVar('$spotweldio[2].$di_wdinpr_i', studctrl[1].stud_gun[1].di_wdinpr1)
 
    --Weld Outputs
    Set_I_sVar('$spotweldio[2].$do_mdsone_i', studctrl[1].stud_gun[1].do_mdsone)  
    Set_I_sVar('$spotweldio[2].$do_mdstwo_i', studctrl[1].stud_gun[1].do_mdstwo) 
    Set_I_sVar('$spotweldio[2].$do_refeed_i[1]', studctrl[1].stud_gun[1].do_refeed1)  -- Refeed Head #1
    Set_I_sVar('$spotweldio[2].$do_rstrt_i', studctrl[1].stud_gun[1].do_rstrt)  -- Reset Faults
    Set_I_sVar('$spotweldio[2].$do_start1_i', studctrl[1].stud_gun[1].do_start1) -- Start weld gun/head #1 

    Set_I_sVar('$spotweldio[2].$go_sched_i', studctrl[1].stud_gun[1].go_sched)

    --Spot Equipment Inputs
    Set_I_sVar('$spoteqio[2].$di_hdp_i[1]', 0)  -- System needs it?
    Set_I_sVar('$spoteqio[2].$di_whret_i[1]', studctrl[1].stud_gun[1].di_whret1)  -- Weld head retracted gun #1

    IF (stud1_backup = wizans_yes) THEN 
      --Weld Inputs
      Set_I_sVar('$spotweldio[2].$di_comp2_i',  studctrl[1].stud_gun[1].di_comp2)  -- Weld complete (GM-Head Finish Command)
      Set_I_sVar('$spotweldio[2].$di_wcflt2_i', studctrl[1].stud_gun[1].di_wcflt2) -- Weld cntrl fault on gun #2   
      Set_I_sVar('$spotweldio[2].$di_wdipr2_i', studctrl[1].stud_gun[1].di_wdinpr2)

      --Weld Outputs
      Set_I_sVar('$spotweldio[2].$do_refeed_i[2]', studctrl[1].stud_gun[1].do_refeed2) -- Refeed Head #2
      Set_I_sVar('$spotweldio[2].$do_start2_i', studctrl[1].stud_gun[1].do_start2)  -- Start weld gun/head #2
  
      --Spot Equipment Inputs
      Set_I_sVar('$spoteqio[2].$di_whret_i[2]', studctrl[1].stud_gun[1].di_whret2) -- Stud#1Hd back Hd 2

      Set_I_sVar('$spoteqio[2].$di_hdn_i[1]', 132)            -- Stud head present gun #2
      Set_I_sVar('$spoteqio[2].$di_hdp_i[1]', 131)            -- Stud head present gun #1
      Set_I_sVar('$spoteqio[2].$di_hdn_i[2]', 131)            -- Stud head present gun #2
      Set_I_sVar('$spoteqio[2].$di_hdp_i[2]', 132)            -- Stud head present gun #1 

    ELSE --if no backup, only map gun ready

      Set_I_sVar('$spoteqio[2].$di_hdp_i[1]', 131)            -- Stud head present gun #1

    ENDIF --backup head on gun 1      
           
  ENDIF  --Process 2 is a stud welder

END setstudiovr
-----------------------------------------------------------------------------
ROUTINE stud_intcnt
-- PURPOSE: setup stud interconnects
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF (bshop_proc1 = studappl) THEN  --process 1 is a stud application
    Set_B_sVar('$thrsditable[3].$thr_enb', TRUE)                 -- Weld mode = Process #1 ON
    Set_I_sVar('$thrsditable[3].$di_no', 1050)		         
    Set_I_sVar('$thrsditable[3].$do_no', 65)
    Set_B_sVar('$thrsditable[4].$thr_enb', TRUE)                 -- Studs low = Process #1 alert 2
    Set_I_sVar('$thrsditable[4].$di_no', 1051)			
    Set_I_sVar('$thrsditable[4].$do_no', 69)
    Set_B_sVar('$thrsditable[5].$thr_enb', TRUE)                  
    Set_I_sVar('$thrsditable[5].$di_no', 1025)  
    Set_I_sVar('$thrsditable[5].$do_no', 74)   
    Set_B_sVar('$thrsditable[6].$thr_enb', TRUE)                   
    Set_I_sVar('$thrsditable[6].$di_no', 1030)  
    Set_I_sVar('$thrsditable[6].$do_no', 75)   
  
    Set_B_sVar('$thrsditable[8].$thr_enb', TRUE)                 
    Set_I_sVar('$thrsditable[8].$di_no', 1040)  
    Set_I_sVar('$thrsditable[8].$do_no', 77)   
 
    Set_B_sVar('$thrsditable[9].$thr_enb', TRUE)                 
    Set_I_sVar('$thrsditable[9].$di_no', 1052)  
    Set_I_sVar('$thrsditable[9].$do_no', 73)

    Set_B_sVar('$thrsditable[46].$thr_enb', TRUE)                 
    Set_I_sVar('$thrsditable[46].$di_no', 1052)       	       
    Set_I_sVar('$thrsditable[46].$do_no', 73)

    --Single Pedestal with Dual Guns, Three Pedestal Guns, Four Pedestal Guns
    IF ((stud1_app = stud_spdg) OR (stud1_app = stud_3pg) OR (stud1_app = stud_4pg)) THEN
      Set_B_sVar('$thrsditable[7].$thr_enb', TRUE)               -- Automode = Process #2 ON
      Set_I_sVar('$thrsditable[7].$di_no', 1050)		 
      Set_I_sVar('$thrsditable[7].$do_no', 129)
    ELSE
      Set_B_sVar('$thrsditable[7].$thr_enb', TRUE)                 
      Set_I_sVar('$thrsditable[7].$di_no', 1035)  
      Set_I_sVar('$thrsditable[7].$do_no', 76) 
    ENDIF

  ENDIF  --process 1 is a stud application

  IF (bshop_proc2 = studappl) THEN --process 2 is a stud application

    Set_B_sVar('$thrsditable[3].$thr_enb', TRUE)                 -- Weld mode = Process #2 ON
    Set_I_sVar('$thrsditable[3].$di_no', 1178)		         -- DI Weld Mode On   
    Set_I_sVar('$thrsditable[3].$do_no', 129)			 -- DO Process On

    Set_B_sVar('$thrsditable[4].$thr_enb', TRUE)                 -- Studs low = Process #2 alert 2
    Set_I_sVar('$thrsditable[4].$di_no', 1179)			 -- DI Stud Low
    Set_I_sVar('$thrsditable[4].$do_no', 133)			 -- DO Process Alert 2

    Set_B_sVar('$thrsditable[5].$thr_enb', TRUE)                  
    Set_I_sVar('$thrsditable[5].$di_no', 1153)  		 -- DI No Fault Head 1
    Set_I_sVar('$thrsditable[5].$do_no', 138) 			 -- DO No Fault Head 1 

    Set_B_sVar('$thrsditable[6].$thr_enb', TRUE)                   
    Set_I_sVar('$thrsditable[6].$di_no', 1158)  		 -- DI No Fault Head 2
    Set_I_sVar('$thrsditable[6].$do_no', 139) 			 -- DO No Fault Head 2  

    Set_B_sVar('$thrsditable[7].$thr_enb', TRUE)                  
    Set_I_sVar('$thrsditable[7].$di_no', 1163)  		 -- DI No Fault Head 3
    Set_I_sVar('$thrsditable[7].$do_no', 140) 			 -- DO No Fault Head 3 

    Set_B_sVar('$thrsditable[8].$thr_enb', TRUE)                   
    Set_I_sVar('$thrsditable[8].$di_no', 1168)  		 -- DI No Fault Head 4
    Set_I_sVar('$thrsditable[8].$do_no', 141) 			 -- DO No Fault Head 4	
   
    Set_B_sVar('$thrsditable[9].$thr_enb', TRUE)                 
    Set_I_sVar('$thrsditable[9].$di_no', 1180)  		 -- DI No Alert     	       
    Set_I_sVar('$thrsditable[9].$do_no', 137)			 -- DO Cnt No Alt

  ENDIF --process 2 is a stud application

END stud_intcnt

---------------------------------------------------------------------------------- 
-----------------------------------------------------------------------------
ROUTINE set_stud_IO
-- PURPOSE: sets application IO
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN
					
IF (numstudctrl <> 0) THEN --application has stud welding

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsIOCom) THEN
    ErrsInShop.ErrorsIOCom = 0
  ENDIF
  IF UNINIT(StudIO_Setup) OR (Reset_Cell) THEN
    StudIO_Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsIOCom -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('  Starting the Stud I/O Program GMSTUDIO', FALSE)

  IF (StudIO_Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  Stud I/O Already Setup', FALSE)
    IF ExecSetupAgn('Stud I/O') THEN -- ask user if they want to setup again
      StudIO_Setup = FALSE
    ELSE
      WriteLog('  Stud I/O already Complete', FALSE)
      WriteLog('  GMSTUDIO Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  --setup routines  
  ChkStudInit
  stud_io_p1   --set stud I/O for process 1
  stud_io_p2   --set stud I/O for process 2
  setstudiovr  --set up system variables for I/O
  stud_intcnt  --set up stud interconnects

  ErrsInShop.ErrorsIOCom =  ErrsInShop.ErrorsIOCom + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsIOCom -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('  Stud I/O setup Program GMSTUDIO had ' + int2str((ErrsInShop.ErrorsIOCom- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('  Stud I/O setup Program completed', FALSE)
    StudIO_Setup = TRUE
  ENDIF

  WriteLog('', FALSE)

ENDIF

END set_stud_IO


-----------------------------------------------------------------------------
--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN

  set_stud_IO

END GMSTUDIO



