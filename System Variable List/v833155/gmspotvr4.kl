-- -----------------------------------------------------------------------
--
--   MODULE:         GMSPOTVR4.KL
--   TITLE:          GMSPOTVR4 PROGRAM
--
--
--   WRITTEN BY:     FANUC
--   REVISION DATE:  2016/11/14
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and sai
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Spot Program  program files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZARD are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--             V4.1   2017/02/05 marchaka	  Modify prompt logic for wizard rerun.
--             V4.1   2017/02/10 marchaka         Blowoff time changed to 1000.  Blow off outputs now properly set
--                                                for pedestal applciations.
--             V4.1   2017/02/13 marchaka         Remove $dev_path setting.  Replaced with KCL CHDIR.
--             V4.1   2017/03/31 marchaka	  Fix IF statement for setting up fourth servo tip dresser.  Condition
--                                                fixed to more than three servo tip dressers
--             V4.2   2017/07/09 marchaka	  Write default process axis dt files if servo tip dress option is installed
--  						  on the robot but process uses electric dresser.  
--             V4.2   2017/07/18 marchaka         If there are two servo tip dressers, ensure servo tip dresser 2 is on axis 2.
--             V4.3   2018/09/17 marchaka         Removed motor setup for servo tip dresser due to program size restrication, which 
--                                                was a result of adding a new servo tip dress motor for cap change/dresser configs.
--             V4.3   2018/10/26 marchaka	  Modify dresser speeds from 360rpm to 340rpm.
--             V4.3   2018/11/02 marchaka         Set send schedule to weld controller to FALSE.
--             V4.3   2018/11/15 marchaka         Set the stall percent to 20.  Set max torque in all tip dresser schedules to 25 for all
--                                                tip dresser types.
--                                                sbr[x].$param[25] is set to 1900 for combo cap changers.  This has to be setup in this 
--                                                program because it isn't the default setting for the motor type so it gets overwritten 
--                                                when setup of a third motion group is done.  
--						  
--
--
--
--------------------------------------------------------------------------
PROGRAM GMSPOTVR4

%COMMENT = 'GM Spot V4.3'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%ENVIRONMENT SGDEF1  --SWG variables


%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants


-- variables declared for All shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging
%INCLUDE gmcfgspt  -- GM spot application variables
%INCLUDE gm_var --GM Variables

CONST
Version = '2018-11-15'

%INCLUDE gmcnstnt -- all GM constants for the wizard

VAR

  Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started
  SpotVR4Setup  IN SHADOW : BOOLEAN  -- Keeps track if routine setup Mh I/O at least first time
  gun_num     : STRING[2] 
  
  srvo_td_opt  IN SHADOW FROM GMCUSTO: BOOLEAN --servo tip dress option loaded
  srvo_dress   IN SHADOW FROM GMCUSTO: INTEGER
  num_tipdrs   IN SHADOW FROM GMCUSTO: INTEGER
  sgunchng     IN SHADOW FROM GMCUSTO  : BOOLEAN   -- Servo gun tool changer option loaded 

  srvotd      IN SHADOW FROM GMSPOTVR3: BOOLEAN --user selected servo tip dresser in wizard
  numsrvodrs  IN SHADOW FROM GMSPOTVR3  : INTEGER --number of servo tip dressers
  got_rtu      IN SHADOW FROM GMCUSTO  : BOOLEAN   -- Extended axis option loaded
  gm_status : INTEGER
 
  Reset_Cell   IN SHADOW FROM GMCFGCEL: BOOLEAN    --Used for if all Cell I/O shoudl be all reset

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE klrdutil
%INCLUDE GMRDUTIL -- Utility Routine for Setting Variables

ROUTINE srvo_optn FROM gmwizspt --check if servo gun option loaded
ROUTINE srvotd_optn FROM gmwizspt
ROUTINE sgunchg_optn FROM gmwizspt
ROUTINE initspot3var FROM gmspotvr3
-----------------------------------------------------------------------------
ROUTINE initspot4var
-- PURPOSE: to initialize registers associated with setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(g_servog_opt) THEN
    srvo_optn
  ENDIF

  IF UNINIT(srvo_td_opt) THEN
    srvotd_optn --servo tip dresser option loaded
  ENDIF

  IF UNINIT(sgunchng) THEN
    sgunchg_optn --servo gun change option
  ENDIF

END initspot4var 
-----------------------------------------------------------------------------
ROUTINE srvo_td
-- PURPOSE: set servo tip dress
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:  --set_std_ctrl in gmmain1, executes after wizard config
--             has been executed on first cold start
--
--
-----------------------------------------------------------------------------
VAR
srvo_td: BOOLEAN
gun_num: STRING[2]
ax, k, totl_tdaxs:  INTEGER
h:  STRING[4]

BEGIN

initspot3var --intialize variables needed for some servo td setup

IF (numwldctrl <> 0) THEN --spot application

  IF (g_servog_opt = TRUE) THEN -- servo gun

    IF (srvo_td_opt = TRUE) THEN -- servo tip dress software option is loaded

      sp_eqnum = 1       --initialize equipment setup for wizard to equipment 1
      sp_gnnum = 1       --initialize gun setup for wizard questions to gun 1	
      sp_eqgn_num = spttl_eq1gn  --initialize guns per equipment tracker

      FOR sp_eqnum = 1 TO sp_ttl_eq DO
        FOR sp_gnnum = 1 TO sp_eqgn_num DO 

          SELECT sp_eqnum OF
            CASE(1): --equipment 1
              gun_num = int_to_strg(sp_gnnum) 
            CASE(2):  --equipment 2
              gun_num = '2'
            ELSE:
          ENDSELECT   

          IF (spotapp_eq[sp_eqnum].spotgun[sp_gnnum].sp_srvo_td = wizans_yes) THEN --servo tipdress
            srvo_td = TRUE

            gun_num = int_to_strg(sp_gnnum)
            Set_I_sVar('$sggun' + gun_num + '.$setup.$dress_num',sp_gnnum) --dress number assigned to gun # 
            Set_I_sVar('$sggun' + gun_num + '.$setup.$max_dress',0) --max dresses allowed on tips for gun # 
            Set_B_sVar('$sggun' + gun_num + '.$setup.$dress_sev',FALSE) --severity for $max_dress gun # 
          ENDIF --tip dress   
         
        ENDFOR   
        IF (spttl_eq2gn = 2) THEN --reinitialize variables for equipment 2 gun setup
          sp_eqgn_num = sp_ttl_gn
        ENDIF
      ENDFOR

      IF (srvo_dress = wizans_yes) THEN  --servo gun change td motor setup
        totl_tdaxs = num_tipdrs
      ELSE --normal wizard setup
        totl_tdaxs = numsrvodrs
      ENDIF

      IF ((srvo_td = TRUE) OR ((srvo_dress = wizans_yes) AND (num_tipdrs > 0)))THEN --servo tip dress is used
        FOR k = 1 TO totl_tdaxs DO
          SELECT k OF
            CASE(1):  --servo dresser 1
              IF (got_rtu = FALSE) THEN  --set variables to offset axis if there is an RTU
                ax = 7
              ELSE
                ax = 8
              ENDIF 
            CASE(2):  --servo dresser 2
              IF (got_rtu = FALSE) THEN  --set variables to offset axis if there is an RTU
                ax = 8
              ELSE
                ax = 9
              ENDIF 
            CASE(3):  --servo dresser 3
              IF (got_rtu = FALSE) THEN  --set variables to offset axis if there is an RTU
                ax = 9
              ELSE
                ax = 10
              ENDIF 
            CASE(4):  --servo dresser 3
              IF (got_rtu = FALSE) THEN  --set variables to offset axis if there is an RTU
                ax = 10
              ELSE
                ax = 11
              ENDIF 
            ELSE:
          ENDSELECT

          CNV_INT_STR(ax, 1, 0, h)  --hardware axis for dresser
          h = SUB_STR(h, 2, 3)

          IF ((cap_chngtype = cap_srvcombo) AND (((got_rtu = FALSE) AND (ax = 7)) OR ((got_rtu = TRUE) AND (ax = 8)))) THEN
                                                 --adjust this motor setting from its default
                                                --this setting can't be in the motor setup code because
                                                --it gets overwritten when a configuration is used that has a third
                                                --motion group.
            Set_I_sVar('$sbr[' + h + '].$param[25]', 1900)          
          ELSE  --no servo combo cap changer
            Set_I_sVar('$sbr[' + h + '].$param[25]', 3641)        
          ENDIF --servo combo cap changer

        ENDFOR
      ENDIF  --servo tip dress is used

      IF ((srvo_td = TRUE) OR ((srvo_dress = wizans_yes) AND (num_tipdrs > 0)))THEN --servo tip dress is used

        IF (sgunchng = TRUE) THEN --servo gun change option is loaded on the robot
          Set_I_sVar('$sgtdcfg.$num_sched',8) --number of dresser schedules to display
          Set_I_sVar('$sgtdcfg.$num_dresrs',4) --number of tip dressers
        ELSE --no gun changer
          Set_I_sVar('$sgtdcfg.$num_sched',4) --number of dresser schedules to display  
          Set_I_sVar('$sgtdcfg.$num_dresrs',2) --number of tip dressers 
        ENDIF --servo gun change option is loaded on the robot

        Set_I_sVar('$sgtdcfg.$numstepsdsp',1) --number of dresser steps to display in dress profile
        Set_I_sVar('$sgtdcfg.$spd_tmout',500) --ticks to wait for dresser to get up to speed before issuing warn
        Set_B_sVar('$sgtdcfg.$dsp_wschd',TRUE) --display weld schedule in tip dress schedule
        Set_I_sVar('$sgtdcfg.$pipe_size',10) --pipe size for summary info
        Set_I_sVar('$sgtdcfg.$rpm_tol',50) --rpm tolerance setting
        Set_B_sVar('$sgtdcfg.$disp_tdrs',TRUE) --display tip dress instruction or tip dress menus
        Set_B_sVar('$sgtdcfg.$srvo_tdrs',TRUE) --enable servo dresser
        
        Set_I_sVar('$sgtdset[1].$max_cuts',0)  --max # of cuts, 0 (Fanuc not tracking)
        Set_B_sVar('$sgtdset[1].$cut_sev',FALSE) --alarm severity for max cuts, T = fault, F = warn        
        Set_I_sVar('$sgtdset[1].$blow_time',1000) --ms blowoff valve stays on after dress time ends
        Set_I_sVar('$sgtdset[1].$max_freetrq',5) --max free torque allowed
        Set_B_sVar('$sgtdset[1].$freetrq_sev',FALSE) --severity for free torque, T = fault, F = warn
        Set_R_sVar('$sgtdset[1].$cntct_fctor',2.5) --threshold (multiplier) above free torque to determine tip contact on cutter
        Set_B_sVar('$sgtdset[1].$cntct_sev',FALSE) --severity for SPOT-083, T = fault, F = warn)
        Set_I_sVar('$sgtdset[1].$stall_prcnt',20) --% speed drop before stall error detected
        Set_B_sVar('$sgtdset[1].$stall_sev',TRUE) --severity for speed stal alarm, T = fault, F = warn)
        Set_B_sVar('$sgtdset[1].$blow_start',TRUE) --start blow off valve at start of dress or end of dress, T = start, F = end
        Set_B_sVar('$sgtdset[1].$speed_sev',FALSE) --severity for speed not achieved, 1 = fault, 0 = warn
        Set_B_sVar('$sgtdset[1].$send_sched',TRUE) --send schedule to weld controller
        
        Set_I_sVar('$sgtdsch[1].$speed[1]', 340) -- dresser speed
        Set_I_sVar('$sgtdsch[1].$duratn[1]',1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
        Set_B_sVar('$sgtdsch[1].$rotdir[1]',TRUE) --dress rotation direction
        Set_I_sVar('$sgtdsch[1].$maxinc[1]',25) --max torque increase % during dress before error
        Set_I_sVar('$sgtdsch[1].$mininc[1]',5) --min torque increase % during dress before error
        Set_B_sVar('$sgtdsch[1].$sev[1]',FALSE) --severity for min/max % torque during dress 
        Set_I_sVar('$sgtdsch[1].$wsched[1]',247) --weld schedule sent to weld controller during dress
        Set_S_sVar('$sgtdsch[1].$comment','PREDRESS') --schedule comment
        Set_I_sVar('$sgtdsch[1].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
        Set_R_sVar('$sgtdsch[1].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs 

        Set_I_sVar('$sgtdsch[2].$speed[1]', 340) -- dresser speed
        Set_I_sVar('$sgtdsch[2].$duratn[1]',1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
        Set_B_sVar('$sgtdsch[2].$rotdir[1]',TRUE) --dress rotation direction
        Set_I_sVar('$sgtdsch[2].$maxinc[1]',25) --max torque increase % during dress before error
        Set_I_sVar('$sgtdsch[2].$mininc[1]',5) --min torque increase % during dress before error
        Set_B_sVar('$sgtdsch[2].$sev[1]',TRUE) --severity for min/max % torque during dress 
        Set_I_sVar('$sgtdsch[2].$wsched[1]',248) --weld schedule sent to weld controller during dress
        Set_S_sVar('$sgtdsch[2].$comment','REDRESS') --schedule comment
        Set_I_sVar('$sgtdsch[2].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
        Set_R_sVar('$sgtdsch[2].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs

        Set_I_sVar('$sgtdsch[3].$speed[1]', 340) -- dresser speed
        Set_I_sVar('$sgtdsch[3].$duratn[1]',1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
        Set_B_sVar('$sgtdsch[3].$rotdir[1]',TRUE) --dress rotation direction
        Set_I_sVar('$sgtdsch[3].$maxinc[1]',25) --max torque increase % during dress before error
        Set_I_sVar('$sgtdsch[3].$mininc[1]',5) --min torque increase % during dress before error
        Set_B_sVar('$sgtdsch[3].$sev[1]',FALSE) --severity for min/max % torque during dress 
        Set_I_sVar('$sgtdsch[3].$wsched[1]',249) --weld schedule sent to weld controller during dress
        Set_S_sVar('$sgtdsch[3].$comment','PREDRESS') --schedule comment
        Set_I_sVar('$sgtdsch[3].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
        Set_R_sVar('$sgtdsch[3].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs 

        Set_I_sVar('$sgtdsch[4].$speed[1]', 340) -- dresser speed
        Set_I_sVar('$sgtdsch[4].$duratn[1]', 1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
        Set_B_sVar('$sgtdsch[4].$rotdir[1]',TRUE) --dress rotation direction
        Set_I_sVar('$sgtdsch[4].$maxinc[1]',25) --max torque increase % during dress before error
        Set_I_sVar('$sgtdsch[4].$mininc[1]',5) --min torque increase % during dress before error
        Set_B_sVar('$sgtdsch[4].$sev[1]',TRUE) --severity for min/max % torque during dress 
        Set_I_sVar('$sgtdsch[4].$wsched[1]',250) --weld schedule sent to weld controller during dress
        Set_S_sVar('$sgtdsch[4].$comment','REDRESS') --schedule comment
        Set_I_sVar('$sgtdsch[4].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
        Set_R_sVar('$sgtdsch[4].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs

        IF (num_tipdrs > 2) THEN --three servo tip dressers, setup schedules 5 and 6
          Set_I_sVar('$sgtdsch[5].$speed[1]', 340) -- dresser speed
          Set_I_sVar('$sgtdsch[5].$duratn[1]', 1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
          Set_B_sVar('$sgtdsch[5].$rotdir[1]',TRUE) --dress rotation direction
          Set_I_sVar('$sgtdsch[5].$maxinc[1]',25) --max torque increase % during dress before error
          Set_I_sVar('$sgtdsch[5].$mininc[1]',5) --min torque increase % during dress before error
          Set_B_sVar('$sgtdsch[5].$sev[1]',FALSE) --severity for min/max % torque during dress 
          Set_I_sVar('$sgtdsch[5].$wsched[1]',251) --weld schedule sent to weld controller during dress
          Set_S_sVar('$sgtdsch[5].$comment','PREDRESS') --schedule comment
          Set_I_sVar('$sgtdsch[5].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
          Set_R_sVar('$sgtdsch[5].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs 

          Set_I_sVar('$sgtdsch[6].$speed[1]', 340) -- dresser speed
          Set_I_sVar('$sgtdsch[6].$duratn[1]', 1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
          Set_B_sVar('$sgtdsch[6].$rotdir[1]',TRUE) --dress rotation direction
          Set_I_sVar('$sgtdsch[6].$maxinc[1]',25) --max torque increase % during dress before error
          Set_I_sVar('$sgtdsch[6].$mininc[1]',5) --min torque increase % during dress before error
          Set_B_sVar('$sgtdsch[6].$sev[1]',TRUE) --severity for min/max % torque during dress 
          Set_I_sVar('$sgtdsch[6].$wsched[1]',252) --weld schedule sent to weld controller during dress
          Set_S_sVar('$sgtdsch[6].$comment','REDRESS') --schedule comment
          Set_I_sVar('$sgtdsch[6].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
          Set_R_sVar('$sgtdsch[6].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs
        ENDIF --three servo tip dressers, setup schedules 5 and 6

        IF (num_tipdrs > 3) THEN --four servo tip dressers, setup schedules 7 and 8
          Set_I_sVar('$sgtdsch[7].$speed[1]', 340) -- dresser speed
          Set_I_sVar('$sgtdsch[7].$duratn[1]', 1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
          Set_B_sVar('$sgtdsch[7].$rotdir[1]',TRUE) --dress rotation direction
          Set_I_sVar('$sgtdsch[7].$maxinc[1]',25) --max torque increase % during dress before error
          Set_I_sVar('$sgtdsch[7].$mininc[1]',5) --min torque increase % during dress before error
          Set_B_sVar('$sgtdsch[7].$sev[1]',FALSE) --severity for min/max % torque during dress 
          Set_I_sVar('$sgtdsch[7].$wsched[1]',253) --weld schedule sent to weld controller during dress
          Set_S_sVar('$sgtdsch[7].$comment','PREDRESS') --schedule comment
          Set_I_sVar('$sgtdsch[7].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
          Set_R_sVar('$sgtdsch[7].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs 

          Set_I_sVar('$sgtdsch[8].$speed[1]', 340) -- dresser speed
          Set_I_sVar('$sgtdsch[8].$duratn[1]', 1000) --dresser duration, not used if $sgtdcfg.$dsp_wsch is set to TRUE
          Set_B_sVar('$sgtdsch[8].$rotdir[1]',TRUE) --dress rotation direction
          Set_I_sVar('$sgtdsch[8].$maxinc[1]',25) --max torque increase % during dress before error
          Set_I_sVar('$sgtdsch[8].$mininc[1]',5) --min torque increase % during dress before error
          Set_B_sVar('$sgtdsch[8].$sev[1]',TRUE) --severity for min/max % torque during dress 
          Set_I_sVar('$sgtdsch[8].$wsched[1]',254) --weld schedule sent to weld controller during dress
          Set_S_sVar('$sgtdsch[8].$comment','REDRESS') --schedule comment
          Set_I_sVar('$sgtdsch[8].$drs_end_typ',3) --end of dress detection method, 1 = time, 2 = # of revoultions, not used if $sgtdcfg.$dsp_wschd is set to TRUE
          Set_R_sVar('$sgtdsch[8].$revs[1]',0.000) --number of revs of cutter blade if dress end type is revs
        ENDIF --four servo tip dressers, setup schedules 7 and 8
     
        IF ((spotapp_eq[1].spotgun[1].sp_srvo_td = wizans_yes) OR (num_tipdrs > 0))THEN --process 1 is using servo tip dress

          Set_I_sVar('$sgtdset[1].$do_alert_t',2) --alert DOUT type
          Set_I_sVar('$sgtdset[1].$do_alert_i',do_sd_alert1) --alert DOUT index  
          Set_I_sVar('$sgtdset[1].$do_fault_t',2) --fault DOUT type
          Set_I_sVar('$sgtdset[1].$do_fault_i',do_sd_fault1) --fault DOUT index  
          Set_I_sVar('$sgtdset[1].$di_freset_i',0) --fault/alert reset DI index   
          
          Set_I_sVar('$sggun1.$setup.$dress_num', 1) --gun 1 is using dresser 1

          IF (numwldctrl = 1) THEN --one weld controller
            IF ((wld1_app <> wld1app_cg) AND (wld1_app <> wld1app_cgmh)) THEN --pedestal application
              Set_R_sVar('$sgtdset[1].$cntct_thrsh',20) --20 for pedestal
              Set_I_sVar('$sgtdset[1].$do_blow_t',2) --blowoff DOUT type
              Set_I_sVar('$sgtdset[1].$do_blow_i',do_pedblow1) --blowoff DOUT index 
            ELSE --carried
              Set_R_sVar('$sgtdset[1].$cntct_thrsh',20) --same as pedestal for now
              Set_I_sVar('$sgtdset[1].$do_blow_t',2) --blowoff DOUT type
              Set_I_sVar('$sgtdset[1].$do_blow_i',do_cgsblow1) --blowoff DOUT index 
            ENDIF --pedestal
          ENDIF --one weld controller
          IF (numwldctrl = 2) THEN --two weld controllers
            IF (wld2_app <> wld2app_cgpg) THEN --pedestal application
              Set_R_sVar('$sgtdset[1].$cntct_thrsh',20) --20 for pedestal
              Set_I_sVar('$sgtdset[1].$do_blow_t',2) --blowoff DOUT type
              Set_I_sVar('$sgtdset[1].$do_blow_i',do_pedblow1) --blowoff DOUT index
            ELSE --carried
              Set_R_sVar('$sgtdset[1].$cntct_thrsh',20)  --same as pedestal for now
              Set_I_sVar('$sgtdset[1].$do_blow_t',2) --blowoff DOUT type
              Set_I_sVar('$sgtdset[1].$do_blow_i',do_cgsblow1) --blowoff DOUT index
            ENDIF --pedestal
          ENDIF --two weld controllers
        ENDIF --process 1 is using servo tip dress

        IF ((sp_ttl_gn = 2) OR (num_tipdrs > 1)) THEN --may need to setup a second dresser
          IF (((spotapp_eq[1].spotgun[1].sp_srvo_td = wizans_yes) AND ((spotapp_eq[1].spotgun[2].sp_srvo_td = wizans_yes) OR (spotapp_eq[2].spotgun[1].sp_srvo_td = wizans_yes))) OR (num_tipdrs > 1)) THEN --two servo tip drssers
            Set_I_sVar('$sgtdset[2].$max_cuts',0)  --max # of cuts, 0 (Fanuc not tracking)
            Set_B_sVar('$sgtdset[2].$cut_sev',FALSE) --alarm severity for max cuts, T = fault, F = warn            
            Set_I_sVar('$sgtdset[2].$blow_time',1000) --ms blowoff valve stays on after dress time ends
            Set_I_sVar('$sgtdset[2].$max_freetrq',5) --max free torque allowed
            Set_B_sVar('$sgtdset[2].$freetrq_sev',FALSE) --severity for free torque, T = fault, F = warn
            Set_R_sVar('$sgtdset[2].$cntct_fctor',2.5) --threshold (multiplier) above free torque to determine tip contact on cutter
            Set_B_sVar('$sgtdset[2].$cntct_sev',FALSE) --severity for SPOT-083, T = fault, F = warn)            
            Set_I_sVar('$sgtdset[2].$stall_prcnt',20) --% speed drop before stall error detected
            Set_B_sVar('$sgtdset[2].$stall_sev',TRUE) --severity for speed stal alarm, T = fault, F = warn)
            Set_B_sVar('$sgtdset[2].$blow_start',TRUE) --start blow off valve at start of dress or end of dress, T = start, F = end
            Set_B_sVar('$sgtdset[2].$speed_sev',FALSE) --severity for speed not achieved, 1 = fault, 0 = warn
            Set_B_sVar('$sgtdset[2].$send_sched',TRUE) --send schedule to weld controller

            Set_I_sVar('$sggun2.$setup.$dress_num', 2) --gun 2 is using dresser 2

            IF (numwldctrl = 1) THEN --one weld controller
              IF ((wld1_app <> wld1app_cg) AND (wld1_app <> wld1app_cgmh)) THEN --pedestal application
                Set_R_sVar('$sgtdset[2].$cntct_thrsh',20) --20 for pedestal
                Set_I_sVar('$sgtdset[2].$do_blow_t',2) --blowoff DOUT type
                Set_I_sVar('$sgtdset[2].$do_blow_i',do_pedblow2) --blowoff DOUT index
              ELSE --carried
                Set_R_sVar('$sgtdset[2].$cntct_thrsh',20)  --same as pedestal for now
                Set_I_sVar('$sgtdset[2].$do_blow_t',2) --blowoff DOUT type
                Set_I_sVar('$sgtdset[2].$do_blow_i',do_cgsblow2) --blowoff DOUT index
              ENDIF --pedestal

              Set_I_sVar('$sgtdset[2].$do_alert_t',2) --alert DOUT type
              Set_I_sVar('$sgtdset[2].$do_alert_i',do_sd_alert1) --alert DOUT index                  
              Set_I_sVar('$sgtdset[2].$do_fault_t',2) --fault DOUT type
              Set_I_sVar('$sgtdset[2].$do_fault_i',do_sd_fault1) --fault DOUT index                  
              Set_I_sVar('$sgtdset[2].$di_freset_i',0) --fault/alert reset DI index 
            ENDIF --one weld controller
            IF (numwldctrl = 2) THEN --two weld controllers

              Set_I_sVar('$sgtdset[2].$do_alert_t',2) --alert DOUT type
              Set_I_sVar('$sgtdset[2].$do_alert_i',do_sd_alert2) --alert DOUT index                
              Set_I_sVar('$sgtdset[2].$do_fault_t',2) --fault DOUT type
              Set_I_sVar('$sgtdset[2].$do_fault_i',do_sd_fault2) --fault DOUT index                
              Set_I_sVar('$sgtdset[2].$di_freset_i',0) --fault/alert reset DI index

              IF (wld2_app <> wld2app_cgpg) THEN --pedestal application
                Set_R_sVar('$sgtdset[2].$cntct_thrsh',20) --20 for pedestal
                Set_I_sVar('$sgtdset[2].$do_blow_t',2) --blowoff DOUT type
                Set_I_sVar('$sgtdset[2].$do_blow_i',do_pedblow2) --blowoff DOUT index
              ELSE --carried
                Set_R_sVar('$sgtdset[2].$cntct_thrsh',20)  --same as pedestal for now
                Set_I_sVar('$sgtdset[2].$do_blow_t',2) --blowoff DOUT type
                Set_I_sVar('$sgtdset[2].$do_blow_i',do_cgsblow2) --blowoff DOUT index
              ENDIF --pedestal
            ENDIF --two weld controllers
          ENDIF --two servo tip dressers

          IF (((spotapp_eq[1].spotgun[1].sp_srvo_td = wizans_no) OR (spotapp_eq[1].spotgun[1].sp_srvo_td = 0)) AND ((spotapp_eq[1].spotgun[2].sp_srvo_td = wizans_yes) OR 
               (spotapp_eq[2].spotgun[1].sp_srvo_td = wizans_yes))) THEN --one servo tip dresser for gun 2
            Set_I_sVar('$sggun2.$setup.$dress_num', 1) --gun 2 is using dresser 1

            IF (numwldctrl = 1) THEN --one weld controller, one process
              Set_I_sVar('$sgtdset[1].$do_alert_t',2) --alert DOUT type
              Set_I_sVar('$sgtdset[1].$do_alert_i',do_sd_alert1) --alert DOUT index                             
              Set_I_sVar('$sgtdset[1].$do_fault_t',2) --fault DOUT type
              Set_I_sVar('$sgtdset[1].$do_fault_i',do_sd_fault1) --fault DOUT index                             
              Set_I_sVar('$sgtdset[1].$di_freset_i',0) --fault/alert reset DI index 
              Set_I_sVar('$sgtdset[1].$do_blow_t',2) --blowoff DOUT type
              Set_I_sVar('$sgtdset[1].$do_blow_i',do_pedblow2) --blowoff DOUT index  --for single process, second gun is always a pedestal
            ENDIF  --one weld controller, one process

            IF (numwldctrl = 2) THEN --two weld cotnrollers, two processes
              Set_I_sVar('$sgtdset[1].$do_alert_t',2) --alert DOUT type
              Set_I_sVar('$sgtdset[1].$do_alert_i',do_sd_alert2) --alert DOUT index                   
              Set_I_sVar('$sgtdset[1].$do_fault_t',2) --fault DOUT type
              Set_I_sVar('$sgtdset[1].$do_fault_i',do_sd_fault2) --fault DOUT index                   
              Set_I_sVar('$sgtdset[1].$di_freset_i',0) --fault/alert reset DI index
              Set_I_sVar('$sgtdset[1].$do_blow_t',2) --blowoff DOUT type
              Set_I_sVar('$sgtdset[1].$do_blow_i',do_pedblow2) --blowoff DOUT index  --for two spot processes, second gun is always a pedestal
            ENDIF --two weld controllers, two processes

          ENDIF --one servo tip dresser for gun 2

        ENDIF --two guns

        IF (num_tipdrs > 2) THEN --three servo dressers 
          Set_I_sVar('$sgtdset[3].$max_cuts',0)  --max # of cuts, 0 (Fanuc not tracking)
          Set_B_sVar('$sgtdset[3].$cut_sev',FALSE) --alarm severity for max cuts, T = fault, F = warn        
          Set_I_sVar('$sgtdset[3].$blow_time',1000) --ms blowoff valve stays on after dress time ends
          Set_I_sVar('$sgtdset[3].$max_freetrq',5) --max free torque allowed
          Set_B_sVar('$sgtdset[3].$freetrq_sev',FALSE) --severity for free torque, T = fault, F = warn
          Set_R_sVar('$sgtdset[3].$cntct_fctor',2.5) --threshold (multiplier) above free torque to determine tip contact on cutter
          Set_B_sVar('$sgtdset[3].$cntct_sev',FALSE) --severity for SPOT-083, T = fault, F = warn)
          Set_I_sVar('$sgtdset[3].$stall_prcnt',20) --% speed drop before stall error detected
          Set_B_sVar('$sgtdset[3].$stall_sev',TRUE) --severity for speed stal alarm, T = fault, F = warn)
          Set_B_sVar('$sgtdset[3].$blow_start',TRUE) --start blow off valve at start of dress or end of dress, T = start, F = end
          Set_B_sVar('$sgtdset[3].$speed_sev',FALSE) --severity for speed not achieved, 1 = fault, 0 = warn
          Set_B_sVar('$sgtdset[3].$send_sched',TRUE) --send schedule to weld controller

          Set_I_sVar('$sgtdset[3].$do_alert_t',2) --alert DOUT type
          Set_I_sVar('$sgtdset[3].$do_alert_i',do_sd_alert1) --alert DOUT index                     
          Set_I_sVar('$sgtdset[3].$do_fault_t',2) --fault DOUT type
          Set_I_sVar('$sgtdset[3].$do_fault_i',do_sd_fault1) --fault DOUT index                     
          Set_I_sVar('$sgtdset[3].$di_freset_i',0) --fault/alert reset DI index 
          Set_I_sVar('$sgtdset[3].$do_blow_t',2) --blowoff DOUT type
          Set_I_sVar('$sgtdset[3].$do_blow_i',do_cgsblow3) --blowoff DOUT index  --only servo tc has three dressers
        ENDIF  --three servo dressers   

        IF (num_tipdrs > 3) THEN --four servo dressers 
          Set_I_sVar('$sgtdset[4].$max_cuts',0)  --max # of cuts, 0 (Fanuc not tracking)
          Set_B_sVar('$sgtdset[4].$cut_sev',FALSE) --alarm severity for max cuts, T = fault, F = warn        
          Set_I_sVar('$sgtdset[4].$blow_time',1000) --ms blowoff valve stays on after dress time ends
          Set_I_sVar('$sgtdset[4].$max_freetrq',5) --max free torque allowed
          Set_B_sVar('$sgtdset[4].$freetrq_sev',FALSE) --severity for free torque, T = fault, F = warn
          Set_R_sVar('$sgtdset[4].$cntct_fctor',2.5) --threshold (multiplier) above free torque to determine tip contact on cutter
          Set_B_sVar('$sgtdset[4].$cntct_sev',FALSE) --severity for SPOT-083, T = fault, F = warn)
          Set_I_sVar('$sgtdset[4].$stall_prcnt',20) --% speed drop before stall error detected
          Set_B_sVar('$sgtdset[4].$stall_sev',TRUE) --severity for speed stal alarm, T = fault, F = warn)
          Set_B_sVar('$sgtdset[4].$blow_start',TRUE) --start blow off valve at start of dress or end of dress, T = start, F = end
          Set_B_sVar('$sgtdset[4].$speed_sev',FALSE) --severity for speed not achieved, 1 = fault, 0 = warn
          Set_B_sVar('$sgtdset[4].$send_sched',TRUE) --send schedule to weld controller

          Set_I_sVar('$sgtdset[4].$do_alert_t',2) --alert DOUT type
          Set_I_sVar('$sgtdset[4].$do_alert_i',do_sd_alert1) --alert DOUT index                           
          Set_I_sVar('$sgtdset[4].$do_fault_t',2) --fault DOUT type
          Set_I_sVar('$sgtdset[4].$do_fault_i',do_sd_fault1) --fault DOUT index                           
          Set_I_sVar('$sgtdset[4].$di_freset_i',0) --fault/alert reset DI index 
          Set_I_sVar('$sgtdset[4].$do_blow_t',2) --blowoff DOUT type
          Set_I_sVar('$sgtdset[4].$do_blow_i',do_cgsblow4) --blowoff DOUT index  --only servo tc has four dressers
        ENDIF  --four servo dressers       
                
      ENDIF  --servo tip dresser is used

    ENDIF --servo tip dress option loaded

  ENDIF --servo gun

ENDIF --spot application

END srvo_td
-----------------------------------------------------------------------------
ROUTINE set_spotvar4
-- PURPOSE: set spot welding application variables
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN

IF (numwldctrl <> 0) THEN --spot welding applciation

  Current_Ver = Version -- Set the version for reference

  IF UNINIT(ErrsInShop.ErrorsVarbls) THEN    ErrsInShop.ErrorsVarbls = 0
  ENDIF
  IF UNINIT(SpotVR4Setup) OR (Reset_Cell) THEN
    SpotVR4Setup = FALSE
  ENDIF

  StrtinErs = ErrsInShop.ErrorsVarbls -- grab current error count
  ClrUtltyErrs -- Clear all error in utility program to be used when done

  WriteLog('Starting the Spot Variables GMSPOTVR4', FALSE)

  IF (SpotVR4Setup = TRUE) THEN -- setup has already been setup
    WriteLog('  Spot Variables 4 Already Setup', FALSE)
    IF ExecSetupAgn('Spot Vars 4') THEN -- ask user if they want to setup again
      SpotVR4Setup = FALSE
    ELSE
      WriteLog('  Spot Variables 4 already Complete', FALSE)
      WriteLog('GMSPOTVR4 Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  -- Insert routines created call here
  initspot4var

  ErrsInShop.ErrorsVarbls =  ErrsInShop.ErrorsVarbls + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
  IF (ErrsInShop.ErrorsVarbls -StrtinErs) > 0 THEN -- check for I/O setup errors
    WriteLog('Spot Variable Setup GMSPOTVR4 had ' + int2str((ErrsInShop.ErrorsVarbls- StrtinErs))+' while executing', TRUE)
  ELSE
    WriteLog('Spot Variable 4 Setup completed', FALSE)
    SpotVR4Setup = TRUE
  ENDIF

  WriteLog('', FALSE)

ENDIF --numweldctrl

END set_spotvar4
-----------------------------------------------------------------------------
BEGIN

END gmspotvr4
