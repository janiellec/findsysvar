-- -----------------------------------------------------------------------
--
--   MODULE:         GMMHPRGS.KL
--   TITLE:          GMMHPRGS PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GMGBL4
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: Material Handling variable setup files. These routines will be
--                      called from the main wizard, no prompts are in the Variable file
--                      only the setttings GMWIZMH,GMWIZVIS are the questions
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--
--
--
--
--------------------------------------------------------------------------
PROGRAM GMMHREGS

%COMMENT = 'MH PRGS V4.0'

%NOLOCKGROUP
%INVISIBLE
%RWACCESS
%NOPAUSE = ERROR + COMMAND + TPENABLE

%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
%INCLUDE KLEVCCDF  -- Required for the TPERROR write command for the contants
CONST

Version = '2016-04-15'
%INCLUDE gmcnstnt

 VAR

  l_i,i,        -- Used in FOR looping

  gm_status    : INTEGER

  Reg_MH_Setup IN SHADOW : BOOLEAN -- Keeps track if routine setup Mhgrip at least first time

  StrtinErs   : INTEGER   -- How many errors I/O error counter had when the program started

  -- Set to the LAST Number of Valve Packs when the Wizard Requested and update
  LastVlvePcks,
  LastDigInBlk  IN SHADOW : INTEGER -- last number input blocks

-- variables declared for All shops
%INCLUDE gmcfgcel  -- GM wizard variables for workcell variables that are common across all shops
%INCLUDE gmcfgerr  -- Required for the configuration for GM Error counting and logging

-- variables declares for Shop specifics
--%INCLUDE gmcfgpnt  -- GM wizard variables for Paint Applications
--%INCLUDE gmcfgpwr  -- GM wizard variables for powertrain Applications
--%INCLUDE gmcfgprs  -- GM wizard variables for press Applications

-- Variables declared for Applications
%INCLUDE gmcfgmh   -- GM wizard variables for MH Applications

ROUTINE writeLog(p_message: STRING; isError: BOOLEAN) FROM GMWIZLOG

%INCLUDE gmrdutil -- has all GM common wizard routine in it
-----------------------------------------------------------------------------
ROUTINE init_BS_Reg
-- PURPOSE: Load MH Registers that are unique to Body Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN
 writeLog('Loading Body Shop MH Registers', FALSE)

 writeLog('Body Shop MH Registers loaded', FALSE)

END init_BS_Reg
-----------------------------------------------------------------------------
ROUTINE init_Prs_Reg
-- PURPOSE: Load MH Registers that are unique to Press Shop Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

writeLog('Loading Press Shop MH Registers', FALSE)

writeLog('Press Shop MH Registers loaded', FALSE)

END init_Prs_Reg
-----------------------------------------------------------------------------
ROUTINE init_Pwr_Reg
-- PURPOSE: Load MH Registers that are unique to Powertrain Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

 writeLog('Loading Powertrain Registers ', FALSE)

 writeLog('Powertrain Registers loaded', FALSE)

END init_Pwr_Reg
-----------------------------------------------------------------------------
ROUTINE init_Pnt_Reg
-- PURPOSE: Load MH Registers that are unique to Paint Applications
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
-----------------------------------------------------------------------------
BEGIN

 writeLog('Loading Paint Shop MH Registers', FALSE)

 writeLog('Paint Shop MH Registers loaded', FALSE)

END init_Pnt_Reg
-----------------------------------------------------------------------------
ROUTINE init_MH_REGS
-- PURPOSE: to initialize variables associated with Material Handling setup
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN
 IF UNINIT(Reg_MH_Setup) THEN
   Reg_MH_Setup = FALSE
 ENDIF

IF Reg_MH_Setup THEN
  IF NOT ExecSetupAgn('MH Registers') THEN -- ask user if they want to setup again
    RETURN
  ELSE
    Reg_MH_Setup = FALSE
  ENDIF
ENDIF

writeLog('Loading MH Registers for ALL Shops', FALSE)

writeLog('ALL Shops MH Registers Loaded', FALSE)

SELECT mfg_area OF -- launch the Display Setup set by wizard or load feature
    CASE(mfg_area_bs):  --Body Shop
        init_BS_Reg
    CASE(mfg_area_ps):  --Press Shop
        init_Prs_Reg
    CASE(mfg_area_pt):  --Powertrain
        init_Pwr_Reg
    CASE(mfg_area_pn):  --Paint Shop
        init_Pnt_Reg
  ELSE:
    POST_ERR(38000, 'MFG_AREA '+int2str(mfg_area)+' INVALID in init_MH_REGS routine in GMMHREGS', 0, 0) --
    shop_str = 'Unknown'
ENDSELECT

   Reg_MH_Setup = TRUE


END init_MH_REGS

--************************************************************************
--
--                 Main Body of Program
--
--************************************************************************

BEGIN

IF UNINIT(ErrsInShop.ErrorsRgstrs) THEN
  ErrsInShop.ErrorsRgstrs = 0
ENDIF
IF UNINIT(Reg_MH_Setup) THEN
  Reg_MH_Setup = FALSE
ENDIF

 StrtinErs = ErrsInShop.ErrorsRgstrs -- grab curent eror count
 ClrUtltyErrs -- Clear all error in utility program to be used when done

 WriteLog('Starting the MH Register Program', FALSE)

  IF (Reg_MH_Setup = TRUE) THEN -- setup has already been setup
      WriteLog('MH Registers Already Setup', FALSE)
    IF ExecSetupAgn('MH Registers') THEN -- ask user if they want to setup again
      Reg_MH_Setup = FALSE
    ELSE
      WriteLog('MH Registers already Complete', FALSE)
      WriteLog('GMMHREGS Setup NOT executing again', FALSE)
      RETURN
    ENDIF
  ENDIF

  init_MH_REGS

  ErrsInShop.ErrorsRgstrs =  ErrsInShop.ErrorsRgstrs + (AddUtltyErrs) -- Get all errors in utility program to be added to any program errors
 IF (ErrsInShop.ErrorsRgstrs -StrtinErs) > 0 THEN -- check for I/O setup errors
   WriteLog('MH Register Program GMMHREGS had ' + int2str((ErrsInShop.ErrorsRgstrs- StrtinErs))+' errors', TRUE)
 ELSE
   WriteLog('Material Handling Register Program completed', FALSE)
   Reg_MH_Setup = TRUE
 ENDIF

 WriteLog('', FALSE)

END GMMHREGS
