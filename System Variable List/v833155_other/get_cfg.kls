--    01-AUG-2013 This program gets the current spotweld configuration from
--                the robot to help determine which caps need to be changed.
--                If in teach the user will be prompted for which caps were
--                changed.
-------------------------------------------------------------------------------
--    01/03/14   GJK  Added functionality to automatically request a
--									  cap change on both guns if either gun is requested in a
--									  Single Ped Dual Gun configuration.
--    02/12/14   GJK  Added new menus for SGTC
--		03/05/14	 GJK  Added logic to skip questions and automatically set 
--									  request flag while in FFR for a Single Gun configuration.
--    2016/10/14 marchaka Corrected issue with number of servo gun register getting incorrectly set to 2 for spot + stud combos
--    2020/09/10 schoensm V8.33P10 change request for diP2CCReqG(1 and 2) to DI[149-150].
-------------------------------------------------------------------------------
PROGRAM GET_CFG
-------------------------------------------------------------------------------

%RWACCESS
%NOPAUSESHFT
%NOLOCKGROUP
%COMMENT='GET_CFG v4.2'
%NOPAUSE = ERROR + TPENABLE + COMMAND
%NOABORT = ERROR + COMMAND
--%INVISIBLE

-- Softpart built-ins
%ENVIRONMENT SYSDEF
%ENVIRONMENT REGOPE
%ENVIRONMENT MULTI
%ENVIRONMENT swgdef
%ENVIRONMENT IOSETUP

%INCLUDE kliotyps

CONST

	SUCCESS	      = 0
	CLR_SCRN      = 128 	--clear the screen
  CRSR_HOME     = 137 	--moves cursor to home position

VAR
  mnu_text      IN SHADOW FROM GET_CFG: ARRAY[8] OF STRING[35]  
  ans			  		IN SHADOW FROM GET_CFG: ARRAY[4] OF INTEGER
  reg_num		    IN SHADOW FROM GET_CFG: INTEGER
  total_guns	  IN SHADOW FROM GET_CFG: INTEGER
  num_eq	  		IN SHADOW FROM GET_CFG : INTEGER
  sg_tlchng			IN SHADOW FROM GET_CFG : BOOLEAN
  sg_gunpres		IN SHADOW FROM GET_CFG : INTEGER
  num_sgtc			IN SHADOW FROM GET_CFG : INTEGER
  max_sgtc			IN SHADOW FROM GET_CFG : INTEGER
  e1_num_guns		IN SHADOW FROM GET_CFG : INTEGER
  e2_num_guns		IN SHADOW FROM GET_CFG : INTEGER
  num_wd_ctls		IN SHADOW FROM GET_CFG : INTEGER
  stud					IN SHADOW FROM GET_CFG : BOOLEAN
  eq_type				IN SHADOW FROM GET_CFG : INTEGER
  index						IN SHADOW FROM GET_CFG: INTEGER
  tp_req_g1w1  		IN SHADOW FROM GET_CFG: INTEGER
  tp_req_g2w1  		IN SHADOW FROM GET_CFG: INTEGER
  tp_req_g3w1  		IN SHADOW FROM GET_CFG: INTEGER
  tp_req_g4w1  		IN SHADOW FROM GET_CFG: INTEGER
  tp_req_g1w2  		IN SHADOW FROM GET_CFG: INTEGER
  tp_req_g2w2  		IN SHADOW FROM GET_CFG: INTEGER
  plc_req_g1w1  		IN SHADOW FROM GET_CFG: INTEGER
  plc_req_g2w1  		IN SHADOW FROM GET_CFG: INTEGER
  plc_req_g3w1  		IN SHADOW FROM GET_CFG: INTEGER
  plc_req_g4w1  		IN SHADOW FROM GET_CFG: INTEGER
  plc_req_g1w2  		IN SHADOW FROM GET_CFG: INTEGER
  plc_req_g2w2  		IN SHADOW FROM GET_CFG: INTEGER
  diP1CCReqG1		IN SHADOW FROM GET_CFG : INTEGER	--85
  diP1CCReqG2		IN SHADOW FROM GET_CFG : INTEGER	--86
  diP1CCReqG3		IN SHADOW FROM GET_CFG : INTEGER	--87
  diP1CCReqG4		IN SHADOW FROM GET_CFG : INTEGER	--88
  diP2CCReqG1		IN SHADOW FROM GET_CFG : INTEGER	--149
  diP2CCReqG2		IN SHADOW FROM GET_CFG : INTEGER	--150
  tp_enbld			IN SHADOW FROM GET_CFG: INTEGER
  ffr_act				IN SHADOW FROM GET_CFG: INTEGER
  debug 				IN SHADOW FROM GET_CFG: INTEGER		--set to 26 to debug auto
  cfg_regnum		IN SHADOW FROM GET_CFG: INTEGER
  num_sg_reg		IN SHADOW FROM GET_CFG: INTEGER		--16
  entry					:	INTEGER
  real_flag			:	BOOLEAN
  vald_ans			:	BOOLEAN
  done					:	BOOLEAN
  done2					:	BOOLEAN
  status				:	INTEGER
  screen				:	STRING[4]  
  int_value  		: INTEGER
  int_value2 		: INTEGER
  real_value 		: REAL
  real_value2		: REAL
  str_value  		: STRING[10]
  str_value2 		: STRING[10]
  escape                : BOOLEAN  --jja  R30iB Update02
  gm_entry, gm_status: INTEGER

  g_servog_opt IN SHADOW FROM GMVARS : BOOLEAN   -- Servo gun option loaded

%INCLUDE klrdutil
%INCLUDE klrdread
ROUTINE srvo_optn FROM gmwizspt
----------------------------------------------------------------------
ROUTINE Set_io_val(port_type: INTEGER; port_no: INTEGER;g_value: BOOLEAN)
----------------------------------------------------------------------
VAR
value: INTEGER
status: INTEGER

BEGIN
	IF g_value THEN
		value = 1
	ELSE
		value = 0;
	ENDIF
SET_PORT_VAL (port_type, port_no, value, status)
END Set_io_val

----------------------------------------------------------------------
ROUTINE Get_io_val(port_type: INTEGER; port_no: INTEGER):INTEGER
----------------------------------------------------------------------
VAR
value: INTEGER
status: INTEGER

BEGIN

	GET_PORT_VAL(port_type, port_no, value, status)
  
     IF (status = SUCCESS) THEN
     	RETURN(value) 
     ELSE                     --GET_PORT_VAL was NOT successful
        WRITE TPDISPLAY(CHR(143),cr)
        WRITE TPDISPLAY('GET_PORT_VAL Failed',cr,' Status = ',status,cr)
      	RETURN(0) 
     ENDIF

END Get_io_val

----------------------------------------------------------------------
ROUTINE Clr_Scr
----------------------------------------------------------------------
BEGIN
  --clear the tp screen ???
  WRITE TPDISPLAY (CHR(CLR_SCRN),CHR(CRSR_HOME))
  WRITE TPERROR (CHR(CLR_SCRN),CHR(CRSR_HOME))
END Clr_Scr

----------------------------------------------------------------------
ROUTINE Chk_Bvar(p_name:STRING;v_name:STRING):BOOLEAN
----------------------------------------------------------------------

VAR
	v_stat		:BOOLEAN

BEGIN

   GET_VAR(entry, p_name, v_name, v_stat, status)

     IF (status = SUCCESS) THEN
     	RETURN(v_stat) 
     ELSE                     --GET_VAR was NOT successful
        WRITE TPDISPLAY(CHR(143),cr)
        WRITE TPDISPLAY('GET_VAR Failed',cr,' Status = ',status,cr)
      	RETURN(FALSE) 
     ENDIF

END Chk_Bvar

----------------------------------------------------------------------
ROUTINE Chk_Ivar(p_name:STRING;v_name:STRING):INTEGER
----------------------------------------------------------------------

VAR
	v_stat		:INTEGER

BEGIN

   GET_VAR(entry, p_name, v_name, v_stat, status)

     IF (status = SUCCESS) THEN
     	RETURN(v_stat) 
     ELSE                     --GET_VAR was NOT successful
        WRITE TPDISPLAY(CHR(143),cr)
        WRITE TPDISPLAY('GET_VAR Failed',cr,' Status = ',status,cr)
      	RETURN(0) 
     ENDIF

END Chk_Ivar

----------------------------------------------------------------------------
ROUTINE Get_Config --Get spotweld config from robot
----------------------------------------------------------------------------
VAR
	l_i		:INTEGER
	v_gun	:INTEGER
  vname		:STRING [32]
  tmp_str		:STRING [3]
  equiptype: INTEGER

BEGIN

  IF UNINIT(g_servog_opt) THEN
    srvo_optn
  ENDIF

   num_eq = Chk_Ivar('*SYSTEM*','$spotnumeq')
   e1_num_guns = Chk_Ivar('*SYSTEM*','$spoteqsetup[1].$num_guns')
   
   IF (num_eq > 1) THEN
      IF ($spoteqsetup[2].$studwelder = FALSE) THEN --equipment 2 is not a studwelder
        IF (g_servog_opt = TRUE) THEN  --servo gun option is loaded on the robot
          GET_VAR(gm_entry, '*SYSTEM*','$sgcfg[2].$equip_type', equiptype, gm_status)
          IF gm_status <> 0 THEN
            POST_ERR(38000, '$sgcfg[2].$equip_type FAILED', gm_status, 0)
            total_guns = e1_num_guns
          ELSE 
            IF (equiptype = 2) THEN  --equipment 2 is a servo gun
              e2_num_guns = Chk_Ivar('*SYSTEM*','$spoteqsetup[2].$num_guns')
              total_guns = e1_num_guns + e2_num_guns
            ELSE  --equipment 2 is not a servo gun
              total_guns = e1_num_guns
            ENDIF --equipment 2 is a servo gun
          ENDIF--valid sysvar read
        ELSE  --servo gun option is not installed on the roboot
          total_guns = 0
        ENDIF --servo gun option is loaded on the robot
      ELSE         
          total_guns = e1_num_guns        
      ENDIF --equipment 2 is not a stud welder      
   ELSE            
      total_guns = e1_num_guns
   ENDIF
  
   stud = Chk_Bvar('*SYSTEM*','$SPOTEQSETUP[2].$STUDWELDER')
   eq_type = Chk_Ivar('*SYSTEM*','$sgcfg[1].$EQUIP_TYPE')
   num_wd_ctls = Chk_Ivar('*SYSTEM*','$SPOTCONFIG.$NUM_WD_CTLS')

   sg_tlchng = Chk_Bvar('GMCUSTO','SGUNCHNG')                 --------added for SGTC 021814 GJK
   IF(sg_tlchng = TRUE) THEN
   	 num_sgtc = 0
     tmp_str = ''
     vname = ''
     FOR l_i = 1 TO max_sgtc DO 
    	 CNV_INT_STR(l_i,2,0,tmp_str)
    	 tmp_str = SUB_STR(tmp_str,2,1)
       vname = '$SGCFG[1].$G_MAP[1].$GUN_NUM['+ tmp_str +']'
       v_gun = Chk_Ivar('*SYSTEM*',vname)
	  	 IF (v_gun <>255)THEN
    	 	 num_sgtc = num_sgtc + 1
    	 ENDIF
     ENDFOR
   	 sg_gunpres = Chk_Ivar('*SYSTEM*','$SGCFG[1].$G_CFG[1].$GUN_NUM[1]')
    	 WRITE (sg_gunpres,cr)
   ENDIF	 
 --  wrdwn_tip = Chk_Rvar('$SGGUN1.$SETUP.$WRDWN_TIP')

--Reset Gun Prompt Registers
SET_INT_REG (num_sg_reg,total_guns,status)

END Get_Config

----------------------------------------------------------------------------
ROUTINE Rst_Requests --Reset Cap change TP request Flags
----------------------------------------------------------------------------
BEGIN
	
	Set_io_val(io_flag, tp_req_g1w1, FALSE)--F[21]
	Set_io_val(io_flag, tp_req_g2w1, FALSE)--F[22]
	Set_io_val(io_flag, tp_req_g3w1, FALSE)--F[23]
	Set_io_val(io_flag, tp_req_g4w1, FALSE)--F[24]
	Set_io_val(io_flag, tp_req_g1w2, FALSE)--F[25]
	Set_io_val(io_flag, tp_req_g2w2, FALSE)--F[26]

END Rst_Requests

----------------------------------------------------------------------------
ROUTINE Get_PLC_Req --Get PLC cap change requests
----------------------------------------------------------------------------
BEGIN
		plc_req_g1w1 = Get_io_val(io_din, diP1CCReqG1)--DI[85]
		plc_req_g2w1 = Get_io_val(io_din, diP1CCReqG2)--DI[86]
		plc_req_g3w1 = Get_io_val(io_din, diP1CCReqG3)--DI[87]
		plc_req_g4w1 = Get_io_val(io_din, diP1CCReqG4)--DI[88]

		plc_req_g1w2 = Get_io_val(io_din, diP2CCReqG1)--DI[149]
		plc_req_g2w2 = Get_io_val(io_din, diP2CCReqG2)--DI[150]
		
	  --IF DI[85]=ON set F[21]=ON
	  IF (plc_req_g1w1 =1) THEN
		 	Set_io_val(io_flag, tp_req_g1w1, TRUE)
		ENDIF
	  --IF DI[86]=ON set F[22]=ON
		IF (plc_req_g2w1 =1) THEN
			Set_io_val(io_flag, tp_req_g2w1, TRUE)
	  ENDIF
	  --IF DI[87]=ON set F[23]=ON
    IF (plc_req_g3w1 =1) THEN
			Set_io_val(io_flag, tp_req_g3w1, TRUE)
		ENDIF
	  --IF DI[88]=ON set F[24]=ON
    IF (plc_req_g4w1 =1) THEN
			Set_io_val(io_flag, tp_req_g4w1, TRUE)
		ENDIF
		
	  --IF DI[117]=ON set F[25]=ON
    IF (plc_req_g1w2 =1) THEN
			Set_io_val(io_flag, tp_req_g1w2, TRUE)
		ENDIF
	  --IF DI[118]=ON set F[26]=ON
    IF (plc_req_g2w2 =1) THEN
			Set_io_val(io_flag, tp_req_g2w2, TRUE)
		ENDIF

	  --IF Single Ped Dual Gun Both caps must be cahnged --GJK added 229-250 01/03/14
    IF(total_guns>=2)THEN
    --IF Gun1 WC1 request ON turn Gun1 WC2 request ON
	    IF (e1_num_guns=2) AND (num_wd_ctls=2) AND (stud=FALSE) AND (plc_req_g1w1=1) THEN
				Set_io_val(io_flag, tp_req_g1w2, TRUE)
			ENDIF
  	  --IF Gun1 WC2 request ON turn Gun1 WC1 request ON
   	 IF (e1_num_guns=2) AND (num_wd_ctls=2) AND (stud=FALSE) AND (plc_req_g1w2=1) THEN
				Set_io_val(io_flag, tp_req_g1w1, TRUE)
		 ENDIF
     IF(total_guns>=3)THEN
		  --IF Dual Ped Dual Gun Both caps on PED must be cahnged
  	  --IF Gun2 WC1 request ON turn Gun2 WC2 request ON
	  	  IF (e2_num_guns=2) AND (num_wd_ctls=2) AND (stud=FALSE) AND (plc_req_g2w1=1) THEN
					Set_io_val(io_flag, tp_req_g2w2, TRUE)
				ENDIF
  		  --IF Gun2 WC2 request ON turn Gun2 WC1 request ON
   		 IF (e2_num_guns=2) AND (num_wd_ctls=2) AND (stud=FALSE) AND (plc_req_g2w2=1) THEN
					Set_io_val(io_flag, tp_req_g2w1, TRUE)
			 ENDIF
			ENDIF
		ENDIF

END Get_PLC_Req

----------------------------------------------------------------------
----------------------------------------------------------------------
ROUTINE Chk_Ans(max_num:INTEGER;i_ans:INTEGER):BOOLEAN --Check for valid user answer
----------------------------------------------------------------------

VAR
	valid		:BOOLEAN

BEGIN
  valid = FALSE

  SELECT (max_num) OF

    CASE(1) : --1 Gun Config 
     	--Only valid answers
			IF(i_ans = 1) OR (i_ans = 0) THEN
     		valid = TRUE
				IF(i_ans = 1) THEN
					Set_io_val(io_flag, tp_req_g1w1, TRUE)
	     	  RETURN(valid)
	     	ELSE
	     	  RETURN(valid)
	     	ENDIF
     	ELSE
     	  valid = FALSE
     	  RETURN(valid)
     	ENDIF

    CASE(2) : --2 Guns Config
    	--Only valid answers
			IF(i_ans = 2) OR (i_ans = 1) OR (i_ans = 0) THEN 
				--ans2 must not = ans1 to be valid. if they = then the gun was already selected in question1
     		IF (ans[1] <> ans[2]) THEN 
	     		valid = TRUE 
					IF(i_ans = 1) THEN
						Set_io_val(io_flag, tp_req_g1w1, TRUE)
	    	 	  RETURN(valid)
	     		ELSE
	     	  	IF(i_ans = 2) AND (num_wd_ctls = 1) THEN
							Set_io_val(io_flag, tp_req_g2w1, TRUE)
	     	  		RETURN(valid)
	     			ELSE
		     	  	IF(i_ans = 2) AND (num_wd_ctls = 2) THEN		-- Is GUN 2 with 2 weld controllers always GUN1 on weld controller 2?
								Set_io_val(io_flag, tp_req_g1w2, TRUE)		--    or is it GUN2 on weld controller 1?
	     	  			RETURN(valid)
							ELSE
	     	  			RETURN(valid)
	     	  		ENDIF
	     			ENDIF
	     		ENDIF
	     	ELSE
	     	  valid = FALSE
  	   	  RETURN(valid)
	     	ENDIF
     	ELSE
     	  valid = FALSE
     	  RETURN(valid)
     	ENDIF

    CASE(3) : --3 Guns Config
     	--Only valid answers
			IF(i_ans = 3) OR (i_ans = 2) OR (i_ans = 1) OR (i_ans = 0) THEN
				--ans1, ans2, and ans3 must not = to be valid. if they = then the gun was already selected in previous prompt
     		IF (ans[1] <> ans[2]) AND (ans[1] <> ans[3]) AND (ans[2] <> ans[3]) THEN 
	     		valid = TRUE
					IF(i_ans = 1) THEN
						Set_io_val(io_flag, tp_req_g1w1, TRUE)
	    	 	  RETURN(valid)
	     		ELSE
	     	  	IF(i_ans = 2) THEN
							Set_io_val(io_flag, tp_req_g2w1, TRUE)
	     	  		RETURN(valid)
	     			ELSE
	     	  		IF(i_ans = 3) THEN
								Set_io_val(io_flag, tp_req_g1w2, TRUE)
	     	  			RETURN(valid)
	     				ELSE
	     	  			RETURN(valid)
	     				ENDIF
	     			ENDIF
	     		ENDIF
     		ELSE
     	  	valid = FALSE
     	  	RETURN(valid)
     		ENDIF
     	ELSE
     	  valid = FALSE
     	  RETURN(valid)
     	ENDIF

    CASE(4) : --4 Guns Config
     	--Only valid answers
			IF(i_ans = 4) OR (i_ans = 3) OR (i_ans = 2) OR (i_ans = 1) OR (i_ans = 0) THEN
				--ans1, ans2, ans3, and ans4 must not = to be valid. if they = then the gun was already selected in previous prompt
     		IF (ans[1] <> ans[2]) AND (ans[1] <> ans[3]) AND (ans[2] <> ans[3]) AND (ans[1] <> ans[4]) AND (ans[2] <> ans[4]) AND (ans[3] <> ans[4])THEN --If q2 ans doesn't = q1 ans OR q3 ans OR q4
	     		valid = TRUE
					IF(i_ans = 1) THEN
						Set_io_val(io_flag, tp_req_g1w1, TRUE)
	    	 	  RETURN(valid)
	     		ELSE
	     	  	IF(i_ans = 2) THEN
							Set_io_val(io_flag, tp_req_g2w1, TRUE)
	     	  		RETURN(valid)
	     			ELSE
	     	  		IF(i_ans = 3) THEN
								Set_io_val(io_flag, tp_req_g1w2, TRUE)
	     	  			RETURN(valid)
	     				ELSE
	     	  			IF(i_ans = 4) THEN
									Set_io_val(io_flag, tp_req_g2w2, TRUE)
	     	  				RETURN(valid)
	     					ELSE
	     	  				RETURN(valid)
	     					ENDIF
	     				ENDIF
	     			ENDIF
	     		ENDIF
     		ELSE
     	  	valid = FALSE
     	  	RETURN(valid)
     		ENDIF
     	ELSE
       	valid = FALSE
   	  	RETURN(valid)
   		ENDIF
  ENDSELECT

END Chk_Ans

----------------------------------------------------------------------
ROUTINE Init_vars
----------------------------------------------------------------------

BEGIN
IF UNINIT(mnu_text[1]) THEN
  --            012345678901234567890123456789012345
  mnu_text[1] = '--- TP Cap change Request Menu --- '
  mnu_text[2] = '  Which gun(s) did you change'
  mnu_text[3] = '           caps on ?'
  mnu_text[4] = ' #1 = Gun 1'
  mnu_text[5] = ' #2 = Gun 2'
  mnu_text[6] = ' #3 = Gun 3'
  mnu_text[7] = ' #4 = Gun 4'
  mnu_text[8] = ' #0 = EXIT'
ENDIF

IF UNINIT(reg_num) THEN reg_num = 40 ; ENDIF 
IF UNINIT(cfg_regnum) THEN  cfg_regnum = 9 ; ENDIF 
IF UNINIT(done) THEN done = FALSE ; ENDIF 
IF UNINIT(ans[1]) THEN ans[1] = 99 ; ENDIF 
IF UNINIT(ans[2]) THEN ans[2] = 99 ; ENDIF 
IF UNINIT(ans[3]) THEN ans[3] = 99 ; ENDIF 
IF UNINIT(ans[4]) THEN ans[4] = 99 ; ENDIF 
IF UNINIT(tp_req_g1w1) THEN tp_req_g1w1 = 21 ; ENDIF 
IF UNINIT(tp_req_g2w1) THEN tp_req_g2w1 = 22 ; ENDIF 
IF UNINIT(tp_req_g3w1) THEN tp_req_g3w1 = 23 ; ENDIF 
IF UNINIT(tp_req_g4w1) THEN tp_req_g4w1 = 24 ; ENDIF 
IF UNINIT(tp_req_g1w2) THEN tp_req_g1w2 = 25 ; ENDIF 
IF UNINIT(tp_req_g2w2) THEN tp_req_g2w2 = 26 ; ENDIF 

IF UNINIT(plc_req_g1w1) THEN plc_req_g1w1 = 0 ; ENDIF 
IF UNINIT(plc_req_g2w1) THEN plc_req_g2w1 = 0 ; ENDIF 
IF UNINIT(plc_req_g3w1) THEN plc_req_g3w1 = 0 ; ENDIF 
IF UNINIT(plc_req_g4w1) THEN plc_req_g4w1 = 0 ; ENDIF 
IF UNINIT(plc_req_g1w2) THEN plc_req_g1w2 = 0 ; ENDIF 
IF UNINIT(plc_req_g2w2) THEN plc_req_g2w2 = 0 ; ENDIF 

IF UNINIT(diP1CCReqG1)  THEN diP1CCReqG1    =  85    ; ENDIF
IF UNINIT(diP1CCReqG2)  THEN diP1CCReqG2    =  86    ; ENDIF
IF UNINIT(diP1CCReqG3)  THEN diP1CCReqG3    =  87    ; ENDIF
IF UNINIT(diP1CCReqG4)  THEN diP1CCReqG4    =  88    ; ENDIF

IF UNINIT(diP2CCReqG1)  THEN diP2CCReqG1    =  149  ; ENDIF
IF UNINIT(diP2CCReqG2)  THEN diP2CCReqG2    =  150  ; ENDIF

IF UNINIT(num_sg_reg)  THEN num_sg_reg    =  16    ; ENDIF
IF UNINIT(debug)  THEN debug    =  0    ; ENDIF

IF UNINIT(max_sgtc)  THEN max_sgtc    =  4    ; ENDIF

END Init_vars

----------------------------------------------------------------------------
BEGIN -- GET_CFG
----------------------------------------------------------------------------
Init_vars
Get_config
IF (debug = 26)THEN
	tp_enbld=0
ELSE
	tp_enbld =Get_io_val(io_sopout, 7)
ENDIF
ffr_act =Get_io_val(io_dout, 18)
Rst_Requests
IF (tp_enbld=1) OR (ffr_act=1) THEN
  FORCE_SPMENU(tp_panel,SPI_TPUSER,1)
  done = FALSE

  ans[1]=96
  ans[2]=97
  ans[3]=98
  ans[4]=99
  IF (sg_tlchng= FALSE) THEN --Added for SGTC 021214 GJK
    IF (total_guns=1) AND (ffr_act=1) THEN --Added 030514 GJK
    	Set_io_val(io_flag, tp_req_g1w1, TRUE)
    ELSE
      REPEAT
        REPEAT
	  Clr_Scr
   	  --WRITE ('---------------------------------',cr)
          WRITE (mnu_text[1],cr)
          WRITE (mnu_text[2],cr)             
          WRITE (mnu_text[3],cr)             
          WRITE (mnu_text[4],cr)  --Gun1              
                
          IF (total_guns=1) THEN
	    WRITE (mnu_text[8],cr)
          ELSE
	    IF (total_guns=2) THEN	
	      WRITE (mnu_text[5],cr)
	      WRITE (mnu_text[8],cr)
	    ELSE
	      IF (total_guns=3) THEN	
	        WRITE (mnu_text[5],cr)
	        WRITE (mnu_text[6],cr)
	        WRITE (mnu_text[8],cr)
	      ELSE
		IF (total_guns=4) THEN	
		  WRITE (mnu_text[5],cr)
	  	  WRITE (mnu_text[6],cr)
	    	  WRITE (mnu_text[7],cr)
	    	  WRITE (mnu_text[8],cr)
	      	ELSE
	          WRITE ('Invalid numberof guns...',cr)
	      	  ABORT
	      	ENDIF
	      ENDIF	
	    ENDIF			
          ENDIF 

	  WRITE ('---------------------------------',cr)
          WRITE('  Enter selection  >  ')
          READ (ans[1])
        UNTIL (ans[1] >= 0) AND (ans[1] <=4)

  	vald_ans = Chk_Ans(total_guns,ans[1])  
  
        IF (vald_ans) THEN
  	  -- Set R[] or sysvar for answer
    	  SET_INT_REG(reg_num, ans[1], status)
    	  done = TRUE
  	ENDIF
  	  
      UNTIL done
  
      done2=FALSE
      index =2

      IF(ans[1]<>0) AND (total_guns>1) THEN
	REPEAT
	  Clr_Scr
      --            012345678901234567890123456789012345
          WRITE ('---------------------------------',cr)
    	  WRITE ('Did you change caps on another gun?',cr)
          WRITE ('  If so, Which gun did you change?',cr)      --fixed text 022414 GJK       
          IF (total_guns = 2) AND (ans[1] = 1)THEN
    	    WRITE (mnu_text[5],cr)    --Gun2        
      	    WRITE (mnu_text[8],cr)    --Exit            
    	  ELSE
    	    IF (total_guns =2) AND (ans[1] =2) THEN
	      WRITE (mnu_text[4],cr)  	--Gun1           
      	      WRITE (mnu_text[8],cr)	--Exit                
  	    ELSE
	      IF (total_guns =3) AND (ans[1] =1) THEN
	      	IF((ans[2]<>2) AND (ans[3]<>2)) THEN
	      	  WRITE (mnu_text[5],cr)	--Gun2 
	      	ENDIF
	      	IF((ans[2]<>3) AND (ans[3]<>3)) THEN
		  WRITE (mnu_text[6],cr)	--Gun3
		ENDIF
	      	WRITE (mnu_text[8],cr)	--Exit
	      ELSE
		IF (total_guns =3) AND (ans[1] =2) THEN
	      	  IF((ans[2]<>1) AND (ans[3]<>1)) THEN
		     WRITE (mnu_text[4],cr)	--Gun1
		  ENDIF
	      	  IF((ans[2]<>3) AND (ans[3]<>3)) THEN
	  	     WRITE (mnu_text[6],cr)	--Gun3
	  	  ENDIF
	    	  WRITE (mnu_text[8],cr)	--Exit
	    	ELSE
		  IF (total_guns =3) AND (ans[1] =3) THEN
	            IF((ans[2]<>1) AND (ans[3]<>1)) THEN
		      WRITE (mnu_text[4],cr)	--Gun1
		    ENDIF
	            IF((ans[2]<>2) AND (ans[3]<>2)) THEN
	  	      WRITE (mnu_text[5],cr)	--Gun2
	  	    ENDIF
	    	    WRITE (mnu_text[8],cr)	--Exit
		  ELSE
		    IF (total_guns=4) AND (ans[1] =1)  THEN	
		      IF((ans[2]<>2) AND (ans[3]<>2) AND (ans[4]<>2)) THEN
		        WRITE (mnu_text[5],cr)	--Gun2 
		      ENDIF
	              IF((ans[2]<>3) AND (ans[3]<>3) AND (ans[4]<>3)) THEN
	  	        WRITE (mnu_text[6],cr)	--Gun3
	  	      ENDIF
	              IF((ans[2]<>4) AND (ans[3]<>4) AND (ans[4]<>4)) THEN
	  	        WRITE (mnu_text[7],cr)	--Gun4
	  	      ENDIF
	    	      WRITE (mnu_text[8],cr)	--Exit
	    	    ELSE
		      IF (total_guns=4) AND (ans[1] =2)  THEN	
		        IF((ans[2]<>1) AND (ans[3]<>1) AND (ans[4]<>1)) THEN
			  WRITE (mnu_text[4],cr)	--Gun1
			ENDIF
		        IF((ans[2]<>3) AND (ans[3]<>3) AND (ans[4]<>3)) THEN
	  		  WRITE (mnu_text[6],cr)	--Gun2 
	  		ENDIF
			IF((ans[2]<>4) AND (ans[3]<>4) AND (ans[4]<>4)) THEN
	    		  WRITE (mnu_text[7],cr)	--Gun3
	    		ENDIF
	    		WRITE (mnu_text[8],cr)	--Exit
	    	      ELSE
		        IF (total_guns=4) AND (ans[1] =3)  THEN	
			  IF((ans[2]<>1) AND (ans[3]<>1) AND (ans[4]<>1)) THEN
			    WRITE (mnu_text[4],cr)	--Gun1
	  		  ENDIF
	  		  IF((ans[2]<>2) AND (ans[3]<>2) AND (ans[4]<>2)) THEN
			    WRITE (mnu_text[5],cr)	--Gun2 
			  ENDIF
		          IF((ans[2]<>4) AND (ans[3]<>4) AND (ans[4]<>4)) THEN
	    		    WRITE (mnu_text[7],cr)	--Gun3
	    		  ENDIF
	    		  WRITE (mnu_text[8],cr)	--Exit
	    	  	ELSE
			  IF (total_guns=4) AND (ans[1] =4)  THEN	
			    IF((ans[2]<>1) AND (ans[3]<>1) AND (ans[4]<>1)) THEN
			      WRITE (mnu_text[4],cr)	--Gun1
			    ENDIF
			    IF((ans[2]<>2) AND (ans[3]<>2) AND (ans[4]<>2)) THEN
 			      WRITE (mnu_text[5],cr)	--Gun2 
 			    ENDIF
			    IF((ans[2]<>3) AND (ans[3]<>3) AND (ans[4]<>3)) THEN
			      WRITE (mnu_text[6],cr)	--Gun3
			    ENDIF
	    		    WRITE (mnu_text[8],cr)	--Exit
	    	  	  ELSE
	    	  	  ENDIF
	    	  	ENDIF
	    	      ENDIF
	    	    ENDIF
	    	  ENDIF
	    	ENDIF
	      ENDIF
  	    ENDIF
  	  ENDIF

	  WRITE ('---------------------------------',cr)
	  WRITE('  Enter selection  >  ')
  	  READ (ans[index])

	  vald_ans = Chk_Ans(total_guns,ans[index])  
	  IF (vald_ans) THEN
	    IF(ans[index] = 0) THEN
	      done2=TRUE
	    ENDIF
	    index = index + 1
	    IF(index = total_guns + 1) THEN
              done2=true
	    ENDIF
	  ENDIF

  	UNTIL (done2)	
      ENDIF
    ENDIF --L510 030514
    FORCE_SPMENU(tp_panel,SPI_TPTCH,1)

  ELSE  --SGTC Menu
    REPEAT
      REPEAT
	      Clr_Scr
   	    --WRITE ('---------------------------------',cr)
        WRITE (mnu_text[1],cr)
        WRITE (mnu_text[2],cr)             
        WRITE (mnu_text[3],cr)             

        --jja  R30iB Update02 A
        IF UNINIT(escape) THEN
          escape = FALSE
        ELSE
          escape = FALSE   
        ENDIF                

	IF (sg_gunpres=1) THEN
	  WRITE (mnu_text[4],cr) --Gun1
        ELSE  --jja  R30iB Update02 Assume its a AirGun 
          IF UNINIT(e1_num_guns) THEN
            e1_num_guns=0
          ENDIF
          IF (e1_num_guns > 0) THEN
  	    WRITE (mnu_text[4],cr) --Gun1
            escape = TRUE
          ENDIF 
	ENDIF
 	IF (sg_gunpres=2) THEN	
	    WRITE (mnu_text[5],cr) --Gun2
        ELSE  --jja  R30iB Update02 Assume its a AirGun 
          IF UNINIT(e2_num_guns) THEN
            e2_num_guns=0
          ENDIF
          IF (e2_num_guns > 0) THEN
  	    WRITE (mnu_text[5],cr) --Gun2
            escape = TRUE
          ENDIF 
	ENDIF
	IF (sg_gunpres=3) THEN	
	  WRITE (mnu_text[6],cr) --Gun3
	ENDIF
        IF (sg_gunpres=4) THEN	
	  WRITE (mnu_text[7],cr) --Gun4
	ENDIF

        WRITE (mnu_text[8],cr)    --Exit            
        WRITE ('---------------------------------',cr)
        WRITE('  Enter selection  >  ')
        READ (ans[1])
--jja  R30iB Update02      UNTIL (ans[1] = 0) OR (ans[1]=sg_gunpres)
      UNTIL (ans[1] = 0) OR (ans[1]=sg_gunpres) OR (escape=TRUE)--jja  R30iB Update02

     	--Only valid answers
			IF(ans[1] = 1) THEN
  			Set_io_val(io_flag, tp_req_g1w1, TRUE)
	    ELSE
  			IF(ans[1] = 2) THEN
    			Set_io_val(io_flag, tp_req_g2w1, TRUE)
	     	ELSE
    			IF(ans[1] = 3) THEN
      			Set_io_val(io_flag, tp_req_g3w1, TRUE)
        	ELSE
      			IF(ans[1] = 4) THEN
  		      	Set_io_val(io_flag, tp_req_g4w1, TRUE)
    	     	ENDIF
          ENDIF
        ENDIF
      ENDIF
          
  	    -- Set R[] or sysvar for answer
    	  SET_INT_REG(reg_num, ans[1], status)
    	  done = TRUE
  	  
    UNTIL done
  
 	  FORCE_SPMENU(tp_panel,SPI_TPTCH,1)
 	ENDIF
ELSE
	Get_Plc_Req
ENDIF

END GET_CFG
	