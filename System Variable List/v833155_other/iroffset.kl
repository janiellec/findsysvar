--
--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--    
--             All Rights Reserved
--             Copyright (C)   1994
--             Fanuc Robotics Corporation
--             FANUC LTD Japan
--    
--             Karel is a registered trademark of
--             Fanuc Robotics Corporation
--
--    Program: iroffset.kl 
--    
--    Description:
--      This routine is used to pass arguements to vision commands because they current
--      don't support my needs. First value is a process(Pick/Drop/Rack), second value
--      is the PLC style. 
--        1,2,3,4 = Pick            6,7,8,9 = Drop
--        
--
--      This routine is uesed in the place of the iRVision Commands.
--
--    Language: KAREL
--    
--    Source File:        iroffset.kl  
--    
--    Author: Lloyd Steed
--            Fanuc Robotics America, Inc.
--            3900 W. Hamlin Road
--            Rochester Hills, Michigan 48309-3253
--    
--    Modification history:
--
--      04-11-07 First Go Picks ONLY
--
--    10-15-13 jja R30iB Development
------------------------------------------------------------------
PROGRAM iroffset  -- Do not change the name of the program
------------------------------------------------------------------
%PRIORITY = 40
%RWACCESS
%NOPAUSESHFT
%NOLOCKGROUP
%COMMENT='iROffset v3.0'
%INVISIBLE
%NOPAUSE = ERROR + TPENABLE + COMMAND
%NOABORT = ERROR + COMMAND

-- Softpart built-ins
%ENVIRONMENT SYSDEF
%ENVIRONMENT REGOPE
%ENVIRONMENT TPE
%ENVIRONMENT MNMCDEF
%ENVIRONMENT proddef
%ENVIRONMENT SWGDEF
%ENVIRONMENT FDEV 
%ENVIRONMENT SWGBLT
%ENVIRONMENT iosetup
%ENVIRONMENT strng
%ENVIRONMENT UIF
%ENVIRONMENT CVIS

%INCLUDE etdcapsh
%INCLUDE klevkmsk
%INCLUDE kltpctrl
%INCLUDE kliotyps
%INCLUDE vierrdef

CONST

ER_PAUSE = 1

VAR
  str_value    : STRING[15]
  irpassfail   : INTEGER
  id_status    : INTEGER
  sty_status   : INTEGER
  ignore_stat  : INTEGER
  id_value     : INTEGER
  style_val    : INTEGER
  status       : INTEGER
  p_style      : STRING[3]
  vr_value     : INTEGER
  vp_name      : STRING[8]
  status1      : INTEGER
  status2      : INTEGER
  status3      : INTEGER
  pf_register  : INTEGER
  get_status   : INTEGER

ROUTINE int_to_strg(p_int:INTEGER):STRING         FROM klutils

----------------------------------------------------------------------
BEGIN  -- iroffset
----------------------------------------------------------------------

-- Init Some Stuff 
IF UNINIT(ignore_stat) THEN 

    p_style  = ' '
    vp_name = ' '
    status1 = 0
    status2 = 0
    status3 = 0
    id_value = 0
    style_val = 0
    str_value = ''
    id_status = 0
    sty_status = 0
    pf_register = 35
    get_status = 0
    ignore_stat = 0
ENDIF
 
   SET_INT_REG(34,  0, status)

GET_TPE_PRM(1,1, status1, id_value, str_value, id_status)   -- Get the process value from the TP prog.
GET_TPE_PRM(2,1, status2, style_val, str_value, sty_status) -- Get the style value from the TP prog.
GET_TPE_PRM(3,1, status3, style_val, str_value, sty_status) -- VR that user wants offsets too

-- Valid Arguement sizes
IF (id_status = 0) OR (sty_status = 0) AND ((status1 < 10) AND (status2 < 128) AND (status3 < 11) ) THEN
  
    SELECT status1 of
    
      CASE(1): --Pick 1
           
           IF status2 < 10 THEN
             p_style = int_to_strg(status2)
             vp_name = 'PICK1_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'PICK1_'+p_style+''
           ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

           IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
           ENDIF
                      
      CASE(2): --Pick 2
       
           IF status2 < 10 THEN 
             p_style = int_to_strg(status2)
             vp_name = 'PICK2_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'PICK2_'+p_style+''
            ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

            IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
            ENDIF
    
       CASE(3): --Pick 3
       
           IF status2 < 10 THEN 
             p_style = int_to_strg(status2)
             vp_name = 'PICK3_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'PICK3_'+p_style+''
            ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

            IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
            ENDIF

       CASE(4): --Pick 4
       
           IF status2 < 10 THEN 
             p_style = int_to_strg(status2)
             vp_name = 'PICK4_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'PICK4_'+p_style+''
            ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

            IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
            ENDIF

       CASE(6): --Drop 1
       
           IF status2 < 10 THEN 
             p_style = int_to_strg(status2)
             vp_name = 'DROP1_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'DROP1_'+p_style+''
            ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

            IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
            ENDIF

       CASE(7): --Drop 2
       
           IF status2 < 10 THEN 
             p_style = int_to_strg(status2)
             vp_name = 'DROP2_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'DROP2_'+p_style+''
            ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

            IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
            ENDIF

       CASE(8): --Drop 3
       
           IF status2 < 10 THEN 
             p_style = int_to_strg(status2)
             vp_name = 'DROP3_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'DROP3_'+p_style+''
            ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

            IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
            ENDIF

        CASE(9): --Drop 4
       
           IF status2 < 10 THEN 
             p_style = int_to_strg(status2)
             vp_name = 'DROP4_0'+p_style+''
           ELSE
             p_style = int_to_strg(status2)
             vp_name = 'DROP4_'+p_style+''
            ENDIF

           V_GET_OFFSET(vp_name, status3, get_status)

            IF get_status = 0 THEN
              SET_INT_REG(34,  1, status)
            ELSE
              SET_INT_REG(34,  0, status)
              --POST_ERR(IPL_E_BAD_AR,'goff failed',0,ER_PAUSE )
            ENDIF
       
    ENDSELECT 

ELSE
 POST_ERR(ER_TYPEER,'parameters AR[]',0,2 )
 ABORT
ENDIF

END iroffset   -- Do not change the name of the program


