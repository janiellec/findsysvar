-------------------------------------------------------------------------
--
--   MODULE:         WRT_MENU.KL
--   TITLE:          Wrtie to a menu Item
--
--   WRITTEN BY:     Randy Kosaski
--   REVISION DATE:  06-16-11
--
--   LANGUAGE:       KAREL 7.70
--   CONTROL GROUP:  AUTOMATED SYSTEMS GROUP
--
--   ORDER NUMBER:
--   PROJECT NAME:   --
--   DESCRIPTION:
--                  This is an improved MESSAGE instruction
--                  it forces the user screen and writes up to a 40 character message
--                 and allows for an register value to be included in text
--              ARGUMENTS
--                 AR[1] first 16 char of message string for Menu NAME
--                 AR[2] second 16 char of message string Menu Vaiable to Write to
--                 AR[x,y,z] 16 char of message string or interger  (Max 40 characters total)
--              EXAMPLE
--                TP Prog statement:
--
--                CALL WRT_MENU('MENU305','MENU_TITLE','Start-up Grip#',111,'Closed W/O Part?') ;
--                CALL WRT_MENU('MENU305','MENU_TEXT[1]','Open Gripper#',111,'NO Part in Tool.') ;
--                CALL WRT_MENU('MENU305','MENU_TEXT[2]','Scrap Part in To','ol#',111) ;
--              IF (AR[2]=1),CALL WRT_MENU('MENU305','MENU_TEXT[2]','Scrap Part in To','ol#',111,'OPENING HERE!!') ;

--    HISTORY OF CHANGES:
--
--    REV   DATE       BY               COMMENTS
--    ---   ---------  ----------  -------------------------
-------------------------------------------------------------------------
PROGRAM WRT_MENU
%ALPHABETIZE
%NOLOCKGROUP
%COMMENT     = 'Write Menu Var'

------------------------------------------------------------------------------
%INCLUDE KLEVCCDF  -- USED FOR THE TPERROR Buit-in

CONST
ver = 'RRK 6/16/11'
INT_ARG = 1 -- Integer argument type
REAL_ARG = 2 -- Real argument type
STRING_ARG = 3 -- String argument type
NO_ARG    = 4 -- no argument was found
VAR

--Main Body of Program

tp_param : ARRAY[10] OF INTEGER

i,
status,
prm_type,
prm_int,
int_value,
register_no,
entry :INTEGER

real_value,
PRM_REAL  : REAL -- Used for the GET_TPE_PRM builtin
PRM_STRG  : STRING[16] -- Used for GET_TPE_PRM builtin
--cnvd_string   : STRING[11] -- used for the target in cnv_#_string builtin

menu_name  : STRING[16] -- Used for menu_name that the user want to write menu_text into menu Variable
menu_var   : STRING[16] -- Used for the menu variable the user want to wrtite menu_text into
menu_text     : STRING[40]  -- The Text the User wants to write to the menu_var
error_string  : STRING[128] -- Used for writing an erro message to the alarm Log
loaded,
initialized,
real_flag,
param_fault  : BOOLEAN -- Used for if the Paramter failed or is invalid
------------------------------------------------------------------------------
-- ROUTINE Trim
-- Remove leading and trailing spaces
-------------------------------------------------------------------------------
ROUTINE Trim (strText : STRING) : STRING

VAR
  strChar      : STRING[1]
  strTemp      : STRING[128]
  intFront     : INTEGER
  intBack      : INTEGER
  intIndex     : INTEGER
  intLength    : INTEGER

BEGIN

  strChar = ''
  strTemp = ''

  intLength = STR_LEN(strText)

  IF intLength = 0 THEN RETURN(strText) ; ENDIF

  intIndex = 1
  intFront = intIndex

  --find the front of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex + 1
    IF intIndex <= intLength THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intFront = intIndex
    ELSE
      strChar = ''
    ENDIF

  ENDWHILE

  intIndex = STR_LEN(strText)
  intBack = intIndex

  --find the back of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex - 1
    IF intIndex >= 1 THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intBack = intIndex
    ELSE
      strChar = ''
    ENDIF
  ENDWHILE

  -- using SUB_STR to extract the string between front and back doesn't work - so we do it the hard way
  FOR intIndex=intFront TO intBack DO
    strChar = SUB_STR(strText, intIndex, 1)
    strTemp = strTemp + strChar
  ENDFOR

  RETURN(strTemp)

END Trim
-----------------------------------------------------------------------------
ROUTINE get_param(req_number:INTEGER):INTEGER
-- PURPOSE:  this routine get the parameters from a teach pendant called program
--
--
-- INPUT:    the parameter number requested
--            -
-- OUTPUT:   the parameter type integer
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN
  prm_type = 0
  GET_TPE_PRM (req_number, prm_type, prm_int, prm_real,PRM_STRG, status)
  IF (status = 17042) THEN -- no parameter
    prm_type = NO_ARG
  ENDIF

  RETURN(prm_type)

END get_param
-----------------------------------------------------------------------------
ROUTINE ReadAddStrng(read_number:INTEGER)
-- PURPOSE:  Read register convert interger to string and add to string text
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

VAR
cnvd_string  : STRING[10] --

BEGIN

   register_no = read_number
   GET_REG(register_no, real_flag, int_value, real_value, status)
     IF status <>0 THEN
       POST_ERR(38000, 'Get register built-in Failed', status, 0) --
     ELSE -- Register value is good
       IF real_flag THEN
         CNV_REAL_STR(real_value,10,2,cnvd_string)
       ELSE
         CNV_INT_STR(int_value,10,0,cnvd_string)
       ENDIF
      -- cnvd_string = trim(cnvd_string)
       menu_text = menu_text+' ' + trim(cnvd_string) +' ' -- add to string
     ENDIF

END ReadAddStrng
-----------------------------------------------------------------------------

BEGIN

 menu_name = ''
 menu_var = ''
 menu_text = ''
 param_fault = FALSE

-- Get all the Parameter that are passed Maximum of ten

FOR i = 1 TO ARRAY_LEN(tp_param) DO
  tp_param[i] = get_param(i)
  SELECT (tp_param[i]) OF --
    CASE (INT_ARG):  -- Integer argument type means read register
           ReadAddStrng(prm_int)-- Read Register# passed then Add to the String


    CASE (REAL_ARG):  -- Real argument type
          POST_ERR(38000, 'WRT_MENU AR NOT String/Integer', 0, 0) --
          param_fault = TRUE

    CASE (STRING_ARG):  -- String argument type
         SELECT (i) OF --
         CASE (1):  -- First Parameter is Menu NAME
                 menu_name = PRM_STRG
         CASE (2):  -- Second Parameter is Menu Variable Name
                 menu_Var = PRM_STRG
         ELSE: --
                 menu_text = menu_text + PRM_STRG
         ENDSELECT --

    CASE (NO_ARG):  -- No more argument type
      i =  ARRAY_LEN(tp_param)  -- no more parameters end for loop
    ELSE: --
  ENDSELECT --
ENDFOR --

  -- Check if Program exists
  LOAD_STATUS(menu_name, loaded, initialized)
  IF initialized THEN -- if menu exist write to it
    SET_VAR(entry, menu_name , menu_var, menu_text, status)
    IF status <> 0 THEN
      POST_ERR(38000, menu_name +' '+menu_text +' FAILED', status, 0) --
      DELAY 3000
    ENDIF
  ELSE
    POST_ERR(38000, menu_name+ ' is not Loaded', 0, 0) --
  ENDIF

END WRT_MENU
