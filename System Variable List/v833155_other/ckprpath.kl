-- -----------------------------------------------------------------------
--
--   MODULE:         CHKPRPATH.KL
--   TITLE:          CHKPRPATH PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  4/4/16
--
--   LANGUAGE:       KAREL 8.33 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   GM Global
--   PROJECT NAME:   GM Global Center
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--         DESCRIPTION: this program is used from the MOV_POUNCE program.
--         is it to determine if the used had created a path program to move between the the
--         the desired pounce positions. It is desired to NOT create a
--         Pounce to pounce program, and to have the position of the robot pounces
--         so that it maybe able to get from one pounce to the other pounce without a
--         user created path program, but incase this program will see if loaded
--         and if will set teh register to use it.
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--
--
--
--
--------------------------------------------------------------------------
PROGRAM CKPRPath

%COMMENT = 'Chk4 PR Path'
%NOPAUSE = ERROR + COMMAND + TPENABLE
%NOLOCKGROUP
%INCLUDE GMPNCVAR -- all pounce variables used in this program and the GMPNCDTA program

CONST

 Version = '04-09-16 R.K.'
         Max_pounces = 10 -- Currently Multiple pounces only supports 10 including HOME

TYPE

  PATH_INFO FROM GMPNCDTA = STRUCTURE        --Position Regisiter Path
    Use_Path2_PR      : BOOLEAN --To PR[10] needs Path
    PrgName4Path      : STRING[16]-- the path program name to check to see if loaded in memory
  ENDSTRUCTURE

TYPE

  PR_PATH FROM GMPNCDTA = STRUCTURE        --Position Regisiter Path
    Path_to_PR      : ARRAY[Max_pounces] OF PATH_INFO --To PR[10] needs Path
    LastModified    : STRING[20] -- time and date when Soething was edited in Stucture
  ENDSTRUCTURE

VAR

PR_Num  IN CMOS FROM GMPNCDTA :ARRAY[Max_pounces] OF PR_Path -- array of pounce path data
ResetPR_Data IN CMOS : BOOLEAN -- Used for if the user wants to reset the names or use PR variables

Cur_pr,des_pr,  -- used in FOR loops
gm_status  : INTEGER -- Used for builtins status returned

--Cur_Frm_Str  : STRING[3] -- Used for the current Set of Variables being Displayed

UsePRPath,  -- If the Current Path to Path is enabled by user
MustUsePath IN CMOS : BOOLEAN -- Used for if a shop requires path to path to be created and used

Curnt_Pounce,
DesntnPounce:INTEGER

Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine
initialized, -- Used for the load status builting if a VR file exist but no PC.
loaded  : BOOLEAN -- Used for the builtin returning if a file is loaded

PathProg : STRING[16]-- the path program name to check to see if loaded in memory
Use_Path,
MaxPouncReg,   -- Used for the maximmum number of Pounces register available for use
Cur_PouncReg,  -- used for the Current Pounce register the robot is at to start from
Des_PouncReg ,  -- used for the register to read the Destination Pounce to end at

UsePRPathReg IN CMOS : INTEGER -- Used for the register to set for if path is loaded or not

real_Flag  : BOOLEAN --
int_value  : INTEGER --
real_value : REAL --

Prog_StrReg IN CMOS : INTEGER -- Used for String Register number to go and GET the program path to check if loaded

ROUTINE init_PthVars FROM GMPNCDTA -- initializes the Path Data variables

-----------------------------------------------------------
ROUTINE int2str (p_integer:INTEGER):STRING
-- Routine to convert integers to string variables
-----------------------------------------------------------
VAR
  l_string: STRING[9]
BEGIN
  l_string = ''
IF UNINIT(p_integer) THEN
  p_integer = 0
ENDIF

  CNV_INT_STR(p_integer, 0, 0, l_string)
  RETURN(SUB_STR(l_string, 2, STR_LEN(l_string)))

END int2str
-----------------------------------------------------------------------------
ROUTINE GetIReg(P_Reg_no:INTEGER):INTEGER
--
-- PURPOSE: to get Interger from Register, if not Integer ABORT
-- INPUT:  Register Number to read
--            -
-- OUTPUT: Integer Value Read from register
--            -
-----------------------------------------------------------------------------
BEGIN

GET_REG(P_Reg_no, real_flag, int_value, real_value, gm_status)

 IF gm_status <> 0 THEN
   -- Must abort because cannot interface with paramters
   POST_ERR(38000, 'GET_REG on R'+int2str(P_reg_no)+' Failed in CKPRPATH Program', gm_status, 2) --
 ENDIF

 IF real_flag THEN
   --- Again Need to ABORT if not as expected, don't
   POST_ERR(38000, 'R['+int2str(P_reg_no)+'] is a "REAL" in CKPRPATH', 0, 2) --
 ENDIF

 IF (int_value <0)  THEN
   POST_ERR(38000, 'R['+int2str(P_reg_no)+'] is '+int2str(int_value)+' & INVALID in CKPRPATH', 0, 2) --
 ENDIF

 RETURN(Int_Value)-- return the integer Value read

END GetIReg
-----------------------------------------------------------------------------
ROUTINE init_vars
-- PURPOSE:
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN

Current_Ver  = Version

IF UNINIT(Prog_StrReg) THEN
  Prog_StrReg = 1
ENDIF
IF UNINIT(MustUsePath) THEN
  MustUsePath = FALSE
ENDIF

IF UNINIT(Des_PouncReg) THEN
  Des_PouncReg = 103
ENDIF
IF UNINIT(Cur_PouncReg) THEN
  Cur_PouncReg = 104
ENDIF
IF UNINIT(UsePRPathReg) THEN
  UsePRPathReg = 106
ENDIF
IF UNINIT(MaxPouncReg) THEN
  MaxPouncReg = 108
ENDIF
IF UNINIT(ResetPR_Data) THEN
  ResetPR_Data = FALSE
ENDIF

END init_vars
--************************************************************************
--                 Main Body of Program
--************************************************************************

BEGIN

init_vars

init_PthVars -- initialize the path variables for GMPNCDTA

-- go get current Pounce robot is at determined by reference positions
Curnt_Pounce = GetIReg(Cur_PouncReg)
IF (Curnt_Pounce <1) OR (Curnt_Pounce >ARRAY_LEN(PR_NUM)) THEN
  POST_ERR(38000, 'Curnt_Pounce '+int2str(Curnt_Pounce)+' INVALID for CKPRPath Program',0, 2) --
ENDIF

-- get destination pounce user wants to go to
DesntnPounce  = GetIReg(Des_PouncReg)
IF (DesntnPounce <1) OR (DesntnPounce >ARRAY_LEN(PR_NUM)) THEN
  POST_ERR(38000, 'DesntnPounce '+int2str(DesntnPounce)+' INVALID for CKPRPath Program',0, 2) --
ENDIF

-- reset to the default
PathProg = 'NO_PATH_PROG'
Use_Path =  0 -- 11 is INVALID so should FAULT tp, this would be a catistrafic failure only
MustUsePath = FALSE -- default not to use Path

-- Check if user has enabled a path.
UsePRPath = PR_NUM[Curnt_Pounce].Path_To_PR[DesntnPounce].Use_Path2_PR

IF (UsePRPath) THEN
  PathProg = PR_NUM[Curnt_Pounce].Path_To_PR[DesntnPounce].PrgName4Path
  Use_Path = DesntnPounce -- set equal to PR moving to
ENDIF

-- Set the Path Name in String Register for user to see, even in case of Faults and for Diagnostics
-- if no path is required it will clear back to Null so event it is call it should'nt work
 SET_STR_REG(Prog_strReg,PathProg,gm_status)-- Get path name created by MOV_POUNCE program
   IF gm_status <> 0 THEN -- if we could not set ABORT!!!
     POST_ERR(38000, 'CHKPRPTH, Failed to set SR['+int2str(UsePRPathReg)+'] to '+PathProg, gm_status, 2) --
   ENDIF

 SET_INT_REG(UsePRPathReg,Use_Path,gm_status) -- set that user MUST use path
   IF gm_status <> 0 THEN -- if we could not set ABORT!!!
     POST_ERR(38000, 'CHKPRPTH, Failed Set R['+int2str(UsePRPathReg)+'] to '+int2str(Use_Path), gm_status, 2) --
   ENDIF

IF UsePRPath THEN  -- Now check if program is loaded

  loaded = FALSE -- Set loaded to FALSE by default
  LOAD_STATUS(PathProg, loaded, initialized) -- check if loaded program is loaded

  IF (Loaded = FALSE) THEN -- check if system has a file loaded
    POST_ERR(38000,' MOV_POUNCE,'+ PathProg + ' Prog NOT Loaded for USE', 0, 2) -- indicate cannot continue with program
  ELSE -- File is loaded use it
    SET_INT_REG(UsePRPathReg,1,gm_status) -- set that user MUST use path
  ENDIF

ENDIF

END CKPRPath
