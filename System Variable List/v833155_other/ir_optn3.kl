-------------------------------------------------------------------------------
--
--    02-SEPT-2008 iRVision Error Recovery choices version #1.
--    GM-GRS-4 Vision Recovery Choices
--    03-02-09 Global 2 Register Val.
--    03-10-10   Steedlj BODYSHOP/Metal Add SET_VAR and repost function
--    02-24-11   Steedlj Purge Conditions
--    10-15-13 jja R30iB Development
--    08-06-16 RRK added ManIntvntReq constant instead of hard coded was DO55 now DO17
--    2017/07/24 marchaka Modify text for ir_text2.
--    2017/8/2 GS added the use of PR's instead of Register also will now display vision data
--    10-01-20 schoensm moved Offset Data to PR[23] from PR[10]
-------------------------------------------------------------------------------
PROGRAM ir_optn3
-------------------------------------------------------------------------------

%RWACCESS
%NOPAUSESHFT
%NOLOCKGROUP
%COMMENT='iRVsn TolFt v4.3'
%NOPAUSE = ERROR + TPENABLE + COMMAND
%NOABORT = ERROR + COMMAND

-- Softpart built-ins
%ENVIRONMENT SWGDEF
%ENVIRONMENT SGDEF1
%ENVIRONMENT proddef
%ENVIRONMENT SYSDEF
%ENVIRONMENT strng
%ENVIRONMENT REGOPE
%ENVIRONMENT UIF
%ENVIRONMENT ioblt
%ENVIRONMENT IOSETUP

CONST
  ER_WARN  = 0
  ER_PAUSE = 1
  ER_ABORT = 2
  io_dout       =  2   -- Digital output
  tpi_enable    = 249
  io_sopin      = 11   -- Same as io_opin
  io_din        =  1   -- Digital input
  io_tpin       = 14
  io_opin       = 11
  tpi_edit      = 145
  io_uopin      = 20   -- User operator's panel input
  tpi_reset     = 153  -- TP RESET
  CH_RPOST = 675
  ManIntvntReq  = 17 -- RK added Manual intervention required, was hard coded

VAR
  ans:          INTEGER
  done:         BOOLEAN
  cycle_strt   IN SHADOW : BOOLEAN
  ans_status   IN SHADOW : INTEGER
  edt_status   IN SHADOW : INTEGER
  ans2_status  IN SHADOW : INTEGER

  status:    	INTEGER
  g_status:     INTEGER
  psve:         INTEGER
  screen:       STRING[4]
  title1        IN SHADOW FROM IR_OPTN3: STRING[15]
  title2        IN SHADOW FROM IR_OPTN3: STRING[15]
  title3        IN SHADOW FROM IR_OPTN3: STRING[15]
  ir_text1      IN SHADOW FROM IR_OPTN3: STRING[25]
  ir_text2      IN SHADOW FROM IR_OPTN3: STRING[25]
  ir_text3      IN SHADOW FROM IR_OPTN3: STRING[25]
	 
  tol_val       IN SHADOW FROM IR_OPTN3: STRING[8]
  Tolerance :ARRAY[6] of REAL

  ir_prval,tol_preg      IN SHADOW FROM IR_OPTN3: INTEGER
  ir_answer     IN SHADOW FROM IR_OPTN3: INTEGER
  int_value:    INTEGER
  form_type:    INTEGER
  real_value:   REAL
  real_value2:  REAL
  str_value:    STRING[10]
  str_value2:   STRING[10]
  check_val     IN SHADOW FROM IR_OPTN3: BOOLEAN
  xyz,tol_pr:          XYZWPR
  real_flag:    BOOLEAN
  x_val:        INTEGER
  y_val:        INTEGER
  z_val:        INTEGER
  wpr_val:      INTEGER
  element:      INTEGER
  limit:        INTEGER
  gm_status:    INTEGER

  prmpt_back   IN SHADOW FROM GMCUSTO  : BOOLEAN
  dnet64size   IN SHADOW FROM GMCUSTO  : BOOLEAN

%INCLUDE etdcapsh
%INCLUDE klrdutil
%INCLUDE klrdread

-----------------------------------------------------------------------------
ROUTINE repost
-- DESCRIPTION:
--   This routine is called by Cycle Start to repost
--   User Screen for selection questions.
-----------------------------------------------------------------------------
VAR

  l_status: INTEGER

BEGIN

IF done = FALSE THEN

IF dnet64size = FALSE THEN
  SET_VAR(psve, '*system*', '$PRMPDSPON', TRUE, gm_status)
  --Turn on ManInterventReqTP
   g_status = iovalset(IO_DOUT,ManIntvntReq, 1)
   prmpt_back = TRUE
ENDIF

 l_status = iovalrd(IO_DIN, 6, ans_status)
 l_status = iovalrd(IO_TPIN, 153, edt_status)
 l_status = iovalrd(IO_OPIN, 1, ans2_status)
   --writeconsole('[repost] Read I/O')
 IF (ans_status = 1) OR (edt_status = 1) OR (ans2_status = 1) THEN
   --writeconsole('[repost] Read I/O TRUE')
  cycle_strt = TRUE
  FORCE_SPMENU(tp_panel,SPI_TPUSER,1)
 ELSE
  cycle_strt = FALSE
 ENDIF
ENDIF
 ENABLE CONDITION[CH_RPOST]

END repost

------------------------------------------------------------------------------
-- ROUTINE Trim
-- Remove leading and trailing spaces
-------------------------------------------------------------------------------
ROUTINE Trim (strText : STRING) : STRING

VAR
  strChar      : STRING[1]
  strTemp      : STRING[128]
  intFront     : INTEGER
  intBack      : INTEGER
  intIndex     : INTEGER
  intLength    : INTEGER

BEGIN

  strChar = ''
  strTemp = ''

IF UNINIT(strText) THEN
  strText = 'UNINT'
  POST_ERR(38000, 'String Not Initialized??', 0, 0) --
ENDIF


  intLength = STR_LEN(strText)

  IF intLength = 0 THEN RETURN(strText) ; ENDIF

  intIndex = 1
  intFront = intIndex

  --find the front of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex + 1
    IF intIndex <= intLength THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intFront = intIndex
    ELSE
      strChar = ''
    ENDIF

  ENDWHILE

  intIndex = STR_LEN(strText)
  intBack = intIndex

  --find the back of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex - 1
    IF intIndex >= 1 THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intBack = intIndex
    ELSE
      strChar = ''
    ENDIF
  ENDWHILE

  -- using SUB_STR to extract the string between front and back doesn't work - so we do it the hard way
  FOR intIndex=intFront TO intBack DO
    strChar = SUB_STR(strText, intIndex, 1)
    strTemp = strTemp + strChar
  ENDFOR

  RETURN(strTemp)

END Trim

-------------------------------------------------------------------------------
-- ROUTINE Real to String
-- Converts integer number to string.
-------------------------------------------------------------------------------
ROUTINE Rel2Str (RVal : REAL) : STRING

VAR
  strOut : STRING[15]

BEGIN

  CNV_REAL_STR(RVal, 4, 2, strOut)
  strOut = Trim(strOut)

  RETURN (strOut)

END Rel2Str

-----------------------------------------------------------------------------
-- ir_optn3
-----------------------------------------------------------------------------

BEGIN --ir_optn3


done = FALSE
cycle_strt = FALSE

IF UNINIT(title1) THEN
  title1   = '3D Vision'
  title2   = '2D Vision'
  title3   = 'Tolerance Fault'
  ir_text1 = 'Retry Vision Process'
  ir_text2 = 'Adjust Tolerance Limits'
  ir_text3 = 'Return Home & Abort'
  ir_prval  = 23       --schoensm changed to PR[23] was PR[10] 
  tol_preg = 74
  ir_answer = 308
  check_val = FALSE
  form_type = 2
ENDIF

IF UNINIT(ans) THEN
  ans = 2
ENDIF 
IF UNINIT(tol_preg) THEN
  tol_preg = 74
ENDIF 
  tol_preg = 74

GET_TPE_PRM(1,1, form_type, real_value, str_value, status)     -- Get the Form Type the TP program
GET_TPE_PRM(2,1, ir_prval, real_value, str_value, status)      -- Get the PR from the TP program
GET_TPE_PRM(3,1, ir_answer, real_value2, str_value2, status)   -- Get the R[X] to write the answer to.
xyz = GET_POS_REG(ir_prval, status)
tol_pr = GET_POS_REG(tol_preg, status)
Tolerance[1] = tol_pr.x
Tolerance[2] = tol_pr.y
Tolerance[3] = tol_pr.z
Tolerance[4] = tol_pr.w
Tolerance[5] = tol_pr.p
Tolerance[6] = tol_pr.r

GET_REG(301, real_flag, x_val, real_value, status)              -- Get R[301] compare value
GET_REG(302, real_flag, y_val, real_value, status)              -- Get R[302] compare value
GET_REG(303, real_flag, z_val, real_value, status)              -- Get R[303] compare value
GET_REG(304, real_flag, wpr_val, real_value, status)            -- Get R[304] compare value
GET_REG(307, real_flag, element, real_value, status)            -- Get R[307] Element value failure

-- Determine Limit to display 
    SELECT element OF
      CASE (1):
 	  -- X is out of range
	   Tol_val = Rel2Str(Tolerance[1])
--	   limit = x_val
      CASE (2):
 	  -- Y is out of range
	   Tol_val = Rel2Str(Tolerance[2])
--	   limit = y_val
      CASE (3):
 	  -- Z is out of range
	   Tol_val = Rel2Str(Tolerance[3])
--	   limit = z_val
      CASE (4):
 	  -- WPR is out of range
	   Tol_val = Rel2Str(Tolerance[4])
--	   limit = wpr_val
      CASE (5):
 	  -- WPR is out of range
	   Tol_val = Rel2Str(Tolerance[5])
--	   limit = wpr_val
      CASE (6):
 	  -- WPR is out of range
	   Tol_val = Rel2Str(Tolerance[6])
--	   limit = wpr_val
      ELSE:
    ENDSELECT

IF form_type = 2 THEN
-- 2D iRVision Tolerance Error Recovery Choices
  FORCE_SPMENU(tp_panel,SPI_TPUSER,1)

--jja  R30iB Update02 temp  loop1::
 	-- Start Repost Condition
  	IF (done = FALSE) THEN
	  IF (ans <= 2) AND (ans <> 0) THEN
     	    --writeconsole('[ir_optn] Repost')
     	    CONDITION[CH_RPOST]: WITH $SCAN_TIME = 150
     	    WHEN (NOT TPIN[tpi_enable]) DO
       	    repost
     	    ENDCONDITION
     	    ENABLE CONDITION[CH_RPOST]
	  ENDIF
  	ENDIF

  REPEAT
    REPEAT

      loop1::
--jja  R30iB Update02 temp 	-- Start Repost Condition
--jja  R30iB Update02 temp  	IF (done = FALSE) THEN
--jja  R30iB Update02 temp	  IF (ans <= 2) AND (ans <> 0) THEN
--jja  R30iB Update02 temp     	    --writeconsole('[ir_optn] Repost')
--jja  R30iB Update02 temp     	    CONDITION[CH_RPOST]: WITH $SCAN_TIME = 150
--jja  R30iB Update02 temp     	    WHEN (NOT TPIN[tpi_enable]) DO
--jja  R30iB Update02 temp       	    repost
--jja  R30iB Update02 temp     	    ENDCONDITION
--jja  R30iB Update02 temp     	    ENABLE CONDITION[CH_RPOST]
--jja  R30iB Update02 temp	  ENDIF
--jja  R30iB Update02 temp  	ENDIF


      WRITE (cr,'       ',title2,' Tolerance Fault',cr)
      WRITE ('1 = ',ir_text1,cr)
      WRITE ('2 = ',ir_text2,cr)
      WRITE ('PR[',ir_prval,']',cr)
      WRITE (tol_pr)
--      WRITE (xyz)
      WRITE (cr,'Element:',element,' out of range',cr)
--      WRITE ('Limit: +-',limit,' (mm/deg)',cr)
      WRITE ('Limit: +-',tol_val,' (mm/deg)',cr)
      WRITE ('Enter selection  = ')
      READ (ans)
    UNTIL (ans >= 1) AND (ans <=2)

	 -- Case for Re-post
     IF ( (cycle_strt = TRUE) AND (done = FALSE) ) THEN
       goto loop1
     ENDIF

    -- Set R[X] for answer
      SET_INT_REG(ir_answer, ans, status)
      done = TRUE
      DISABLE CONDITION[CH_RPOST]
      PURGE CONDITION[CH_RPOST]
      IF dnet64size = FALSE THEN
      --Turn off ManInterventReqTP

	    SET_VAR(psve, '*system*', '$PRMPDSPON', FALSE, gm_status)
        g_status = iovalset(IO_DOUT,ManIntvntReq, 0)
        prmpt_back = FALSE
      ENDIF
      FORCE_SPMENU(tp_panel,SPI_TPTCH,1)
  UNTIL done
ENDIF

IF form_type = 3 THEN
-- 3D iRVision Tolerance Error Recovery Choices
  FORCE_SPMENU(tp_panel,SPI_TPUSER,1)
  done = FALSE

--jja  R30iB Update02 temp
 	-- Start Repost Condition
  	IF (done = FALSE) THEN
	  IF (ans <= 2) AND (ans <> 0) THEN
     	    --writeconsole('[ir_optn] Repost')
     	    CONDITION[CH_RPOST]: WITH $SCAN_TIME = 150
     	    WHEN (NOT TPIN[tpi_enable]) DO
       	    repost
     	    ENDCONDITION
     	    ENABLE CONDITION[CH_RPOST]
          ENDIF
  	ENDIF

  REPEAT
    REPEAT
loop2::


      WRITE ('       ',title1,' Tolerance Fault',cr)
      WRITE ('1 = ',ir_text1,cr)
      WRITE ('2 = ',ir_text2,cr)
      WRITE ('3 = ',ir_text3,cr)
      WRITE ('PR[',ir_prval,']',cr)
      WRITE (xyz)
--      WRITE (cr,'Element:',element,' out of range +-',limit,'(mm/deg)',cr)
      WRITE (cr,'Element:',element,' out of range +-',tol_val,'(mm/deg)',cr)
      WRITE ('Enter selection  = ')
      READ (ans)
    UNTIL (ans >= 1) AND (ans <=3)

     -- Case for Re-post
     IF ( (cycle_strt = TRUE) AND (done = FALSE) ) THEN
       goto loop2
     ENDIF

    -- Set R[X] for answer
      SET_INT_REG(ir_answer, ans, status)
      done = TRUE
      DISABLE CONDITION[CH_RPOST]
      PURGE CONDITION[CH_RPOST]
      IF dnet64size = FALSE THEN
      --Turn off ManInterventReqTP
	    SET_VAR(psve, '*system*', '$PRMPDSPON', FALSE, gm_status)
        g_status = iovalset(IO_DOUT,ManIntvntReq, 0)
        prmpt_back = FALSE
      ENDIF
      FORCE_SPMENU(tp_panel,SPI_TPTCH,1)
  UNTIL done
ENDIF

END ir_optn3







