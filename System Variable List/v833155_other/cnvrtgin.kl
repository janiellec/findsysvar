-- -----------------------------------------------------------------------
--
--   MODULE:         BIT+SWAP.KL
--   TITLE:          BIT+SWAP PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  1/23/16
--
--   LANGUAGE:       KAREL 8.30 R30iB
--   CONTROL GROUP:  BODY SHOP EXECUTION GROUP
--   STATUS:
--
--
--   ORDER NUMBER:   000000
--   PROJECT NAME:   GOOD CUSTOMER
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2016
--
--         DESCRIPTION: THis preogram is needed by MHGRIP when the user is using a
--                      Baluff I/O LINK block. It has to read the group inputs and
--                      convert into a Real and place into data register
--                      The Group Inputs and markers are currently configured in GMMHGPIO are setup
--                      based on the variable 'EOATUseAnlog' from the GMCFGMH program set by GMWIZMH.
--                      Currently only supports a single analog, and THE Baluff Block is configured by
--                      GMENETS2.kl. this block has very specific confiuration to tell the block that it has
--                      I/O Link on the port.
--
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--
--         9-22-16               R Kosaski        Added second analog to GI 23&24 from 12&13
--
--         10-13-16              R.Kosaski        Modified where GRP_ANLG4_GI was not updated correctly
--
--
--------------------------------------------------------------------------
PROGRAM CNVRTGIN

%NOLOCKGROUP
%INVISIBLE
%RWACCESS

%noabort = error + command
%NOPAUSE = ERROR + COMMAND + TPENABLE
%nobusylamp

%COMMENT = 'CNVRT Grip LVDT'

%ENVIRONMENT IOBLT --iovalrd iovalset
%ENVIRONMENT REGOPE --required for register builtins

%INCLUDE kliotyps  -- Required for the base I/O types i.e. IO_DIN etc.
CONST

Version = '2016-12-04'

VAR

Current_Ver  IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine

gm_status :INTEGER --
DataIsValid IN CMOS : BOOLEAN -- Used for

CurntGrp1Pos IN CMOS : REAL -- Used for converted position of the analog gripper
CurntGrp2Pos IN CMOS : REAL -- Used for converted position of the analog gripper
AnlgGrip1Reg IN CMOS : INTEGER -- Used for register the analog input will be placed
AnlgGrip2Reg IN CMOS : INTEGER -- Used for register the analog input will be placed

MultiplyThis IN CMOS : INTEGER -- Used for the read GI that has the 9th bit in word
AddThis      IN CMOS : INTEGER -- Used for the read 2nd analog for position to be added to the the first read and  * .255

update_time IN CMOS : INTEGER -- Used for how long to wait before updating the variable again

Grp_Anlg1_GI IN CMOS : INTEGER -- Used for the go input the analog input come in on
Grp_Anlg2_GI IN CMOS : INTEGER -- Used for the go input the analog input come in on
Grp_Anlg3_GI IN CMOS : INTEGER -- Used for the go input the analog input come in on
Grp_Anlg4_GI IN CMOS : INTEGER -- Used for the go input the analog input come in on

NumAnlogInpt IN SHADOW FROM GMCFGMH : INTEGER -- If Analog for Powertrain

%INCLUDE GMRDUTIL -- needed for the GM utility INT@STR routine

--************************************************************************
--                 Main Body of Program
--************************************************************************

BEGIN

Current_Ver = Version -- Set the version for reference


-- Gripper #1 defaults
IF UNINIT(Grp_Anlg1_GI) THEN
  Grp_Anlg1_GI = 10
ENDIF
IF UNINIT(Grp_Anlg2_GI) THEN
  Grp_Anlg2_GI = 11
ENDIF

IF UNINIT(AnlgGrip1Reg) THEN -- set teh Register to set gripper to
  AnlgGrip1Reg = 1
ENDIF

-- Gripper #2 defaults
IF UNINIT(Grp_Anlg3_GI) THEN
  Grp_Anlg3_GI = 23      -- was 12
ENDIF
IF UNINIT(Grp_Anlg4_GI) THEN
  Grp_Anlg4_GI = 24      -- was 13
ENDIF

IF Grp_Anlg3_GI = 12 THEN -- needed for orignal release to update number
 Grp_Anlg3_GI = 23        -- can remove after 2016
ENDIF
IF Grp_Anlg4_GI = 13 THEN  --10-13-16 had coppy and paste error, Had to change
 Grp_Anlg4_GI = 24         -- from Grp_Anlg3_GI to Grp_Anlg4_GI   RK
ENDIF

IF UNINIT(AnlgGrip2Reg) THEN -- set the Register to set gripper to
  AnlgGrip2Reg = 11
ENDIF

IF UNINIT(NumAnlogInpt) THEN
  NumAnlogInpt = 1
ENDIF

IF UNINIT(update_time) THEN  -- the delay for loop wait
  update_time = 200
ENDIF

DataIsValid = TRUE -- set data is valid out of the gate, and error should cause to end
                   -- this programs is Started and maintianed out of ATCUSTOM when the analog is
                   -- enabled and events occur like a cycle start. this tasks and others will be chaked for
                   -- Execution.

REPEAT --

-- read group input #1, multiply times 256 (9th bit on)
-- Read group input#2, add to the result of above
-- then multiply sum by (.255)

-- (((GI10*256)+GI[11])*.255)
-- Grip Analog module #1
  gm_status = IOVALRD(io_gpin, Grp_Anlg1_GI, MultiplyThis)-- read the input
    IF (gm_status <>0) THEN
      POST_ERR(38000, 'Get GI['+int2str(Grp_Anlg1_GI)+'] Failed', gm_status, 0) -- SYST-034 Hold Signal Lost
      DataIsValid = FALSE
    ENDIF

  gm_status = IOVALRD(io_gpin, Grp_Anlg2_GI, AddThis)-- read the  input
    IF (gm_status <>0) THEN
      POST_ERR(38000, 'Get GI['+int2str(Grp_Anlg2_GI)+'] Failed', gm_status, 0) -- SYST-034 Hold Signal Lost
      DataIsValid = FALSE
    ENDIF

   IF DataIsValid THEN -- both values read correctly, now do math to convert
     CurntGrp1Pos = (((MultiplyThis * 256) + AddThis) * .255)
     SET_REAL_REG(AnlgGrip1Reg, CurntGrp1Pos,gm_status)-- set the register to the analog signal converted
   ELSE
     POST_ERR(38000, 'Gripper Analog INVALID', 0, 0) --
     SET_REAL_REG(AnlgGrip1Reg, -69.69,gm_status)-- set the register to a known invalid setting
   ENDIF

   IF gm_status<>0 THEN
     POST_ERR(38000, 'CNVRTGIN set R['+ int2str(AnlgGrip1Reg) +'] Failed, MUST ABORT', gm_status, 0) --
     DataIsValid = FALSE
   ENDIF


-- Grip Analog module #2 for second liner gripper
 IF (NumAnlogInpt = 2) THEN

  gm_status = IOVALRD(io_gpin, Grp_Anlg3_GI, MultiplyThis)-- read the input
    IF (gm_status <>0) THEN
      POST_ERR(38000, 'Get GI['+int2str(Grp_Anlg3_GI)+'] Failed', gm_status, 0) -- SYST-034 Hold Signal Lost
      DataIsValid = FALSE
    ENDIF

  gm_status = IOVALRD(io_gpin, Grp_Anlg4_GI, AddThis)-- read the  input
    IF (gm_status <>0) THEN
      POST_ERR(38000, 'Get GI['+int2str(Grp_Anlg4_GI)+'] Failed', gm_status, 0) -- SYST-034 Hold Signal Lost
      DataIsValid = FALSE
    ENDIF

   IF DataIsValid THEN -- both values read correctly, now do math to convert
     CurntGrp2Pos = (((MultiplyThis * 256) + AddThis) * .255)
     SET_REAL_REG(AnlgGrip2Reg, CurntGrp2Pos,gm_status)-- set the register to the analog signal converted
   ELSE
     POST_ERR(38000, 'Gripper 2 Analog INVALID', 0, 0) --
     SET_REAL_REG(AnlgGrip2Reg, -69.69,gm_status)-- set the register to a known invalid setting
   ENDIF

   IF gm_status<>0 THEN
     POST_ERR(38000, 'CNVRTGIN set R['+ int2str(AnlgGrip2Reg) +'] Failed, MUST ABORT', gm_status, 0) --
     DataIsValid = FALSE
   ENDIF

 ENDIF

   IF DataIsValid THEN
     DELAY update_time
   ENDIF

UNTIL (DataIsValid = FALSE) --

END CNVRTGIN
