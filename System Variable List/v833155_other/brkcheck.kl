--    This material is the joint property of GMFanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either GMFanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both GMFanuc Robotics and FANUC.
--
--             Karel is a registered trademark of
--             GMFanuc Robotics Corporation
--
--    Program: brkcheck
--	  GM Brake check routine.
-------------------------------------------------------------------------------------------------------------
--
--    Language: KAREL
--
--    Author: Lloyd Steed
--            Fanuc Robotics North America
--            3900 West Hamlin Road
--            Rochester Hills, Michigan    48309-3253
--
--    Modification history:
--       05-12-09   Steedlj BODYSHOP Global2 Initial Release
--       03-10-10   Steedlj BODYSHOP/Metal Add SET_VAR and repost function
--    10-15-13 jja R30iB Development
--       07-19-17   Kosaski  Removed the Output setting, already use system variable $PRMPDSPON and this Turn on
--                           user input required configured in the SHELL variables
--     2019/08/14   marchaka If rtu_grp2 is UNINIT, initialize it to FALSE instead of TRUE
--
-------------------------------------------------------------------------------------------------------------
PROGRAM brkcheck
-------------------------------------------------------------------------------------------------------------

%NOPAUSESHFT
%NOLOCKGROUP
%RWACCESS
%COMMENT='Brake Chk v4.1'
%NOPAUSE = ERROR + TPENABLE + COMMAND
%NOABORT = ERROR + COMMAND

%ENVIRONMENT ATCLDEF
%ENVIRONMENT IOSETUP
%ENVIRONMENT ioblt
%ENVIRONMENT celldef
%ENVIRONMENT DNSVDEF
%ENVIRONMENT MNMCDEF
%ENVIRONMENT MULTI
%ENVIRONMENT SLDEF
%ENVIRONMENT SWGDEF
%ENVIRONMENT SYSDEF
%ENVIRONMENT tpthrdef
%ENVIRONMENT sgdef1
%ENVIRONMENT REGOPE
%ENVIRONMENT proddef
%ENVIRONMENT FDEV
%ENVIRONMENT TPE
%ENVIRONMENT SYCRDEF
%ENVIRONMENT BCDEF
%ENVIRONMENT UIF

CONST

-- post_error constants
  ER_WARN  = 0
  ER_PAUSE = 1
  ER_ABORT = 2
  io_dout       =  2   -- Digital output
  tpi_enable    = 249
  io_sopin      = 11   -- Same as io_opin
  io_din        =  1   -- Digital input
  io_tpin       = 14
  io_opin       = 11
  tpi_edit      = 145
  io_uopin      = 20   -- User operator's panel input
  tpi_reset     = 153  -- TP RESET
  CH_RPOST = 675
  CH_BRCH  = 676

VAR
  gm_status  : INTEGER
  g_status   : INTEGER
  psve       : INTEGER
  status     : INTEGER
  entry	     : INTEGER
  l_i        : INTEGER
  l_init     : BOOLEAN
  brkg1fail  IN SHADOW : BOOLEAN
  brkg2fail  IN SHADOW : BOOLEAN
  ans        IN SHADOW : INTEGER
  brk_optn   IN SHADOW : BOOLEAN
  brk_intrpt IN SHADOW : BOOLEAN
  rtu_grp2   IN SHADOW FROM brkcheck  : BOOLEAN

  cycle_strt   IN SHADOW : BOOLEAN
  done         IN SHADOW : BOOLEAN
  ans_status   IN SHADOW : INTEGER
  edt_status   IN SHADOW : INTEGER
  ans2_status  IN SHADOW : INTEGER

  dwell_tme  IN SHADOW : INTEGER

-- From other Programs
  got_rtu      IN SHADOW FROM GMCUSTO  : BOOLEAN
  prmpt_back   IN SHADOW FROM GMCUSTO  : BOOLEAN
  dnet64size   IN SHADOW FROM GMCUSTO  : BOOLEAN
  error_code   IN CMOS FROM ATSHELL    : INTEGER  -- Error code that triggered fault rec.

%INCLUDE kliosop
%INCLUDE klrdutil
%INCLUDE klrdread

ROUTINE WriteConsole(p_message : string) from swutils

-----------------------------------------------------------------------------
ROUTINE repost
-- DESCRIPTION:
--   This routine is called by Cycle Start to repost
--   User Screen for selection questions.
-----------------------------------------------------------------------------
VAR

l_status: INTEGER

BEGIN

IF done = FALSE THEN

IF dnet64size = FALSE THEN
  SET_VAR(psve, '*system*', '$PRMPDSPON', TRUE, gm_status)
  --Turn on ManInterventReqTP
-- RK removed 7-19-17   g_status = iovalset(IO_DOUT,129, 1)
   prmpt_back = TRUE
ENDIF

 l_status = iovalrd(IO_DIN, 6, ans_status)
 l_status = iovalrd(IO_TPIN, 153, edt_status)
 l_status = iovalrd(IO_OPIN, 1, ans2_status)
   --writeconsole('[repost] Read I/O')
 IF (ans_status = 1) OR (edt_status = 1) OR (ans2_status = 1) THEN
   --writeconsole('[repost] Read I/O TRUE')
   cycle_strt = TRUE
   FORCE_SPMENU(tp_panel,SPI_TPUSER,1)
 ELSE
   cycle_strt = FALSE
 ENDIF
ENDIF
 ENABLE CONDITION[CH_RPOST]

END repost

-----------------------------------------------------------------------------
-- brkcheck
-----------------------------------------------------------------------------
BEGIN

--Enable contition Interupted Test
brk_intrpt = FALSE
CONDITION[CH_BRCH]: WITH $SCAN_TIME = 200
     WHEN ERROR[144004]  OR ERROR[144005] OR ERROR[144006] OR ERROR[144007] OR ERROR[144008] OR ERROR[144009] OR
     	  ERROR[144010] OR ERROR[144011] OR ERROR[144012] OR ERROR[144013] OR ERROR[144014] OR ERROR[144015] OR
     	  ERROR[144016] OR ERROR[144017] OR ERROR[144018] OR ERROR[144020]  DO
     brk_intrpt = TRUE
     ENDCONDITION
ENABLE CONDITION[CH_BRCH]

done = FALSE
cycle_strt = FALSE

IF UNINIT(got_rtu) THEN
  got_rtu = FALSE
ENDIF

IF UNINIT(rtu_grp2) THEN
  rtu_grp2 = FALSE
ENDIF

IF UNINIT(dwell_tme) THEN
  dwell_tme = 250
ENDIF

IF UNINIT(dnet64size) THEN
  dnet64size = FALSE
ENDIF

IF UNINIT(ans) THEN
  ans = 1
ENDIF

IF UNINIT(brkg1fail) THEN
  brkg1fail = FALSE
ENDIF

IF UNINIT(brkg2fail) THEN
  brkg2fail = FALSE
ENDIF

  --Brake Check Option Check
  brk_optn = FALSE
  FOR l_i = 1 TO ARRAY_LEN($FEATURE.$MOD) DO
    IF NOT UNINIT($FEATURE.$MOD[l_i]) THEN -- Stop at uninit
      IF ($FEATURE.$MOD[l_i] = 'J951') THEN
        brk_optn = TRUE
        l_i = ARRAY_LEN($FEATURE.$MOD) + 1 -- Get out
      ENDIF
    ELSE -- At the end UNINIT
      l_i = ARRAY_LEN($FEATURE.$MOD) + 1 -- Get out
    ENDIF
  ENDFOR

IF brk_optn = TRUE THEN  -- Option J951

  --Enable Brake Check
  SET_VAR(psve, '*system*', '$BCCFG.$BCK_ENABLE', TRUE, gm_status)
  --Enable Group 1
  SET_VAR(psve, '*system*', '$BCK_GRP[1].$CHK_AXIS[1]', TRUE, gm_status)
  SET_VAR(psve, '*system*', '$BCK_GRP[1].$CHK_AXIS[2]', TRUE, gm_status)
  SET_VAR(psve, '*system*', '$BCK_GRP[1].$CHK_AXIS[3]', TRUE, gm_status)
  SET_VAR(psve, '*system*', '$BCK_GRP[1].$CHK_AXIS[4]', TRUE, gm_status)
  SET_VAR(psve, '*system*', '$BCK_GRP[1].$CHK_AXIS[5]', TRUE, gm_status)
  SET_VAR(psve, '*system*', '$BCK_GRP[1].$CHK_AXIS[6]', TRUE, gm_status)

  --RTU Check Enable G1 A7 or G2 A1
    IF got_rtu = TRUE THEN
	  IF rtu_grp2 = TRUE THEN -- RTU on Group 2 Set manually by user
            SET_VAR(psve, '*system*', '$BCK_GRP[2].$CHK_AXIS[1]', TRUE, gm_status)
	  ELSE
            SET_VAR(psve, '*system*', '$BCK_GRP[1].$CHK_AXIS[7]', TRUE, gm_status)
	  ENDIF
    ENDIF

  -- Begin Brake Test
  brk_intrpt = FALSE
  error_code = 0
  SET_VAR(psve, '*system*', '$BCCFG.$BCK_START', TRUE, gm_status)
  WAIT FOR ($BCCFG.$BCK_START = FALSE)

  DELAY dwell_tme

-- Check Interupted
IF brk_intrpt = FALSE THEN -- Not interupted

  -- Check Results
  brkg1fail = FALSE
  FOR l_i = 1 TO ARRAY_LEN($BCK_GRP[1].$CHK_RESULT) DO
    IF NOT UNINIT($BCK_GRP[1].$CHK_RESULT[l_i]) THEN -- Stop at uninit
      IF ($BCK_GRP[1].$CHK_RESULT[l_i] = TRUE) THEN
        brkg1fail = TRUE
        l_i = ARRAY_LEN($BCK_GRP[1].$CHK_RESULT) + 1 -- Get out
      ENDIF
    ELSE -- At the end UNINIT
      l_i = ARRAY_LEN($BCK_GRP[1].$CHK_RESULT) + 1 -- Get out
    ENDIF
  ENDFOR

  -- Group 2
  IF rtu_grp2 = TRUE THEN
    brkg2fail = FALSE
   FOR l_i = 1 TO ARRAY_LEN($BCK_GRP[2].$CHK_RESULT) DO
      IF NOT UNINIT($BCK_GRP[2].$CHK_RESULT[l_i]) THEN -- Stop at uninit
        IF ($BCK_GRP[2].$CHK_RESULT[l_i] = TRUE) THEN
          brkg2fail = TRUE
          l_i = ARRAY_LEN($BCK_GRP[2].$CHK_RESULT) + 1 -- Get out
        ENDIF
      ELSE -- At the end UNINIT
        l_i = ARRAY_LEN($BCK_GRP[2].$CHK_RESULT) + 1 -- Get out
      ENDIF
    ENDFOR
  ENDIF

  IF brkg1fail = TRUE THEN
  loop1::

     FORCE_SPMENU(tp_panel,SPI_TPUSER,1)
      REPEAT
        REPEAT
 	         -- Start Repost Condition
  		IF (done = FALSE) THEN
		  IF (ans <= 1) AND (ans <> 0) THEN
     	            --writeconsole('[brkg1fail] Check Condition')
     	            CONDITION[CH_RPOST]: WITH $SCAN_TIME = 150
     	            WHEN (NOT TPIN[tpi_enable]) DO
       		    repost
     	            ENDCONDITION
     	            ENABLE CONDITION[CH_RPOST]
		  ENDIF
  		ENDIF

     	IF dnet64size = FALSE THEN
	  SET_VAR(psve, '*system*', '$PRMPDSPON', TRUE, gm_status)
       	  --Turn on ManInterventReqTP
-- RK removed 7-19-17          g_status = iovalset(IO_DOUT,129, 1)
          prmpt_back = TRUE
        ENDIF

          CLR_STND_SCR(gm_status)
          WRITE (CR,'*********** GROUP 1 Brake Check Failed**************', CR)
          WRITE('Group 1 Brake Check Failed',cr)
          WRITE('Refer to alarm log for details',cr,cr)
          WRITE('1. Enter 1 to Acknowledge ',cr)
          WRITE('Answer:')
          read(ans)
        UNTIL (ans = 1) OR (cycle_strt = TRUE)

	   -- Case for Re-post
       IF ( (cycle_strt = TRUE) AND (done = FALSE) ) THEN
	 goto loop1
       ENDIF

		-- Acknowledge Error is done
        IF ans = 1 THEN
          done = TRUE
          cycle_strt = FALSE
          --Disable/Purge Condition if G2 check after G1 check
	  DISABLE CONDITION[CH_RPOST]
          PURGE CONDITION[CH_RPOST]
          POST_ERR(38000,'Acknowledge J951 GRP[1] test failed',0,ER_WARN)
          IF dnet64size = FALSE THEN
            --Turn off ManInterventReqTP
-- RK removed 7-19-17             g_status = iovalset(IO_DOUT,129, 0)
	    SET_VAR(psve, '*system*', '$PRMPDSPON', FALSE, gm_status)
            prmpt_back = FALSE
          ENDIF
          --Edit Mode
          FORCE_SPMENU(tp_panel,SPI_TPTCH,1)
        ENDIF
      UNTIL done
  ENDIF

  IF brkg2fail = TRUE THEN
    done = FALSE
    cycle_strt = FALSE

  loop2::

     FORCE_SPMENU(tp_panel,SPI_TPUSER,1)
      REPEAT
        REPEAT
 		-- Start Repost Condition
  		IF (done = FALSE) THEN
		  IF (ans <= 1) AND (ans <> 0) THEN
     	            --writeconsole('[brkg1fail] Check Condition')
     	            CONDITION[CH_RPOST]: WITH $SCAN_TIME = 150
     	            WHEN (NOT TPIN[tpi_enable]) DO
       		    repost
     	            ENDCONDITION
     	            ENABLE CONDITION[CH_RPOST]
		  ENDIF
  		ENDIF

     	IF dnet64size = FALSE THEN
	  SET_VAR(psve, '*system*', '$PRMPDSPON', TRUE, gm_status)
       	  --Turn on ManInterventReqTP
 -- RK removed 7-19-17          g_status = iovalset(IO_DOUT,129, 1)
          prmpt_back = TRUE
        ENDIF

          CLR_STND_SCR(gm_status)
          WRITE (CR,'*********** GROUP 2 Brake Check Failed**************', CR)
          WRITE('Group 2 Brake Check Failed',cr)
          WRITE('Refer to alarm log for details',cr,cr)
          WRITE('1. Enter 1 to Acknowledge ',cr)
          WRITE('Answer:')
          read(ans)
        UNTIL (ans = 1) OR (cycle_strt = TRUE)

	   -- Case for Re-post
       IF ( (cycle_strt = TRUE) AND (done = FALSE) ) THEN
	 goto loop2
       ENDIF

	-- Acknowledge Error is done
        IF ans = 1 THEN
          done = TRUE
          cycle_strt = FALSE
	  POST_ERR(38000,'Acknowledge J951 GRP[2] test failed',0,ER_WARN)
          IF dnet64size = FALSE THEN
            --Turn off ManInterventReqTP
-- RK removed 7-19-17             g_status = iovalset(IO_DOUT,129, 0)
	    SET_VAR(psve, '*system*', '$PRMPDSPON', FALSE, gm_status)
            prmpt_back = FALSE
          ENDIF
          --Edit Mode
          FORCE_SPMENU(tp_panel,SPI_TPTCH,1)
        ENDIF
      UNTIL done
  ENDIF

ENDIF -- Option J951
ENDIF -- Not Interupted

IF brk_optn = FALSE THEN
  POST_ERR(38000,'J951 Does not exist',0,ER_WARN)
ENDIF

IF brk_intrpt = TRUE THEN
 POST_ERR(38000,'Brake test interupted',0,ER_WARN)
ENDIF

DISABLE CONDITION[CH_BRCH]
PURGE CONDITION[CH_BRCH]
-----------------------------------------------------------------------------
END brkcheck
