-------------------------------------------------------------------------------
--	  Provides User with 50 List Menus 1-25  GRS4 Standards.
--									   26-50 Custom Applications for user.
--
--	  lst_menu[1,1] = Menu Title 		  [40Characters MAX]
--	  lst_menu[1,2] = Menu Option 1 	  [40Characters MAX]
--	  lst_menu[1,3] = Menu Option 2  	  [40Characters MAX]
--	  lst_menu[1,4] = Menu Option 3  	  [40Characters MAX]
--	  lst_menu[1,5] = Menu Option 4  	  [40Characters MAX]
--	  lst_menu[1,6] = Menu Option 5  	  [40Characters MAX]
--	  lst_menu[1,7] = Menu Option 6  	  [40Characters MAX]
--	  lst_menu[1,8] = Menu Option 7  	  [40Characters MAX]
--	  lst_menu[1,9] = Menu Option 8    	  [40Characters MAX]
--
--    Example:
--	  lst_menu[1,1] = SPR Henrob Rivet Machine Fault
--	  lst_menu[1,2] = Menu Option 1
--	  lst_menu[1,3] = Menu Option 2
--	  lst_menu[1,4] = Menu Option 3
--	  lst_menu[1,5] = Menu Option 4
--	  lst_menu[1,6] = Menu Option 5
--	  lst_menu[1,7] = Menu Option 6
--	  lst_menu[1,8] = Menu Option 7
--	  lst_menu[1,9] = Menu Option 8
--					 Enter Selection = ( Valid response is 1 thru 8)
--
-------------------------------------------------------------------------------
--    06-15-10   Steedlj Custom List Replacements, under same
--                       conditions as all boxes to repost.
--                       Cycle Start, TP reset, Panel Reset.
--						 User has upto 8 list options to pick from.
--
--
--
--
--    10-15-13 jja R30iB Development
--    12-03-13 GJK Revised program for R30iB
--    05-14-13 GJK Added Dress Verification Guage and Resistance Check
--             Menus to menus 24 and 25.
--    07-22-16 marchaka Added FDS list items for 7
--    02-19-17 Kosaski a lot of changes and added user menu array
--    02-24-17 Kosaski added variable MaxUsrChoice so GM can continue to change mind on possiable choices to support
--    2017/03/28 marchaka Changed name of menu_screen routine to menuscrn_lst.  
--                        Change made so gmcellvr can initialize variable settings
--                        for the menu edit webscreens.  All three custo* programs
--                        had the name menu_screen, had to differentiate the routine 
--                        between all the programs.
--    2018/01/29 marchaka Added check for ArcTool.  If ArcTool is loaded need to call recovery
--                        menu clean up from awshcust instead of atcustom.
--    2018/04/04 schoensm  V8.33P05 update
--    2019/07/08 marchaka Check if it is ArcTool in post_custlst routine.  This is to fix an issue where arctoolopt
--                        is uninitialized during a cold start.
--    2019/08/03 marchaka Use user prompt box output instead of system.
--    2020/11/09 marchaka Update array item 5 for servo gun thickness check
-------------------------------------------------------------------------------
PROGRAM custolst
-------------------------------------------------------------------------------

%RWACCESS
%NOPAUSESHFT
%NOLOCKGROUP
%COMMENT='GRS4CustLSTbv4.5'
%NOPAUSE = ERROR + TPENABLE + COMMAND
%NOABORT = ERROR + COMMAND

-- Softpart built-ins
%ENVIRONMENT SYSDEF -- needed for setting the $SCAN_TIME
%ENVIRONMENT REGOPE -- needed for the set register builtin
%ENVIRONMENT MULTI -- required for the Abort_task builtin
%ENVIRONMENT ioblt -- required for teh iovalset builtin and other I/O related instructions

%INCLUDE kliotyps
%INCLUDE gmevrs4io

CONST

%INCLUDE gmcnstnt  -- Constant file for GM, including CH declarations from GM_CH_ID

  ER_WARN       =  0
  ER_PAUSE      =  1
  ER_ABORT      =  2
  TPI_ENABLE    = 249
  TPI_EDIT      = 145
  TPI_RESET     = 153  -- TP RESET
  CLR_SCRN	= 128  --clear the screen
  CRSR_HOME	= 137  --moves cursor to home position
  IGNOR_OFFLIN  = 128

  Revision = '2020-11-09'

VAR

 Cur_Revision IN SHADOW :STRING[32] -- Set equal to Version constant in initialization routine

  lst_menu      IN SHADOW FROM custolst : ARRAY[50,9] OF STRING[40]
  userlst_menu  IN SHADOW FROM custolst : ARRAY[25,9] OF STRING[40]
  lst_menunum   IN SHADOW FROM custolst : INTEGER
  lst_answer    IN SHADOW FROM custolst : INTEGER
  lst_nmchoice  IN SHADOW FROM custolst : INTEGER
  check_val     IN SHADOW FROM custolst : BOOLEAN
  prmpt_back    IN SHADOW FROM GMCUSTO  : BOOLEAN
  dnet64size    IN SHADOW FROM GMCUSTO  : BOOLEAN

  User_Aborted  , -- Used for identifying if the program was aborted or finished CH runing in ATCUSTOM to clean up
  Rcvry_Active IN SHADOW from ATCUSTOM : BOOLEAN -- Used for menu program indicating they are active

  user_abortat  , -- ArcTool --Used for identifying if the program was aborted or finished
  rcvry_act_at IN SHADOW FROM GMATVAR: BOOLEAN -- ArcTool Used for if the user recovery is being executed to start CH   

 -- ans      IN SHADOW : INTEGER
  Curnt_UMenu,  -- Used for the result of subtracting the users past arguments when greater than standard, menaing next array
  max_menu,     -- Indicates the max menu avaialble between  USER_YN_MENU and YN_MENU
  MaxUsrChoice, -- Max number of user choices possiable NOT number user passed
  ansd_lst IN SHADOW : INTEGER
  lst_flag IN SHADOW : BOOLEAN
  l_i     : INTEGER
  l_j     : INTEGER
  status  : INTEGER
  psve    : INTEGER
  real_value : REAL
  real_value2: REAL
  real_value3: REAL
  str_value  : STRING[10]
  str_value2 : STRING[10]
  str_value3 : STRING[10]
  gm_status  : INTEGER
  done       : BOOLEAN
  cont_next IN CMOS FROM FFR_OPTN: BOOLEAN  --jja  R30iB  Was going to delete FFR_OPTN.KL but to many programs calling this variable
  l_ignore   : INTEGER

  --jja  R30iB Update02
  l_val,
  l_stat     : INTEGER

  arctoolopt:  BOOLEAN --Check if ArcTool
  prmp_dout IN SHADOW FROM GMVARS: INTEGER  --User Prompt Box DO



%INCLUDE klrdutil -- Need for the CLR_STND_SCR routine
%INCLUDE gmrdutil  -- Need for the GM utility builins like Set_B_Svar)

ROUTINE ClnUpRcvyMnu FROM ATCUSTOM
ROUTINE ATClnRcvyMnu FROM atshcust

-----------------------------------------------------------------------------
ROUTINE init_menus
-- PURPOSE: set verify the variables used have beeen setup prior to using
--
--
-----------------------------------------------------------------------------

BEGIN

 -- Reset Menu Title, Line1, Line 2, Response
  FOR l_i = 1 to (ARRAY_LEN(lst_menu)) DO
    FOR l_j = 1 to 9 DO
      IF UNINIT (lst_menu[l_i,l_j]) THEN
        IF l_j=1 THEN
          lst_menu[l_i,l_j] = 'List menu ' +int2str(l_i) + ' has NOT been Setup'
        ELSE
          lst_menu[l_i,l_j] = ''
        ENDIF
      ENDIF
    ENDFOR
  ENDFOR

  FOR l_i = 1 to (ARRAY_LEN(userlst_menu)) DO
    FOR l_j = 1 to 9 DO
      IF UNINIT (userlst_menu[l_i,l_j]) THEN
        IF l_j=1 THEN
          userlst_menu[l_i,l_j] = 'User List menu ' +int2str(l_i) + ' has NOT been Setup'
        ELSE
          userlst_menu[l_i,l_j] = ''
        ENDIF
      ENDIF
    ENDFOR
  ENDFOR

IF UNINIT(MaxUsrChoice) THEN
  MaxUsrChoice = 8
ENDIF

END init_menus
-----------------------------------------------------------------------------
ROUTINE init_arc_lst
-- PURPOSE: INitialize Arc Variables on power up
--
--
-----------------------------------------------------------------------------
BEGIN

  IF UNINIT(arctoolopt) THEN --ArcTool?
    arctoolopt = FALSE --reset to FALSE
    IF Chk_Feature('H541') THEN -- is the Arc Tool option loaded
      arctoolopt = TRUE
    ENDIF
    IF Chk_Feature('H574') THEN -- is the LR Arc Tool option loaded
      arctoolopt = TRUE
    ENDIF
  ENDIF --ArcTool?

END init_arc_lst
-----------------------------------------------------------------------------
ROUTINE menuscrn_lst
-- DESCRIPTION:
--   This routine is to define the GM USer Menu Screen
-----------------------------------------------------------------------------
VAR
  l_status: INTEGER
BEGIN

    -- CUSTONY / CUST LST                       1234567890123456789012345678901234567890
    Set_S_PVar('CUSTOLST', 'LST_MENU[1,1]', '---Resume from Sptwld FFR Pos Prompt---')
    Set_S_PVar('CUSTOLST', 'LST_MENU[1,2]', 'WERE THE CAPS CHANGED AT THE FFR POS, ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[1,3]', '  OR IS A TIP DRESS NEEDED?')
    Set_S_PVar('CUSTOLST', 'LST_MENU[1,4]', '  SELECT:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[1,5]', ' 1 = NO CAPS WERE NOT CHANGED')
    Set_S_PVar('CUSTOLST', 'LST_MENU[1,6]', ' 2 = YES CAPS WERE CHANGED')
    Set_S_PVar('CUSTOLST', 'LST_MENU[1,7]', ' 3 = TIP DRESS IS NEEDED')

    Set_S_PVar('CUSTOLST', 'LST_MENU[2,1]', '------End of Repair FFR Options------')
    Set_S_PVar('CUSTOLST', 'LST_MENU[2,2]', ' ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[2,3]', '  SELECT:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[2,4]', '   1 = Continue Last')
    Set_S_PVar('CUSTOLST', 'LST_MENU[2,5]', '   2 = Continue Next')
    Set_S_PVar('CUSTOLST', 'LST_MENU[2,6]', '   3 = Abort')

    Set_S_PVar('CUSTOLST', 'LST_MENU[3,1]', '------End of Repair FFR Options------')
    Set_S_PVar('CUSTOLST', 'LST_MENU[3,2]', '  ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[3,3]', '  SELECT:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[3,4]', '   1 = Re-Run')
    Set_S_PVar('CUSTOLST', 'LST_MENU[3,5]', '   2 = Accept Part')

    Set_S_PVar('CUSTOLST', 'LST_MENU[4,1]', '------End of Repair FFR Options------')
    Set_S_PVar('CUSTOLST', 'LST_MENU[4,2]', '  ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[4,3]', '  SELECT:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[4,4]', '   1 = Continue Next')
    Set_S_PVar('CUSTOLST', 'LST_MENU[4,5]', '   2 = Abort')

    Set_S_PVar('CUSTOLST', 'LST_MENU[5,1]', '-- Thickness Check Error Detected --')
    Set_S_PVar('CUSTOLST', 'LST_MENU[5,2]', '  ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[5,3]', '  SELECT:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[5,4]', '   1.  IGNORE and Continue Process Path')
    Set_S_PVar('CUSTOLST', 'LST_MENU[5,5]', '   2.  CONTINUE to Move Clear Position')

    Set_S_PVar('CUSTOLST', 'LST_MENU[6,1]', '---Cap Change in Teach---')
    Set_S_PVar('CUSTOLST', 'LST_MENU[6,2]', '1 = Projection Caps were changed')
    Set_S_PVar('CUSTOLST', 'LST_MENU[6,3]', '2 = SpotWeld Caps were changed')
    Set_S_PVar('CUSTOLST', 'LST_MENU[6,4]', '3 = Both sets of caps were changed')

    Set_S_PVar('CUSTOLST', 'LST_MENU[7,1]', 'Pre-Process Fault recovery options')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,2]', '1 = Retry')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,3]', '2 = Skip')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,4]', '3 = FFR')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,5]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,6]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,7]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,8]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[7,9]', '')

    Set_S_PVar('CUSTOLST', 'LST_MENU[8,1]', 'Post-Process Fault recovery options')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,2]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,3]', '2 = Skip')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,4]', '3 = FFR')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,5]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,6]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,7]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,8]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[8,9]', '')

    Set_S_PVar('CUSTOLST', 'LST_MENU[10,1]', '--- !!!Both Guns Not Ready!!! ---')
    Set_S_PVar('CUSTOLST', 'LST_MENU[10,2]', 'Select:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[10,3]', '#1 = Pick Gun 1')
    Set_S_PVar('CUSTOLST', 'LST_MENU[10,4]', '#2 = Pick Gun 2')
    
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,1]', '---Resume from Sptwld FFR Pos Prompt---')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,2]', '--- WHAT TIP MAINTENANCE ACTIVITY ---')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,3]', '--- WAS PERFORMED? ---')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,4]', ' SELECT:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,5]', ' 1 = NO CAPS WERE NOT CHANGED')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,6]', ' 2 = YES CAPS WERE CHANGED')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,7]', ' 3 = TIP DRESS IS NEEDED')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,8]', ' 4 = AUTO CAP CHANGE REQUESTED')
    Set_S_PVar('CUSTOLST', 'LST_MENU[11,9]', ' ')

    Set_S_PVar('CUSTOLST', 'LST_MENU[16,1]', 'Cap Change in Teach')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,2]', '1 = Projection Caps were changed')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,3]', '2 = SpotWeld Caps were changed')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,4]', '3 = Both sets of caps were changed')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,5]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,6]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,7]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,8]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[16,9]', '')

    Set_S_PVar('CUSTOLST', 'LST_MENU[24,1]', '---DRESS VERIFICATION FAILED----')  --GJK added Dress Verification Gauge Menu 051414
    Set_S_PVar('CUSTOLST', 'LST_MENU[24,2]', '   CAPS NOT DRESS CORRECTLY')
    Set_S_PVar('CUSTOLST', 'LST_MENU[24,3]', 'PLEASE INSPECT CAPS / TIP DRESS CUTTER')
    Set_S_PVar('CUSTOLST', 'LST_MENU[24,4]', ' and SELECT CHOICE below:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[24,5]', ' #1 = To REDRESS and RETRY ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[24,6]', ' #2 = To ACCEPT and Continue')
    Set_S_PVar('CUSTOLST', 'LST_MENU[24,7]', ' #3 = To REQUEST a Cap Change')

    Set_S_PVar('CUSTOLST', 'LST_MENU[25,1]', '----ADAPTIVE WELDING ERROR-----')  --GJK added Adaptive Resitance Check Menu 051414
    Set_S_PVar('CUSTOLST', 'LST_MENU[25,2]', '    RESISTANCE CHECK FAILED')
    Set_S_PVar('CUSTOLST', 'LST_MENU[25,3]', 'PLEASE INSPECT CAPS / TIP DRESS CUTTER')
    Set_S_PVar('CUSTOLST', 'LST_MENU[25,4]', ' and SELECT CHOICE below:')
    Set_S_PVar('CUSTOLST', 'LST_MENU[25,5]', ' #1 = To REDRESS and RETRY ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[25,6]', ' #2 = To ACCEPT and Continue')
    Set_S_PVar('CUSTOLST', 'LST_MENU[25,7]', ' #3 = To REQUEST a Cap Change')

    Set_S_PVar('CUSTOLST', 'LST_MENU[31,1]', '--AUTOMATIC RE-CALIBRATION--')
    Set_S_PVar('CUSTOLST', 'LST_MENU[31,2]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[31,3]', ' #1 = AUTO RE-TEACH TCP ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[31,4]', ' #2 = AUTO RE-CALIBRATE')
    Set_S_PVar('CUSTOLST', 'LST_MENU[31,5]', ' #3 = ABORT')

    Set_S_PVar('CUSTOLST', 'LST_MENU[32,1]', '--SLOT SKIP RECOVER--')
    Set_S_PVar('CUSTOLST', 'LST_MENU[32,2]', '')
    Set_S_PVar('CUSTOLST', 'LST_MENU[32,3]', ' #1 = RETRY VISION ')
    Set_S_PVar('CUSTOLST', 'LST_MENU[32,4]', ' #2 = CONTINUE FROM THIS SLOT')
    Set_S_PVar('CUSTOLST', 'LST_MENU[32,5]', ' #3 = SET RACK EMPTY')

END menuscrn_lst
-----------------------------------------------------------------------------
ROUTINE ShowSetings
-- PURPOSE: to show the user the proper settings
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------
BEGIN

     WRITE TPERROR(CHR(129))-- Clear line from previous writing
     WRITE TPDISPLAY (CHR(CLR_SCRN),CHR(CRSR_HOME))
     WRITE TPPROMPT(CHR(129))-- Clear line from previous writing
     CANCEL FILE TPPROMPT -- Need to cancel read if aborting

  --Custom List Prompts
            --1234567890123456789012345678901234567890
      WRITE ('The Call to the CUSTOLST program has an',cr)
      WRITE ('error. To use the CUSTOLST program you',cr)
      WRITE ('have to pass 3 arguments to tell the',cr)
      WRITE ('program what you want to do:',cr)
      WRITE ('AR[1]= Menu Text to Display.(1-',max_menu,')',cr)
      WRITE ('AR[2]= Data Register for Answer.(40)',cr)
      WRITE ('AR[3]= Max# User Choices for error 1-',MaxUsrChoice,cr)

      WRITE ('The program has to ABORT because of',cr)
      WRITE ('this error to allow correcting.',cr)
      WRITE TPPROMPT(CR,'Please Correct Program and Start Again')

  FORCE_SPMENU(tp_panel,SPI_TPUSER,1)

END ShowSetings
-----------------------------------------------------------------------------
ROUTINE Post_Custlst
-- DESCRIPTION:
--   This routine Clears the user screen and Posts Custolst to it
-----------------------------------------------------------------------------
VAR
  l_status: INTEGER

BEGIN

 IF UNINIT(lst_menunum) THEN
   lst_menunum = 1
 ENDIF
IF UNINIT(lst_nmchoice) THEN
  lst_nmchoice = 0
ENDIF

 init_menus -- need to ensure menus are setup

 init_arc_lst --initialize ArcTool VAR not stored on memory on power up

IF dnet64size = FALSE THEN
  gm_status = iovalset(2, prmp_dout, 1)
  IF (gm_status <> 0) THEN 
    POST_ERR(38000, 'Failed to set User Manual Inteverntion DO to ON', 0, 0)
  ENDIF   
ENDIF

     WRITE TPERROR(CHR(129))-- Clear line from previous writing
     WRITE TPDISPLAY (CHR(CLR_SCRN),CHR(CRSR_HOME))
     WRITE TPPROMPT(CHR(129))-- Clear line from previous writing
     CANCEL FILE TPPROMPT -- Need to cancel read if aborting

  --Custom List Prompts

        IF (lst_menunum <= ARRAY_LEN(lst_menu)) THEN
          WRITE (lst_menu[lst_menunum,1],cr)
          WRITE (lst_menu[lst_menunum,2],cr)
          WRITE (lst_menu[lst_menunum,3],cr)
          WRITE (lst_menu[lst_menunum,4],cr)
          WRITE (lst_menu[lst_menunum,5],cr)
          WRITE (lst_menu[lst_menunum,6],cr)
          WRITE (lst_menu[lst_menunum,7],cr)
          WRITE (lst_menu[lst_menunum,8],cr)
          WRITE (lst_menu[lst_menunum,9],cr)
        ELSE -- need to post users menu
          IF (lst_menunum > ARRAY_LEN(lst_menu)) THEN
            Curnt_UMenu = 0
            Curnt_UMenu = lst_menunum - (ARRAY_LEN(lst_menu))
            IF (Curnt_UMenu >0) AND (Curnt_UMenu <=(ARRAY_LEN(Userlst_menu)))  THEN
              WRITE (Userlst_menu[Curnt_UMenu,1],cr)
              WRITE (Userlst_menu[Curnt_UMenu,2],cr)
              WRITE (Userlst_menu[Curnt_UMenu,3],cr)
              WRITE (Userlst_menu[Curnt_UMenu,4],cr)
              WRITE (Userlst_menu[Curnt_UMenu,5],cr)
              WRITE (Userlst_menu[Curnt_UMenu,6],cr)
              WRITE (Userlst_menu[Curnt_UMenu,7],cr)
              WRITE (Userlst_menu[Curnt_UMenu,8],cr)
              WRITE (Userlst_menu[Curnt_UMenu,9],cr)
            ELSE
              POST_ERR(38000, 'Unknown USER menu'+int2str(Curnt_UMenu), 0, 0) --
            ENDIF
          ENDIF
        ENDIF

      WRITE TPPROMPT(CR,'Enter selection 1 -',lst_nmchoice,'  = ' )

  FORCE_SPMENU(tp_panel,SPI_TPUSER,1)

  IF (arctoolopt = TRUE) THEN --ArcTool
    rcvry_act_at = TRUE --set flag for atshcust to know started this
  ELSE
    Rcvry_Active = TRUE -- set flag for GMATCSTM to know started this
  ENDIF --ArcTool

END Post_Custlst

-----------------------------------------------------------------------------
-- custolst
-----------------------------------------------------------------------------

BEGIN --custolst

  --done = FALSE
  lst_flag = FALSE
  Cur_Revision = Revision

 init_arc_lst

 init_menus -- need to ensure menus are setup

  IF UNINIT(lst_answer) THEN
    lst_answer = 40
  ENDIF
  IF UNINIT(check_val) THEN
    check_val = TRUE
  ENDIF

    ansd_lst = -1

  IF UNINIT(doAdptOff_i[1]) THEN
    doAdptOff_i[1] = 1075
  ENDIF
  IF UNINIT(diAdaptCap_t[1]) THEN
    diAdaptCap_t[1] = 1
  ENDIF
  IF UNINIT(diAdaptCap_i[1]) THEN
    diAdaptCap_i[1] = 1077
  ENDIF

  IF UNINIT(doAdptOff_i[2]) THEN
    doAdptOff_i[2] = 1203 -- was 1139 RK changed 2/2/17
  ENDIF
  IF UNINIT(diAdaptCap_t[2]) THEN
    diAdaptCap_t[2] = 1
  ENDIF
  IF UNINIT(diAdaptCap_i[2]) THEN
    diAdaptCap_i[2] = 1205 -- was 1141 RK changed 2/2/17
  ENDIF


  GET_TPE_PRM(1,1, lst_menunum, real_value, str_value, status)     -- Get the MENU Number
  GET_TPE_PRM(2,1, lst_answer, real_value2, str_value2, status)    -- Get the R[X] to write the answer to.
  GET_TPE_PRM(3,1, lst_nmchoice, real_value3, str_value3, status)  -- Get the number of choices to check against.

max_menu = (ARRAY_LEN(Userlst_menu)) + (ARRAY_LEN(lst_menu))

  -- Checks to make sure your using valid arguements.
  -- turn off the parameter checking.
  IF check_val = TRUE THEN
    IF (lst_menunum < 1) OR (lst_menunum > max_menu)THEN
      ShowSetings
      POST_ERR(38000,'CUSTOLST AR[1]='+int2str(lst_menunum)+' Must be <= '+int2str(max_menu),0,2)
    ENDIF
    IF (lst_answer < 1) OR (lst_answer > 999) THEN -- check value not over max Registers allowed
      ShowSetings
      POST_ERR(38000,'CUSTOLST AR[2]='+int2str(lst_answer)+' Needs < 999',0,2 )
    ENDIF
    IF (lst_nmchoice < 1) OR (lst_nmchoice > MaxUsrChoice) THEN -- check value not over max allowed
      ShowSetings
      POST_ERR(38000,'CUSTOLST AR[3]='+int2str(lst_nmchoice)+' Needs <='+int2str(MaxUsrChoice),0,2 )
    ENDIF
  ENDIF

  IF (arctoolopt = TRUE) THEN --ArcTool
    PURGE CONDITION[CHATWatchAbr] -- Purge to clear condition uses same one in All CUSTO 3 programs
    CONDITION[ChATWatchAbr]: --
      WHEN (ABORT) DO --
        user_abortat = TRUE -- trigger routine in ATCUSTOM to clean up
     ENDCONDITION --
     ENABLE CONDITION[ChATWatchAbr]
  ELSE --SpotTool+
    PURGE CONDITION[CHWatchAbort] -- Purge to clear condition uses same one in All CUSTO 3 programs
    CONDITION[ChWatchAbort]: --
      WHEN (ABORT) DO --
        user_aborted = TRUE -- trigger routine in ATCUSTOM to clean up
     ENDCONDITION --
     ENABLE CONDITION[ChWatchAbort]
  ENDIF


  SET_INT_REG(lst_answer, -1, status) -- Set the register to NON functional answer

    menuscrn_lst

    IF (lst_menunum <= ARRAY_LEN(lst_menu)) THEN
      POST_ERR(38000, lst_menu[lst_menunum,1], 0, 0) -- post the header to alarm screen
    ELSE
      IF (lst_menunum > ARRAY_LEN(lst_menu)) THEN
        Curnt_UMenu = 0
        Curnt_UMenu = lst_menunum - (ARRAY_LEN(lst_menu))
        IF (Curnt_UMenu >0) AND (Curnt_UMenu <=(ARRAY_LEN(Userlst_menu)))  THEN
          POST_ERR(38000, Userlst_menu[Curnt_UMenu,1], 0, 0) -- post the header to alarm screen
        ELSE
          POST_ERR(38000, 'Unknown USER menu'+int2str(Curnt_UMenu), 0, 0) --
        ENDIF
      ENDIF
    ENDIF

  IF status = 0 THEN

     done = FALSE

     REPEAT

       lst_flag = TRUE
       Post_Custlst
       READ TPPROMPT(ansd_lst)

        IF (UNINIT(ansd_lst)) THEN -- Had to add this because if previous ran aborted before
          ansd_lst = -1            -- getting answer, then will have uninit data next time.
          delay 1000          -- this does not seem to fix it, it keeps returning UNINIT
        ELSE                  -- but returns without any key strokes? NEED "CLOSE FILE TPPROMPT"
          IF (ansd_lst < 1) OR (ansd_lst > lst_nmchoice) THEN
            WRITE TPPROMPT(ansd_lst,' is NOT valid please enter again')
            Delay 3000
          ENDIF
        ENDIF

     UNTIL ( (ansd_lst >= 1) AND (ansd_lst <= lst_nmchoice) )

    SET_INT_REG(lst_answer, ansd_lst, status) -- Set R[X] for answer

    SELECT (lst_menunum) OF --
      CASE (2):  --SPOT Choices
              SELECT ansd_lst OF
                CASE (1):
                  -- nothing special normal FFR sequence
                    done = true

                  l_stat = IOVALRD( diAdaptCap_t[1], diAdaptCap_i[1], l_val )
                  IF (l_stat = 0) THEN
                    IF (DIN[diAdaptCap_i[1]] = ON ) THEN
                      l_ignore = iovalset(2 + IGNOR_OFFLIN,  doAdptOff_i[1],1) -- Turn OFF Adaptive WC1
                    ENDIF
                  ENDIF

                  l_stat = IOVALRD( diAdaptCap_t[2], diAdaptCap_i[2], l_val )
                  IF (l_stat = 0) THEN
                    IF (DIN[diAdaptCap_i[2]] = ON ) THEN
                      l_ignore = iovalset(2 + IGNOR_OFFLIN,  doAdptOff_i[2],1) -- Turn OFF Adaptive WC2
                    ENDIF
                  ENDIF

                  CASE (2): -- start welding form the next point
                    cont_next = true
                    done = true
                    l_ignore = iovalset(2 + IGNOR_OFFLIN, doAdptOff_i[1],0) -- Turn OFF Adaptive WC1
                    l_ignore = iovalset(2 + IGNOR_OFFLIN, doAdptOff_i[2],0) -- Turn OFF Adaptive WC2

                CASE (3):
                    POST_ERR(38000, 'User Selected to ABORT', 0, 0) --
                    ABORT_TASK('*ALL*', TRUE, TRUE, status)
                    done = true
                    l_ignore = iovalset(2 + IGNOR_OFFLIN, doAdptOff_i[1],0) -- Turn OFF Adaptive WC1
                    l_ignore = iovalset(2 + IGNOR_OFFLIN, doAdptOff_i[2],0) -- Turn OFF Adaptive WC2
                ELSE:
              ENDSELECT

      CASE (3):  --Dispense Choices

              SELECT ansd_lst OF
                CASE (1):
                -- nothing special normal FFR sequence
                  done = true
                CASE (2):
                  FLG[15] = TRUE  -- Set Accept Part
                  done = true
                ELSE:
              ENDSELECT

      CASE (4):  --Projection Welding Choices

              SELECT ansd_lst OF
                CASE (1):
                -- start welding form the next point
                  cont_next = true
                  done = true
                CASE (2):
                  ABORT_TASK('*ALL*', TRUE, TRUE, status)
                  done = true
                ELSE:
              ENDSELECT

      ELSE: -- No special recovery has been setup for lst_menunum

    ENDSELECT --
   


    IF (arctoolopt = TRUE) THEN  --ArcTool
      DISABLE CONDITION[ChATWatchAbr]
      ATClnRcvyMnu -- Reset all variables and log the user answer
    ELSE --SpotTool+
      DISABLE CONDITION[ChWatchAbort]
      ClnUpRcvyMnu -- Reset all variables and log the user answer
    ENDIF 

  ENDIF

END custolst





















