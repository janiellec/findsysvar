PROGRAM STATIC82
-----------------------------------------------------------------------------
%ALPHABETIZE
--%ENVIRONMENT ATCLDEF
--%ENVIRONMENT DNSVDEF
%ENVIRONMENT iosetup
--%ENVIRONMENT mnmcdef
--%ENVIRONMENT SLDEF
--%ENVIRONMENT swgdef
--%ENVIRONMENT SYCRDEF
--%ENVIRONMENT sysdef
--%ENVIRONMENT TPE
--%ENVIRONMENT tpthrdef
%ENVIRONMENT FDEV
%ENVIRONMENT REGOPE
--%ENVIRONMENT celldef
%ENVIRONMENT IOBLT	 -- used for iovalset  l_status = iovalset(19, 10001, l_value)
%ENVIRONMENT STRNG

%SYSTEM
%COMMENT = 'Get Stats v4.0'
%NOLOCKGROUP
%RWACCESS

%INCLUDE klevkmsk
--%INCLUDE kltpctrl
%INCLUDE klevkeys
%INCLUDE kliotyps
--%INCLUDE swevrs4io
--%INCLUDE swevshll
--%INCLUDE atconst
--%INCLUDE swevrlng

VAR

  rev :STRING[4]
  l_string	:STRING[14]
  status,cntr,fnd,ofset,fnd_ofset IN SHADOW FROM STATIC82 : INTEGER
  success,entry	     : INTEGER
  I,a		:INTEGER
  sv	:STRING[40]
  rv	:REAL
  temp_i3,sdev,sigma  IN SHADOW FROM STATIC82	:ARRAY[18] OF REAL
  rf	:BOOLEAN
  fnd_pos IN SHADOW FROM STATIC82	:ARRAY[30] OF XYZWPR
  ofset_pos	IN SHADOW FROM STATIC82 :ARRAY[30] OF XYZWPR
  fnd_ofset_p IN SHADOW FROM STATIC82	:ARRAY[30] OF XYZWPR
  temp_i1,temp_i2  IN SHADOW FROM STATIC82	:ARRAY[30] OF REAL
  fnd_pos_o,ofset_pos_o,fnd_ofset_po  IN SHADOW FROM STATIC82	:XYZWPR
  tmp_fnd,tmp_ofs,tmp_fofs IN SHADOW FROM STATIC82	:XYZWPR

%INCLUDE klrdutil

-----------------------------------------------------------------------------
ROUTINE Get_Average(P_var_name:ARRAY OF XYZWPR;P_ave_value:XYZWPR;cord:INTEGER)
-----------------------------------------------------------------------------
-- PURPOSE: to get the average positional "X"
-- INPUT:  The program Variable to set passed as a string
--            -
-- CALLED BY:
-----------------------------------------------------------------------------
BEGIN
IF cord = 1 THEN
   P_ave_value.x = (P_var_name[1].x + P_var_name[2].x + P_var_name[3].x + P_var_name[4].x + P_var_name[5].x &
   + P_var_name[6].x + P_var_name[7].x + P_var_name[8].x + P_var_name[9].x + P_var_name[10].x &
   + P_var_name[11].x + P_var_name[12].x + P_var_name[13].x + P_var_name[14].x + P_var_name[15].x &
   + P_var_name[16].x + P_var_name[17].x + P_var_name[18].x + P_var_name[19].x + P_var_name[20].x &
   + P_var_name[21].x + P_var_name[22].x + P_var_name[23].x + P_var_name[24].x + P_var_name[25].x &
   + P_var_name[26].x + P_var_name[27].x + P_var_name[28].x + P_var_name[29].x + P_var_name[30].x) / 30
ENDIF
IF cord = 2 THEN
   P_ave_value.y = (P_var_name[1].y + P_var_name[2].y + P_var_name[3].y + P_var_name[4].y + P_var_name[5].y &
   + P_var_name[6].y + P_var_name[7].y + P_var_name[8].y + P_var_name[9].y + P_var_name[10].y &
   + P_var_name[11].y + P_var_name[12].y + P_var_name[13].y + P_var_name[14].y + P_var_name[15].y &
   + P_var_name[16].y + P_var_name[17].y + P_var_name[18].y + P_var_name[19].y + P_var_name[20].y &
   + P_var_name[21].y + P_var_name[22].y + P_var_name[23].y + P_var_name[24].y + P_var_name[25].y &
   + P_var_name[26].y + P_var_name[27].y + P_var_name[28].y + P_var_name[29].y + P_var_name[30].y) / 30
ENDIF
IF cord = 3 THEN
   P_ave_value.z = (P_var_name[1].z + P_var_name[2].z + P_var_name[3].z + P_var_name[4].z + P_var_name[5].z &
   + P_var_name[6].z + P_var_name[7].z + P_var_name[8].z + P_var_name[9].z + P_var_name[10].z &
   + P_var_name[11].z + P_var_name[12].z + P_var_name[13].z + P_var_name[14].z + P_var_name[15].z &
   + P_var_name[16].z + P_var_name[17].z + P_var_name[18].z + P_var_name[19].z + P_var_name[20].z &
   + P_var_name[21].z + P_var_name[22].z + P_var_name[23].z + P_var_name[24].z + P_var_name[25].z &
   + P_var_name[26].z + P_var_name[27].z + P_var_name[28].z + P_var_name[29].z + P_var_name[30].z) / 30
ENDIF
IF cord = 4 THEN
   P_ave_value.w = (P_var_name[1].w + P_var_name[2].w + P_var_name[3].w + P_var_name[4].w + P_var_name[5].w &
   + P_var_name[6].w + P_var_name[7].w + P_var_name[8].w + P_var_name[9].w + P_var_name[10].w &
   + P_var_name[11].w + P_var_name[12].w + P_var_name[13].w + P_var_name[14].w + P_var_name[15].w &
   + P_var_name[16].w + P_var_name[17].w + P_var_name[18].w + P_var_name[19].w + P_var_name[20].w &
   + P_var_name[21].w + P_var_name[22].w + P_var_name[23].w + P_var_name[24].w + P_var_name[25].w &
   + P_var_name[26].w + P_var_name[27].w + P_var_name[28].w + P_var_name[29].w + P_var_name[30].w) / 30
ENDIF
IF cord = 5 THEN
   P_ave_value.p = (P_var_name[1].p + P_var_name[2].p + P_var_name[3].p + P_var_name[4].p + P_var_name[5].p &
   + P_var_name[6].p + P_var_name[7].p + P_var_name[8].p + P_var_name[9].p + P_var_name[10].p &
   + P_var_name[11].p + P_var_name[12].p + P_var_name[13].p + P_var_name[14].p + P_var_name[15].p &
   + P_var_name[16].p + P_var_name[17].p + P_var_name[18].p + P_var_name[19].p + P_var_name[20].p &
   + P_var_name[21].p + P_var_name[22].p + P_var_name[23].p + P_var_name[24].p + P_var_name[25].p &
   + P_var_name[26].p + P_var_name[27].p + P_var_name[28].p + P_var_name[29].p + P_var_name[30].p) / 30
ENDIF
IF cord = 6 THEN
   P_ave_value.r = (P_var_name[1].r + P_var_name[2].r + P_var_name[3].r + P_var_name[4].r + P_var_name[5].r &
   + P_var_name[6].r + P_var_name[7].r + P_var_name[8].r + P_var_name[9].r + P_var_name[10].r &
   + P_var_name[11].r + P_var_name[12].r + P_var_name[13].r + P_var_name[14].r + P_var_name[15].r &
   + P_var_name[16].r + P_var_name[17].r + P_var_name[18].r + P_var_name[19].r + P_var_name[20].r &
   + P_var_name[21].r + P_var_name[22].r + P_var_name[23].r + P_var_name[24].r + P_var_name[25].r &
   + P_var_name[26].r + P_var_name[27].r + P_var_name[28].r + P_var_name[29].r + P_var_name[30].r) / 30
ENDIF
-----------------------------------------------------------------------------
END Get_Average
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
ROUTINE Get_Stat(T_var1:ARRAY OF REAL;T_var2:ARRAY OF REAL;T_var3:ARRAY OF REAL;Pos_in:ARRAY OF XYZWPR;Pos_out:XYZWPR;Devi:ARRAY OF REAL;Sig:ARRAY OF REAL;rec_dat:INTEGER)
-----------------------------------------------------------------------------
-- PURPOSE: to get the Get the standard deviation and the six sigma
-- INPUT:  The program Variable to set passed as a string
--            -
-- CALLED BY:
-----------------------------------------------------------------------------
BEGIN
IF rec_dat = 1 THEN --to get found position data
  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].x - Pos_out.x)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[1] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[1] = SQRT(T_var3[1])   
  Sig[1] = (Devi[1]*6)
  CNV_REAL_STR(Devi[1], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[1])
  CNV_REAL_STR(Sig[1], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[1])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].y - Pos_out.y)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[2] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[2] = SQRT(T_var3[2])   
  Sig[2] = (Devi[2]*6)
  CNV_REAL_STR(Devi[2], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[2])
  CNV_REAL_STR(Sig[2], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[2])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].z - Pos_out.z)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[3] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[3] = SQRT(T_var3[3])   
  Sig[3] = (Devi[3]*6)
  CNV_REAL_STR(Devi[3], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[3])
  CNV_REAL_STR(Sig[3], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[3])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].w - Pos_out.w)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[4] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[4] = SQRT(T_var3[4])   
  Sig[4] = (Devi[4]*6)
  CNV_REAL_STR(Devi[4], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[4])
  CNV_REAL_STR(Sig[4], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[4])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].p - Pos_out.p)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[5] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[5] = SQRT(T_var3[5])   
  Sig[5] = (Devi[5]*6)
  CNV_REAL_STR(Devi[5], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[5])
  CNV_REAL_STR(Sig[5], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[5])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].r - Pos_out.r)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[6] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[6] = SQRT(T_var3[6])   
  Sig[6] = (Devi[6]*6)
  CNV_REAL_STR(Devi[6], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[6])
  CNV_REAL_STR(Sig[6], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[6])
ENDIF --For found position data
----------------------------------------------------------------------
IF rec_dat = 2 THEN --to get offset position data
  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].x - Pos_out.x)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[7] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[7] = SQRT(T_var3[7])   
  Sig[7] = (Devi[7]*6)
  CNV_REAL_STR(Devi[7], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[7])
  CNV_REAL_STR(Sig[7], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[7])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].y - Pos_out.y)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[8] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[8] = SQRT(T_var3[8])   
  Sig[8] = (Devi[8]*6)
  CNV_REAL_STR(Devi[8], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[8])
  CNV_REAL_STR(Sig[8], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[8])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].z - Pos_out.z)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[9] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[9] = SQRT(T_var3[9])   
  Sig[9] = (Devi[9]*6)
  CNV_REAL_STR(Devi[9], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[9])
  CNV_REAL_STR(Sig[9], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[9])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].w - Pos_out.w)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[10] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[10] = SQRT(T_var3[10])   
  Sig[10] = (Devi[10]*6)
  CNV_REAL_STR(Devi[10], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[10])
  CNV_REAL_STR(Sig[10], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[10])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].p - Pos_out.p)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[11] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[11] = SQRT(T_var3[11])   
  Sig[11] = (Devi[11]*6)
  CNV_REAL_STR(Devi[11], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[11])
  CNV_REAL_STR(Sig[11], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[11])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].r - Pos_out.r)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[12] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[12] = SQRT(T_var3[12])   
  Sig[12] = (Devi[12]*6)
  CNV_REAL_STR(Devi[12], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[12])
  CNV_REAL_STR(Sig[12], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[12])
ENDIF --For offset position data

IF rec_dat = 3 THEN --to get position with offset data
  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].x - Pos_out.x)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[13] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &  
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[13] = SQRT(T_var3[13])   
  Sig[13] = (Devi[13]*6)
  CNV_REAL_STR(Devi[13], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[13])
  CNV_REAL_STR(Sig[13], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[13])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].y - Pos_out.y)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[14] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[14] = SQRT(T_var3[14])   
  Sig[14] = (Devi[14]*6)
  CNV_REAL_STR(Devi[14], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[14])
  CNV_REAL_STR(Sig[14], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[14])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].z - Pos_out.z)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[15] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[15] = SQRT(T_var3[15])   
  Sig[15] = (Devi[15]*6)
  CNV_REAL_STR(Devi[15], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[15])
  CNV_REAL_STR(Sig[15], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[15])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].w - Pos_out.w)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[16] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[16] = SQRT(T_var3[16])   
  Sig[16] = (Devi[16]*6)
  CNV_REAL_STR(Devi[16], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[16])
  CNV_REAL_STR(Sig[16], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[16])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].p - Pos_out.p)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[17] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[17] = SQRT(T_var3[17])   
  Sig[17] = (Devi[17]*6)
  CNV_REAL_STR(Devi[17], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[17])
  CNV_REAL_STR(Sig[17], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[17])

  FOR I = 1 TO 30 DO
    T_var1[I] = (Pos_in[I].r - Pos_out.r)
    T_var2[I] = (T_var1[I] * T_var1[I])
  ENDFOR
  T_var3[18] = (T_var2[1] + T_var2[2] + T_var2[3] + T_var2[4] + T_var2[5] &
  + T_var2[6] + T_var2[7] + T_var2[8] + T_var2[9] + T_var2[10] &   
  + T_var2[11] + T_var2[12] + T_var2[13] + T_var2[14] + T_var2[15] &   
  + T_var2[16] + T_var2[17] + T_var2[18] + T_var2[19] + T_var2[20] &   
  + T_var2[21] + T_var2[22] + T_var2[23] + T_var2[24] + T_var2[25] &   
  + T_var2[26] + T_var2[27] + T_var2[28] + T_var2[29] + T_var2[30]) /30
  Devi[18] = SQRT(T_var3[18])   
  Sig[18] = (Devi[18]*6)
  CNV_REAL_STR(Devi[18], 4, 2, l_string)
  CNV_STR_REAL(l_string,Devi[18])
  CNV_REAL_STR(Sig[18], 4, 2, l_string)
  CNV_STR_REAL(l_string,Sig[18])
ENDIF --For found position data



-----------------------------------------------------------------------------
END Get_Stat
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
ROUTINE clear_data
-----------------------------------------------------------------------------
BEGIN

--Clear Pos data

	fnd_pos_o.config_data.cfg_turn_no1 = 0
	fnd_pos_o.config_data.cfg_turn_no2 = 0
	fnd_pos_o.config_data.cfg_turn_no3 = 0
	fnd_pos_o.config_data.cfg_flip = FALSE
	fnd_pos_o.config_data.cfg_left = FALSE
	fnd_pos_o.config_data.cfg_up = FALSE
	fnd_pos_o.config_data.cfg_front = FALSE
    fnd_pos_o.x = 0
    fnd_pos_o.y = 0
    fnd_pos_o.z = 0
    fnd_pos_o.w = 0
    fnd_pos_o.p = 0
    fnd_pos_o.r = 0

	ofset_pos_o =  fnd_pos_o
	fnd_ofset_po = fnd_pos_o

	FOR I = 1 TO 30 DO
	  fnd_pos[I] = fnd_pos_o
	  ofset_pos[I] = fnd_pos_o
	  fnd_pos[I] = fnd_pos_o
    ENDFOR
	FOR I = 1 TO 18 DO
	  sdev[I] = 0.0
	  sigma[I] = 0.0
    ENDFOR

End clear_data
-----------------------------------------------------------------------------
 
BEGIN 

  GET_TPE_PRM(1,1,cntr, rv, sv, status)
  GET_TPE_PRM(2,1,fnd, rv, sv, status)
  GET_TPE_PRM(3,1,ofset, rv, sv, status)
  GET_TPE_PRM(4,1,fnd_ofset, rv, sv, status)

  GET_REG(cntr,rf,I,rv,status)
  --set subscript I back to a valid range.
  IF UNINIT (I) THEN
    I = 1
  ENDIF

  IF (I > 30) OR (I < 1) THEN
    I = 1
  ENDIF

  IF cntr = 9999 THEN
    clear_data
  ELSE

  IF UNINIT (fnd_pos_o) THEN
	fnd_pos_o.config_data.cfg_turn_no1 = 0
	fnd_pos_o.config_data.cfg_turn_no2 = 0
	fnd_pos_o.config_data.cfg_turn_no3 = 0
	fnd_pos_o.config_data.cfg_flip = FALSE
	fnd_pos_o.config_data.cfg_left = FALSE
	fnd_pos_o.config_data.cfg_up = FALSE
	fnd_pos_o.config_data.cfg_front = FALSE
    fnd_pos_o.x = 0
    fnd_pos_o.y = 0
    fnd_pos_o.z = 0
    fnd_pos_o.w = 0
    fnd_pos_o.p = 0
    fnd_pos_o.r = 0
  ENDIF
  IF UNINIT(ofset_pos_o) THEN
	ofset_pos_o.config_data.cfg_turn_no1 = 0
	ofset_pos_o.config_data.cfg_turn_no2 = 0
	ofset_pos_o.config_data.cfg_turn_no3 = 0
	ofset_pos_o.config_data.cfg_flip = FALSE
	ofset_pos_o.config_data.cfg_left = FALSE
	ofset_pos_o.config_data.cfg_up = FALSE
	ofset_pos_o.config_data.cfg_front = FALSE
    ofset_pos_o.x = 0
    ofset_pos_o.y = 0
    ofset_pos_o.z = 0
    ofset_pos_o.w = 0
    ofset_pos_o.p = 0
    ofset_pos_o.r = 0
  ENDIF
  IF UNINIT(fnd_ofset_po) THEN
	fnd_ofset_po.config_data.cfg_turn_no1 = 0
	fnd_ofset_po.config_data.cfg_turn_no2 = 0
	fnd_ofset_po.config_data.cfg_turn_no3 = 0
	fnd_ofset_po.config_data.cfg_flip = FALSE
	fnd_ofset_po.config_data.cfg_left = FALSE
	fnd_ofset_po.config_data.cfg_up = FALSE
	fnd_ofset_po.config_data.cfg_front = FALSE
    fnd_ofset_po.x = 0
    fnd_ofset_po.y = 0
    fnd_ofset_po.z = 0
    fnd_ofset_po.w = 0
    fnd_ofset_po.p = 0
    fnd_ofset_po.r = 0
  ENDIF

	Rev = '3.0'
	a = 0
--	I = 0
		
    FOR a = 1 TO 18 DO
		IF UNINIT(sdev[a]) THEN
		  sdev[a] = 0.0
		ENDIF
		IF UNINIT(sigma[a]) THEN
		 sigma[a] = 0.0
		ENDIF
	    IF UNINIT(temp_i3[a]) THEN
		  temp_i2[a] = 0.0
		ENDIF
	ENDFOR

    FOR a = 1 TO 30 DO
    IF UNINIT(fnd_pos[a]) THEN
	  fnd_pos[a] = fnd_pos_o
	ENDIF
    IF UNINIT(ofset_pos[a]) THEN
	  ofset_pos[a] = ofset_pos_o
	ENDIF
    IF UNINIT(fnd_ofset_p[a]) THEN
	  fnd_ofset_p[a] = fnd_ofset_po
	ENDIF
    IF UNINIT(temp_i1[a]) THEN
	  temp_i1[a] = 0.0
	ENDIF
    IF UNINIT(temp_i2[a]) THEN
	  temp_i2[a] = 0.0
	ENDIF
  ENDFOR

  
--Get values from pos regs and store in array
  tmp_fnd = GET_POS_REG(fnd,status,1)	
  tmp_ofs = GET_POS_REG(ofset,status,1)	
  tmp_fofs = GET_POS_REG(fnd_ofset,status,1)
  
  fnd_pos[I] = tmp_fnd
  ofset_pos[I] = tmp_ofs
  fnd_ofset_p[I] = tmp_fofs

------------------------------------------------------------------------------------------------------
--Average the saved data start
------------------------------------------------------------------------------------------------------

-- Found position average
  fnd_pos_o.config_data = fnd_pos[1].config_data
  Get_Average(fnd_pos,fnd_pos_o,1)
  Get_Average(fnd_pos,fnd_pos_o,2)
  Get_Average(fnd_pos,fnd_pos_o,3)
  Get_Average(fnd_pos,fnd_pos_o,4)
  Get_Average(fnd_pos,fnd_pos_o,5)
  Get_Average(fnd_pos,fnd_pos_o,6)

-- offset average
  ofset_pos_o.config_data = ofset_pos[1].config_data
  Get_Average(ofset_pos,ofset_pos_o,1)
  Get_Average(ofset_pos,ofset_pos_o,2)
  Get_Average(ofset_pos,ofset_pos_o,3)
  Get_Average(ofset_pos,ofset_pos_o,4)
  Get_Average(ofset_pos,ofset_pos_o,5)
  Get_Average(ofset_pos,ofset_pos_o,6)

--positon with offset average
  fnd_ofset_po.config_data = fnd_ofset_p[1].config_data
  Get_Average(fnd_ofset_p,fnd_ofset_po,1)
  Get_Average(fnd_ofset_p,fnd_ofset_po,2)
  Get_Average(fnd_ofset_p,fnd_ofset_po,3)
  Get_Average(fnd_ofset_p,fnd_ofset_po,4)
  Get_Average(fnd_ofset_p,fnd_ofset_po,5)
  Get_Average(fnd_ofset_p,fnd_ofset_po,6)

--END average section
IF I = 30 THEN


 Get_Stat(temp_i1,temp_i2,temp_i3,fnd_pos,fnd_pos_o,sdev,sigma,1)
 Get_Stat(temp_i1,temp_i2,temp_i3,ofset_pos,ofset_pos_o,sdev,sigma,2)
 Get_Stat(temp_i1,temp_i2,temp_i3,fnd_ofset_p,fnd_ofset_po,sdev,sigma,3)

ENDIF
ENDIF

END STATIC82