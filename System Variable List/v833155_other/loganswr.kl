-- -----------------------------------------------------------------------
--
--   MODULE:         LOGANSWR.KL
--   TITLE:          Log Operator Answer PROGRAM
--
--
--   WRITTEN BY:     RANDY KOSASKI
--   REVISION DATE:  07/24/08
--
--   LANGUAGE:       KAREL 7.4 RJ3
--   CONTROL GROUP:  AUTOMATED SYSTEMS GROUP
--   STATUS:
--
--
--   ORDER NUMBER:
--   PROJECT NAME:
--
--
--         FANUC Robotics retains rights in any and all Software
--         contained in the material attached hereto and said
--         Software may not be copied or reproduced without the
--         written permission of FANUC Robotics.
--
--         All Software, (C) Copyright FANUC Robotics Corporation, 2000
--         DESCRIPTION: ROBOT MAIN PROGRAM
--
--         HISTORY OF CHANGES:
--
--         REVISION   DATE       BY               COMMENTS
--         --------   ---------  ---------------  --------------------
--
--
--
--
--------------------------------------------------------------------------
PROGRAM LOGANSWR

%NOLOCKGROUP
%COMMENT = 'Log User Answer'
%INCLUDE KLIOTYPS
--

CONST
INT_ARG = 1 -- Integer argument type
REAL_ARG = 2 -- Real argument type
STRING_ARG = 3 -- String argument type
NO_ARG    = 4 -- no argument was found

VAR

tp_param,
error_sev,    -- the user passed severity codes.
              --0 : WARNING, no change in task execution
              --1 : PAUSE, all tasks and stop all motion
              --2 : ABORT, all tasks and cancel
i,
status,
prm_type,
prm_int,
int_value,
port_type,
register_no,
strip_string,
entry :INTEGER

rmv_cmn_str IN CMOS : INTEGER -- Used for how much of common comment string to remove

real_value,
PRM_REAL  : REAL -- Used for the GET_TPE_PRM builtin
PRM_STRG  : STRING[16] -- Used for GET_TPE_PRM builtin
cnvd_string   : STRING[11] -- used for the target in cnv_#_string builtin
comment_str : STRING[24] -- used for the result of the comment string
error_string  : STRING[128] -- Used for writing an erro message to the alarm Log
real_flag,
param_fault  : BOOLEAN -- Used for if the Paramter failed or is invalid
------------------------------------------------------------------------------
-- ROUTINE Trim
-- Remove leading and trailing spaces
-------------------------------------------------------------------------------
ROUTINE Trim (strText : STRING) : STRING

VAR
  strChar      : STRING[1]
  strTemp      : STRING[128]
  intFront     : INTEGER
  intBack      : INTEGER
  intIndex     : INTEGER
  intLength    : INTEGER

BEGIN

  strChar = ''
  strTemp = ''

  intLength = STR_LEN(strText)

  IF intLength = 0 THEN RETURN(strText) ; ENDIF

  intIndex = 1
  intFront = intIndex

  --find the front of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex + 1
    IF intIndex <= intLength THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intFront = intIndex
    ELSE
      strChar = ''
    ENDIF

  ENDWHILE

  intIndex = STR_LEN(strText)
  intBack = intIndex

  --find the back of the string
  strChar = SUB_STR(strText, intIndex, 1)
  WHILE strChar = ' ' DO
    intIndex = IntIndex - 1
    IF intIndex >= 1 THEN
      strChar = SUB_STR(strText, intIndex, 1)
      intBack = intIndex
    ELSE
      strChar = ''
    ENDIF
  ENDWHILE
  -- Added the addition charectors to strip off front of common string start (i.e. GM)
  intFront = intFront + rmv_cmn_str
  -- using SUB_STR to extract the string between front and back doesn't work - so we do it the hard way
  FOR intIndex=intFront TO intBack DO
    strChar = SUB_STR(strText, intIndex, 1)
    strTemp = strTemp + strChar
  ENDFOR

  RETURN(strTemp)

END Trim
-----------------------------------------------------------------------------
ROUTINE get_param(req_number:INTEGER):INTEGER
-- PURPOSE:  this routine get the parameters from a teach pendant called program
--
--
-- INPUT:    the parameter number requested
--            -
-- OUTPUT:   the parameter type integer
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN
  prm_type = 0
  GET_TPE_PRM (req_number, prm_type, prm_int, prm_real,PRM_STRG, status)
  IF (status = 17042) THEN -- no parameter
    prm_type = NO_ARG
  ENDIF

  RETURN(prm_type)

END get_param
-----------------------------------------------------------------------------
ROUTINE cnv_serv
-- PURPOSE:  convert servity to register and read convert to string
--
--
-- INPUT:
--            -
-- OUTPUT:
--            -
-- CALLED BY:
--
--
-----------------------------------------------------------------------------

BEGIN
   GET_REG(register_no, real_flag, int_value, real_value, status)
     IF status <>0 THEN
       POST_ERR(38000, 'Get register built-in Failed', status, 0) --
     ELSE -- Register value is good
       IF real_flag THEN
         CNV_REAL_STR(real_value,10,2,cnvd_string)
       ELSE
         CNV_INT_STR(int_value,10,0,cnvd_string)
       ENDIF
       cnvd_string = trim(cnvd_string)
       error_string = error_string+' ' + cnvd_string +' ' -- add to string
     ENDIF

END cnv_serv
-----------------------------------------------------------------------------

BEGIN

 IF UNINIT(strip_string) THEN
   strip_string = 3  -- set the number of Charectors to remove from output text i.e pbo
 ENDIF
 rmv_cmn_str = 0
 register_no = 0
 param_fault = FALSE
 comment_str = ''
 error_string = 'Recovery Option#'

  -- Get the Operator Selected Answer Register#
  tp_param = get_param(1)
  IF tp_param <> INT_ARG THEN -- Make sure is a integer Register
    POST_ERR(38000, 'LOGANSWR AR[1] only Uses INTEGERS', 0, 0) --
  ELSE -- Go get register Value,convert to string and Add to string
    register_no = prm_int
    cnv_serv -- get value and addes to string
    error_string = error_string + 'Selected'
  ENDIF

  -- Get the fault output number to read comment string
  tp_param = get_param(2)
  IF (tp_param <> INT_ARG) THEN -- Make sure is a integer Register
    IF (tp_param <> NO_ARG) THEN
      POST_ERR(38000, 'LOGANSWR AR[2] only Uses INTEGERS', 0, 0) --
    ENDIF
  ELSE -- Go get register Value,convert to string and Add to string
    error_string = error_string + ',Fault DO'
    register_no = prm_int
    cnv_serv -- add the Do # for the fault
    register_no = int_value-- tp_param -- set from cnv_serv routine when Reg was read
    -- go get the fault string from Comment Field
    GET_PORT_CMT(io_dout, register_no, comment_str, status)
      IF status<>0 THEN
        POST_ERR(38000, 'GET_PORT_CMT Failed', status, 0) --
      ELSE
        rmv_cmn_str = strip_string -- used for stripping common string charectors
        error_string = error_string + trim(comment_str)
      ENDIF
  ENDIF

 IF (param_fault = FALSE) AND (error_string <>'') THEN
   POST_ERR(38000, error_string, 0, 0) --
 ENDIF

END LOGANSWR
