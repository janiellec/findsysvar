--    This material is the joint property of Fanuc Robotics Corporation  and
--    FANUC  LTD  Japan,  and  must  be  returned  to  either Fanuc Robotics
--    Corporation or FANUC LTD Japan immediately upon request.  This  material
--    and   the  information  illustrated  or  contained  herein  may  not  be
--    reproduced, copied, used, or transmitted in whole or in part in any  way
--    without the prior written consent of both Fanuc Robotics and FANUC.
--    
--             All Rights Reserved
--             Copyright (C)   1992
--             Fanuc Robotics Corporation
--             FANUC LTD Japan
--    
--             Karel is a registered trademark of
--             Fanuc Robotics Corporation
--    +
--    Program:   xmitdata - Sends data to another controller.  Supports
--                          Real, Integer, String or Positional data.
--                          
--                          This program accepts four parameters:
--                          Parameter #1 = Destination Robot Name (string)
--                          Parameter #2 = Destination Program Name (string)
--                          Parameter #3 = Destination Variable Name (string)
--                          Parameter #4 = Data Register Number (integer)
--
--    Description:
--    
--    Language: KAREL
--    
--    Source File:   get_kvar.kl   18-APR-2010   04:05PM
--    
--    Author: DAVID R. FRIEDEMAN                 
--            Fanuc Robotics Corporation
--            2000 South Adams Road
--            Auburn Hills, Michigan    48326-2800
--    
--    Modification history:
--
--   18-APR-10  FRIEDEMAN  750/01 Created
--
--   24-Aug-10  FRIEDEMAN  770/01 Updated to Spot+ V7.7X
--
--   08-Feb-13  FRIEDEMAN  770/02 Moved alarm codes to ETCUSTEG.ETX
--
--   29-Nov-16  FRIEDEMAN  Port to RS4 G4.
--
------------------------------------------------------------------
PROGRAM XMITDATA
------------------------------------------------------------------
%ENVIRONMENT ioblt
%environment sysdef
%environment regope
%environment multi
%ENVIRONMENT STRNG
%environment errs
%environment iosetup
--%environment sldef

%COMMENT='XmitData V4.0   '
%system
%nopause = ERROR + COMMAND + TPENABLE
%noabort = ERROR + COMMAND
%nobusylamp
%nolockgroup

CONST
  PARM_INTEGER =  1
  PARM_REAL    =  2
  PARM_STRING  =  3

  ER_XMGENERAL = 38099

VAR
  entry        : INTEGER
  real_value   : REAL
  real_data    : REAL
  io_status    : INTEGER
  status       : INTEGER
  data_type    : INTEGER
  int_value    : INTEGER
  int_data     : INTEGER
  dest_name    : STRING[16]
  prog_name    : STRING[16]  -- String parameters limited to 16 characters
  var_name     : STRING[16]  -- String parameters limited to 16 characters
  string_value : STRING[16]
  string_data  : STRING[16]
  reg_index    : INTEGER
  dest_string  : STRING[50]
  posreg_val   : XYZWPREXT
  numreg_int   : INTEGER
  numreg_real  : REAL
  real_flag    : BOOLEAN

ROUTINE int_to_strg(p_int :INTEGER) : STRING  FROM SUBRLIBR

BEGIN

  -- Get the Destination Name
  GET_TPE_PRM(1, data_type, int_value, real_value,dest_name,status)
  IF data_type <> PARM_STRING THEN
    POST_ERR(ER_XMGENERAL, 'Parameter 1 Must Be String', 0, 0)
    ABORT
  ENDIF

  -- Get the Program Name
  GET_TPE_PRM(2, data_type, int_value, real_value,prog_name,status)
  IF data_type <> PARM_STRING THEN
    POST_ERR(ER_XMGENERAL, 'Parameter 2 Must Be String', 0, 0)
    ABORT
  ENDIF

  -- Get the Variable Name
  GET_TPE_PRM(3, data_type, int_value, real_value,var_name,status)
  IF data_type <> PARM_STRING THEN
    POST_ERR(ER_XMGENERAL, 'Parameter 3 Must Be String', 0, 0)
    ABORT
  ENDIF

  -- Get the Data Register Number for the result
  GET_TPE_PRM(4, data_type, int_data, real_data,string_data,status)
  IF data_type <> PARM_INTEGER THEN
    --POST_ERR(ER_XMGENERAL, 'Parameter 4 Must Be An Integer', 0, 0)
    --ABORT
  ENDIF

  dest_string =  '\\' + dest_name + '\' + prog_name

  IF (prog_name = '*POSREG*') THEN
    posreg_val = get_pos_reg(int_data,status)
    posreg_val.ext1 = 0
    SET_VAR(entry,dest_string,var_name,posreg_val,status)
  ELSE
    IF (prog_name = '*NUMREG*') THEN
      GET_REG(int_data,real_flag, numreg_int, numreg_real, status)
      IF (real_flag = FALSE) THEN -- Integer  
        SET_VAR(entry,dest_string,var_name,numreg_int,status)
      ELSE
        SET_VAR(entry,dest_string,var_name,numreg_real,status)
      ENDIF
    ELSE
      IF (data_TYPE = PARM_INTEGER) THEN
        SET_VAR(entry,dest_string,var_name,int_data,status)
      ELSE
        IF (data_TYPE = PARM_REAL) THEN
          SET_VAR(entry,dest_string,var_name,real_data,status)
        ELSE
          IF (data_TYPE = PARM_STRING) THEN
            SET_VAR(entry,dest_string,var_name,string_data,status)
          ELSE
            POST_ERR(ER_XMGENERAL, 'INVALID COMMAND', 0, 0)
            ABORT
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  ENDIF

  IF (status <> 0) THEN
    POST_ERR(status, '', 0, 0)
  ENDIF

END XMITDATA
